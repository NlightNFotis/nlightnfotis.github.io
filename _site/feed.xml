<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Fotis Koutoulakis</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2014-08-31T22:45:44+03:00</updated>
<id>/</id>
<author>
  <name>Fotis Koutoulakis</name>
  <uri>/</uri>
  <email>fotis.koutoulakis@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Distro forking 101: How do you fork a Linux distro?]]></title>
 <link rel="alternate" type="text/html" href="/distro-forking-101/" />
  <id>/distro-forking-101</id>
  <published>2014-07-09T15:04:00+03:00</published>
  <updated>2014-07-09T15:04:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;defining-the-gnulinux-distribution&quot;&gt;Defining the GNU/Linux distribution&lt;/h1&gt;

&lt;p&gt;If you are here, we can safely assume that you already know what a &lt;strong&gt;GNU/Linux software
distribution&lt;/strong&gt; is, but for completion’s sake, let’s just define so we all have the same context.&lt;/p&gt;

&lt;p&gt;A GNU/Linux distribution is a collection of system and application software, packaged together
by the distribution’s developers, so that they are distributed in a nicely integrated bundle, ready
to be used by users and developers alike. Software typically included in such a distribution
ranges from a compiler toolchain, to the C library, to filesystem utilities to text editors.&lt;/p&gt;

&lt;p&gt;As you can imagine, from the existence of several different GNU/Linux distributions, there are 
multiple ways that you could possibly combine all these different applications and their respective
configurations, not to mention that you could include even more specialised software, depending
on the target audience of the distribution (such as multimedia software for a distribution like 
&lt;a href=&quot;http://ubuntustudio.org/&quot;&gt;Ubuntu Studio&lt;/a&gt; or penetration testing tools for a distribution such as
&lt;a href=&quot;http://www.kali.org/&quot;&gt;Kali Linux&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&quot;the-f-word&quot;&gt;The “f” word&lt;/h1&gt;

&lt;p&gt;But even with such a great number of different software collections and their respective configurations
there still may not be one that appeals to your specific needs. That’s ok though, as you can still
customize each and every distribution to your specific liking. Extensive customization is known to
create a &lt;em&gt;differentiation point&lt;/em&gt; known as a &lt;strong&gt;potential forking point&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Forking is a term that has been known to carry negative connotations. &lt;a href=&quot;http://en.wikipedia.org/wiki/Fork_%28software_development%29&quot;&gt;As wikipedia puts it&lt;/a&gt;, &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the term often implies not merely a development branch, but a split in the developer community
a form of schism.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Historically, it has also been used as a leverage to coerce a project’s developers 
into merging code into their master branches
that they didn’t originally want to, or otherwise take a decision that they wouldn’t have taken
if not under the pressure of a &lt;em&gt;“fork”&lt;/em&gt;. But why is it so?&lt;/p&gt;

&lt;p&gt;You see, traditionally, forking a project meant a couple of things: For starters, there were now
two, identical projects, competing in the same solution space. 
Those two projects had different development hours and 
features or bug fixes going into them, and eventually, one of the two ended up being obsolete.
Apart from that forking also created an atmosphere of intense competition among the two projects.&lt;/p&gt;

&lt;p&gt;However, in 2014, and the advent of the distributed version control systems such as &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt; 
and &lt;a href=&quot;http://mercurial.selenic.com/&quot;&gt;mercurial&lt;/a&gt; and of the social coding websites such as &lt;a href=&quot;http://www.github.com&quot;&gt;Github&lt;/a&gt; and &lt;a href=&quot;http://www.bitbucket.org&quot;&gt;Bitbucket&lt;/a&gt;, the term is finally taking
on a more lax meaning, as just another code repository that may or may not enjoy major 
(or even minor, for that matter) development.&lt;/p&gt;

&lt;h2 id=&quot;forking-a-gnulinux-distribution&quot;&gt;Forking a GNU/Linux distribution&lt;/h2&gt;

&lt;p&gt;So, up until now we have discussed what a GNU/Linux distribution is, and what a fork is. 
However, we haven’t discussed yet what it means to fork a GNU/Linux distribution.&lt;/p&gt;

&lt;p&gt;You see, what differentiates each distro from the other ones, apart from the software collection 
that they contain, is the way in which they provide (and deploy) that software. Yes, we are talking about software packages and their respective package managers. Distributions from the Debian
(.deb) family are using &lt;code&gt;dpkg&lt;/code&gt; along with &lt;code&gt;apt&lt;/code&gt; or &lt;code&gt;synaptic&lt;/code&gt; or &lt;code&gt;aptitude&lt;/code&gt; or some other higher level
tool. RPM (.rpm) based distributions may use &lt;code&gt;rpm&lt;/code&gt; with &lt;code&gt;yum&lt;/code&gt; or &lt;code&gt;dnf&lt;/code&gt; or  &lt;code&gt;zypper&lt;/code&gt; or another higher level tool. 
Other distributions, not based on the aforementioned may choose to roll their own configuration
of packages and package managers, with Arch Linux using its own &lt;code&gt;pacman&lt;/code&gt;, Sabayon uses its &lt;code&gt;entropy&lt;/code&gt;
package manager, etc.&lt;/p&gt;

&lt;p&gt;Now, naturally, if you want to customize an application to your liking, you have many ways in which
you could do that. One of them is downloading the tarball from the upstream’s website or ftp 
server, &lt;code&gt;./configure&lt;/code&gt; it and then &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;make install&lt;/code&gt; it. But if you do start customizing
lots of applications this way, it can become tedious and unwieldy too soon. After all, what did
that &lt;code&gt;make install&lt;/code&gt; install exactly? Will the new update replace those files? What were your
configuration options? Did they replace the files the package manager installed?&lt;/p&gt;

&lt;p&gt;In this case, it really pays off to learn &lt;strong&gt;packaging&lt;/strong&gt; software for your distribution of choice.
What this means is to learn the format of packages your distribution’s package manager accepts
as well as how you could produce them. This way, instead of the &lt;code&gt;./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/code&gt; 
cycle, you just have beautiful software packages, that you can control more tightly, you can 
update more easily and you can also distribute them to your friends if you so desire. As an added
bonus, now the package manager also knows about those files, and you can install, remove
or update them much more easily. What’s not to like?&lt;/p&gt;

&lt;p&gt;After you have created some custom packages, you may also wish to create a repository
to contain them and update straight from that. &lt;strong&gt;Congratulations, you have created your custom
distribution, and a potential fork.&lt;/strong&gt; While you are at it, if you really want to fork the distribution,
you could as well take the distribution’s &lt;code&gt;base&lt;/code&gt; packages, customize them, rebuild them, and then
distribute them. &lt;strong&gt;Congratulations again, now you have your true GNU/Linux distribution fork&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;that-seems-easy-more-specifically&quot;&gt;That seems easy. More specifically?&lt;/h1&gt;

&lt;p&gt;Yes of course. Let’s take a look at how you might want to go about forking some well known
GNU/Linux distribution.&lt;/p&gt;

&lt;h2 id=&quot;debian&quot;&gt;Debian&lt;/h2&gt;

&lt;p&gt;In Debian, your usual procedure if you wish to customize a package is the below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, you make sure you have the essential building software installed. &lt;code&gt;apt-get install build-essential devscripts debhelper&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then you need to download the package’s build dependencies. &lt;code&gt;apt-get build-dep $package_name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now it’s time to download it’s sources, via &lt;code&gt;apt-get source $package_name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Proceed with customizing it to your liking (update it, patch the sources, etc)&lt;/li&gt;
  &lt;li&gt;Now it’s time to rebuild it. &lt;code&gt;debuild -us -uc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming all went fine, you should now have an &lt;code&gt;$package_name.deb&lt;/code&gt; file in your current 
directory ready to be installed with &lt;code&gt;dpkg -i $package_name.deb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please take note that the above is not an extensive treatise into debian packaging by any means.
If you want to build custom debian packages, here are some links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.debian.org/IntroDebianPackaging&quot;&gt;Debian wiki: intro to Debian packaging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://people.connexer.com/~roberto/howtos/debcustomize&quot;&gt;Roberto C Sanchez: Debian package customization how to&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.debian.org/HowToPackageForDebian&quot;&gt;Debian wiki: How to package for Debian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you have your custom packages, it’s time to build a repository to contain them. There 
are many tools you can use to do that, including the official debian package archiving tool
known as &lt;code&gt;dak&lt;/code&gt;, but if you want a personal repository without too much hassle, it’s better if you
use &lt;code&gt;reprepro&lt;/code&gt;. I won’t go to full length on that here, &lt;a href=&quot;http://www.debian-administration.org/article/286/Setting_up_your_own_APT_repository_with_upload_support&quot;&gt;but instead I will lead you to a very
good guide to do so if you so desire&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;fedora&quot;&gt;Fedora&lt;/h2&gt;

&lt;p&gt;Building packages for fedora is a procedure similar to the debian one. Fedora however is more
convenient in one aspect: &lt;a href=&quot;http://download.fedoraproject.org/pub/fedora/linux/releases/20/Fedora/source/iso/Fedora-20-source-DVD.iso&quot;&gt;It allows you to download a DVD image with all the sources in &lt;code&gt;.rpm&lt;/code&gt; form
ready for you to customize and rebuild to your tastes.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from that, the usual procedure is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download the &lt;code&gt;SRPM&lt;/code&gt; (source RPM) via any means. You could do that using the &lt;code&gt;yumdownloader&lt;/code&gt; utility, likewise &lt;code&gt;yumdownloader $package_name&lt;/code&gt;. To use &lt;code&gt;yumdownloader&lt;/code&gt;, you need
to have &lt;code&gt;yum-utils&lt;/code&gt; installed.&lt;/li&gt;
  &lt;li&gt;After you have downloaded the &lt;code&gt;SRPM&lt;/code&gt;, next you have to unpack it: &lt;code&gt;rpm -i $package_name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Next up, you customize the package to your liking (patch the sources, etc)&lt;/li&gt;
  &lt;li&gt;Finally, you &lt;code&gt;cd&lt;/code&gt; to the &lt;code&gt;SPECS&lt;/code&gt; folder, and then &lt;code&gt;rpmbuild -ba $package.spec&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again the above mentioned steps may not be 100% correct. If you want to go down this route,
see the following links for more information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.centos.org/HowTos/RebuildSRPM&quot;&gt;Centos wiki: Rebuild SRPM how-to&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cyberciti.biz/faq/yum-download-source-packages-from-rhn/&quot;&gt;cyberciti: yum Download all Source Packages from RedHat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bradthemad.org/tech/notes/patching_rpms.php&quot;&gt;bradthemad.org: How to patch and rebuild an RPM package&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rpm.org/max-rpm/ch-rpm-build.html&quot;&gt;rpm.org: Chapter 11. Building packages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fedoraproject.org/wiki/How_to_create_an_RPM_package&quot;&gt;Fedora wiki: How to create an RPM package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next up, is the repository creation step. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To create a yum repository, you need to &lt;code&gt;yum install createrepo&lt;/code&gt;. 
After that you need to create a directory to use as the repository, likewise
&lt;code&gt;mkdir /var/ftp/repo/Fedora/19/{SRPMS, i386,x86_64)&lt;/code&gt;. &lt;/li&gt;
  &lt;li&gt;After that you move your i386 packages to &lt;code&gt;/var/ftp/repo/Fedora/19/i386&lt;/code&gt;, and the rest
of the packages to their respective folders.&lt;/li&gt;
  &lt;li&gt;Next step is adding a configuration file to &lt;code&gt;/etc/yum.repos.d/&lt;/code&gt; that describes your repository
to yum.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, not definitive, and for more information, take a look at these links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/sec-Yum_Repository.html&quot;&gt;Redhat: Creating a yum repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.techrepublic.com/blog/linux-and-open-source/create-your-own-yum-repository&quot;&gt;techrepublic: Creating your own yum repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.fedoraproject.org/en-US/Fedora/14/html/Deployment_Guide/sec-Creating_a_Yum_Repository.html&quot;&gt;Fedora documentation: Creating a yum repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;arch-linux&quot;&gt;Arch Linux&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.archlinux.org/&quot;&gt;Arch Linux&lt;/a&gt;, at least in comparison to &lt;code&gt;.deb&lt;/code&gt; and &lt;code&gt;.rpm&lt;/code&gt; package
distribution families is very easy to customize to your liking. That’s to be expected though
as Arch Linux is a distribution that sells itself of the customization capabilities it offers to its user.&lt;/p&gt;

&lt;p&gt;In essence, if you want to customize a package, the general process is this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download Arch tarball that contains the &lt;code&gt;PKGBUILD&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;untar the tarball&lt;/li&gt;
  &lt;li&gt;(Optional) download the upstream tarball referenced in the &lt;code&gt;PKGBUILD&lt;/code&gt;, and modify it
 to your liking&lt;/li&gt;
  &lt;li&gt;run &lt;code&gt;makepkg&lt;/code&gt; in the folder containing the &lt;code&gt;PKGBUILD&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;install (using pacman) the &lt;code&gt;.xz&lt;/code&gt; file produced after the whole process is finished.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to download the official {core | extra | community} packages, you need to run as root
&lt;code&gt;abs&lt;/code&gt;. This will create a directory tree that contains the files required for building any package 
in the official repositories.&lt;/p&gt;

&lt;p&gt;Next up, you can create a custom local repository with the &lt;code&gt;repo-add&lt;/code&gt; tool, and then proceeding
with editing &lt;code&gt;/etc/pacman.conf&lt;/code&gt; and adding an entry for your repository there. For more information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://arch-stable.blogspot.gr/2012/02/make-your-own-local-repo-for-arch-linux.html&quot;&gt;arch-stable: make your own local repo for arch linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/makepkg&quot;&gt;arch wiki: makepkg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Pacman_tips&quot;&gt;arch wiki: pacman tips&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Arch_Build_System&quot;&gt;arch wiki: Arch Build System&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Pacman#Repositories&quot;&gt;arch wiki: Pacman#Repositories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;to-fork-or-not-to-fork&quot;&gt;To fork or not to fork?&lt;/h1&gt;

&lt;p&gt;Well, that’s not an easy question to answer. My opinion is that it’s extremely educational to
do a &lt;strong&gt;&lt;em&gt;soft&lt;/em&gt;&lt;/strong&gt; fork, clone the distribution’s core repository, and for some time maintain your own
distribution based on it, that is, update and customize all the repositories. Do that for some months,
then go back to using your distribution of choice now that you are enlightened with how it works
under the hood. The reason this is very educational is that it will teach you the ins and outs of
your distribution, teach you about &lt;strong&gt;all&lt;/strong&gt; the software in it, how it integrates, what its role is.
It will teach you packaging which is a tremendously undervalued skill, as you can customize
your experience to your liking, and it will make you appreciate the effort going into maintaining
the distribution.&lt;/p&gt;

&lt;p&gt;As for doing a &lt;strong&gt;hard&lt;/strong&gt; fork, that is creating your own distribution, that you commit to maintaining
it for a long time, my opinion is that it’s simply not worth it. Maintaining a distribution, be it
by yourself, or with your friends, is a tremendous amount of work, that’s not worth it unless
you have other goals you want to achieve by that. If all you want to do is to customize your 
distribution of choice to your liking, then go ahead, learn packaging for it, customize-package
the applications you want, then create your own repo - but always track the upstream. Diverging
too much from the upstream is not worth the hassle, as you will end up spending more time
maintaining than using the distribution in the end.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;tl;dr:&lt;/h2&gt;

&lt;p&gt;If you want to do a small scale, private fork in order to see what’s under the hood of your Linux
distro; by all means go ahead.&lt;/p&gt;

&lt;p&gt;If you want to do a large scale, public fork, then take your time to calculate the effort, if it’s worth it,
and if you could just help the upstream distribution implement the features you want. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/distro-forking-101/&quot;&gt;Distro forking 101: How do you fork a Linux distro?&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on July 09, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[How the Compiler, the Library and the Kernel work - Part 3]]></title>
 <link rel="alternate" type="text/html" href="/how-the-compiler/" />
  <id>/how-the-compiler</id>
  <published>2014-06-20T20:49:00+03:00</published>
  <updated>2014-06-20T20:49:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;In the last part of this series, we talked about the compiler’s composition, including the assembler
and the linker. We showed what happens when the compiler runs, and what’s the output
of translation software such as &lt;code&gt;cc1&lt;/code&gt; or &lt;code&gt;as&lt;/code&gt; etc. In this final part of the series, we are going
to talk about the C library, how our programs interface with it, and how it interfaces with 
the kernel.&lt;/p&gt;

&lt;h1 id=&quot;the-c-standard-library&quot;&gt;The C Standard Library&lt;/h1&gt;

&lt;p&gt;The C Standard Library is pretty much a part of every UNIX like operating system. It’s basically
a collection of code, including functions, macros, type definitions etc, in order to provide facilities
such as string handling (&lt;code&gt;string.h&lt;/code&gt;), mathematical computations (&lt;code&gt;math.h&lt;/code&gt;), input and output
(&lt;code&gt;stdio.h&lt;/code&gt;), etc.&lt;/p&gt;

&lt;p&gt;GNU/Linux operating systems are generally using the &lt;a href=&quot;http://www.gnu.org/software/libc/libc.html&quot;&gt;GNU C Library implementation(GLIBC)&lt;/a&gt;,
but it’s common to find other C libraries being used (especially in embedded systems) such as 
&lt;a href=&quot;http://www.uclibc.org&quot;&gt;uClibC&lt;/a&gt;, &lt;a href=&quot;http://sources.redhat.com/newlib&quot;&gt;newlib&lt;/a&gt;, or in the case
of Android/Linux systems &lt;a href=&quot;https://android.googlesource.com/platform/bionic.git&quot;&gt;Bionic&lt;/a&gt;.
BSD style operating systems usually have their own implementation of a C library.&lt;/p&gt;

&lt;h2 id=&quot;so-how-does-one-use-the-c-standard-library&quot;&gt;So, how does one “use” the C Standard Library?&lt;/h2&gt;

&lt;p&gt;So, now that we are acquainted with the C Library, how do you make use of it, you ask? The answer is:
&lt;strong&gt;automagically&lt;/strong&gt; :). Hold on right there; that’s not exactly a hyperbole. You see, when you
write a basic C program, you usually &lt;code&gt;#include &amp;lt;some_header.h&amp;gt;&lt;/code&gt; and then continue with
using the code declared in that header. We have explained in the previous part of this series
that when we use a function, say &lt;code&gt;printf()&lt;/code&gt;, in reality it’s the linker that does the hard work 
and allows us to use this function, by linking our program against the &lt;code&gt;libc&lt;/code&gt;’s &lt;code&gt;so&lt;/code&gt; (shared 
object). So in essence, when you need to use the C Standard Library, you just &lt;code&gt;#include&lt;/code&gt;
headers that belong to it, and the linker will resolve the references to the code included.&lt;/p&gt;

&lt;p&gt;Apart from the functions that are defined in the Standards however, a C Library might also
implement further functionality. For example, the Standards don’t say anything about networking.
As a matter of fact, most libraries today may implement not only what’s in the C Standards,
but may also choose to comply with the requirements of the POSIX C library, which is a superset
of the C Standard library.&lt;/p&gt;

&lt;h2 id=&quot;ok-and-how-does-the-c-library-manage-to-provide-these-services&quot;&gt;Ok, and how does the C Library manage to provide these services?&lt;/h2&gt;

&lt;p&gt;The answer to this question is simple: Some of the services that the library provides, it does so
without needing any sort of special privileges, being normal, userspace C code, while others
need to ask the Operating’s system Kernel to provide these facilities for the library.&lt;/p&gt;

&lt;p&gt;How does it do so? By calling some functions exported by the kernel to provide certain functionality
 named &lt;strong&gt;system calls&lt;/strong&gt;. System calls are the fundamental interface between a userspace
application and the Operating System Kernel. For example consider this:&lt;/p&gt;

&lt;p&gt;You might have a program that has code like this at one point: &lt;code&gt;fd = open(&quot;log.txt&quot;, &quot;w+&quot;);&lt;/code&gt;. That
&lt;code&gt;open&lt;/code&gt; function is provided by the C Library, but the C Library itself can not execute all of the
functionality that’s required to open a file, so it may call a &lt;code&gt;sys_open()&lt;/code&gt; system call that will
ask the kernel to do what’s required to load the file. In this case we say that the library’s &lt;code&gt;open&lt;/code&gt;
call acts as a wrapper function of the system call.&lt;/p&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;In this final part of our series, we saw how our applications interface with the C Standard Library
available in our system, and how the Library itself interfaces with the Operating system kernel
to provide the required services needed by the userspace applications.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading:&lt;/h2&gt;

&lt;p&gt;If you want to take a look at the System Call interface in the Linux Operating System, you could
always see the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;man page for the Linux system calls&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/how-the-compiler/&quot;&gt;How the Compiler, the Library and the Kernel work - Part 3&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on June 20, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Introduction to xv6: Adding a new system call.]]></title>
 <link rel="alternate" type="text/html" href="/introduction-to-xv6-adding-a-new-system-call/" />
  <id>/introduction-to-xv6-adding-a-new-system-call</id>
  <published>2014-04-28T18:24:00+03:00</published>
  <updated>2014-04-28T18:24:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;xv6-an-introduction&quot;&gt;xv6: An introduction&lt;/h1&gt;

&lt;p&gt;If you are like me, a low level pc programmer, it’s hard not to have heard
of &lt;strong&gt;xv6&lt;/strong&gt;. &lt;a href=&quot;http://pdos.csail.mit.edu/6.828/2012/xv6.html&quot;&gt;xv6&lt;/a&gt;, for those
who haven’t really heard of it, is a &lt;em&gt;UNIX version 6&lt;/em&gt; clone, designed
at MIT to help teach operating systems. &lt;/p&gt;

&lt;p&gt;The reasoning behind doing this was fairly simple: &lt;a href=&quot;http://www.lemis.com/grog/Documentation/Lions/&quot;&gt;Up until that point, MIT
had used John Lions’ famous commentary on the Sixth Edition of UNIX&lt;/a&gt;. But V6 was challenging due to a 
number of reasons. To begin with, it was written in a near ancient version
of C (pre K&amp;amp;R), and apart from that, it contained PDP-11 assembly
(a legendary machine for us UNIX lovers, but ancient nonetheless), which
didn’t really help the students that had to study both PDP-11 and the
(more common) x86 architecture to develop another (exokernel) operating
system on. &lt;/p&gt;

&lt;p&gt;So, to make things much more simpler, professors there decided to 
roll with a clone of UNIX version 6, that was x86 specific, 
written in ANSI C and supported multiprocessor machines.&lt;/p&gt;

&lt;p&gt;For a student (or a programmer interested in operating systems), xv6 is 
a unique opportunity to introduce himself to kernel hacking and to the
architecture of UNIX like systems. At about 15k lines of code (iirc), 
including the (primitive) libraries, the userland and the kernel,
it’s very easy (or well, at least easier than production scale UNIX like
systems) to grok, and it’s also very easy to expand on. It also helps
tremendously that xv6 as a whole has magnificent documentation, not only
from MIT, but from other universities that have adopted xv6 for use in their
operating systems syllabus.&lt;/p&gt;

&lt;h2 id=&quot;an-introduction-to-ensidia-my-very-personal-xv6-fork&quot;&gt;An introduction to Ensidia: my very personal xv6 fork&lt;/h2&gt;

&lt;p&gt;When I first discovered xv6 I was ecstatic. For the reasons mentioned above
I couldn’t lose on the opportunity to fork xv6 and use it as a personal
testbed for anything I could feel like exploring or testing out.&lt;/p&gt;

&lt;p&gt;As a matter of fact, when I first discovered xv6, &lt;a href=&quot;https://github.com/NlightNFotis/Fotix&quot;&gt;I had just finished 
implementing (the base of) my own UNIX like operating system, named fotix&lt;/a&gt;, 
and the timing of my discovery was great. xv6 had done what I had done,
and also implemented most of what I was planning to work on fotix
(for example, elf file loading), and it was a solid base for further 
development. It also had a userland, which fotix at the time didn’t have.&lt;/p&gt;

&lt;p&gt;After I forked xv6, I spent some time familiriazing myself with the code.
I also cleaned up the source code quite a bit, structuring the code in a 
BSD like folder structure, instead of having all of the code in the same 
folder and made various small scale changes. &lt;/p&gt;

&lt;p&gt;After that for quite some time, I had left ensidia alone and didn’t touch
it much. However, I always felt like I wanted to develop it a bit more
and get to play with its code in interesting ways. I was trying to think of
a great way to get started with kernel hacking on it, in a simple way, to 
get more acquainted with the kernel, and found an interesting pdf with 
interesting project ideas for it. One of them was to add a system call.
I figured out that would be an interesting and quick hack, so hey, why not?&lt;/p&gt;

&lt;h1 id=&quot;getting-started-with-kernel-hacking-on-xv6-adding-the-system-call&quot;&gt;Getting started with kernel hacking on xv6: Adding the system call.&lt;/h1&gt;

&lt;p&gt;The system call I decided to introduce was the suggested one. It was
fairly simple sounding too. You have to &lt;strong&gt;introduce a new system call
that returns the number of total system calls that have taken place
so far&lt;/strong&gt;. So let’s see how I went about implementing it:&lt;/p&gt;

&lt;h2 id=&quot;an-introduction-to-system-calls-in-xv6&quot;&gt;An introduction to system calls in xv6&lt;/h2&gt;

&lt;p&gt;First of all, we should provide some context about what system calls are,
how they are used, and how they are implemented in xv6.&lt;/p&gt;

&lt;p&gt;A system call is a function that a userspace application will use, so as
to ask for a specific service to be provided by the operating system. For
instance with an &lt;code&gt;sbrk(n)&lt;/code&gt; system call, a process can ask the kernel to
grow its heap space by n bytes. Another example is the well known &lt;code&gt;fork()&lt;/code&gt;
system call in the UNIX world, that’s used to create a new process by 
cloning the caller process.&lt;/p&gt;

&lt;p&gt;The way applications signal the kernel that they need that service is
by issueing a software &lt;em&gt;interrupt&lt;/em&gt;. An &lt;em&gt;interrupt&lt;/em&gt; is a signal generated
that notifies the processor that it needs to stop what its currently doing,
and handle the interrupt. This mechanism is also used to notify the processor
that information it was seeking from the disks is in some buffer, ready to
be extracted and processed, or, that a key was pressed in the keyboard. This
is called a hardware interrupt.&lt;/p&gt;

&lt;p&gt;Before the processor stops to handle the interrupt generated, it needs to 
save the current state, so that it can resume the execution in this context
after the interrupt has been handled. &lt;/p&gt;

&lt;p&gt;The code that calls a system call in xv6 looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;gas&quot;&gt;&lt;span class=&quot;c&quot;&gt;# exec(init, argv)&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;.globl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;start&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;start:&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;pushl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;$argv&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;pushl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;$init&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;pushl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;$0&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;caller&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;would&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;be&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;movl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;$SYS_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%eax&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;$T_SYSCALL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In essence, it pushes the argument of the call to the stack, and puts
the system call number (in the above code, that’s &lt;code&gt;$SYS_exec&lt;/code&gt;) into &lt;code&gt;%eax&lt;/code&gt;.
The number is used to match the entry in an array that holds pointers to
all the system calls. After that, it generates a software interrupt, with
a code (in this case &lt;code&gt;$T_SYSCALL&lt;/code&gt;) that’s used to index the interrupt
descriptor tables and find the appropriate interrupt handler. &lt;/p&gt;

&lt;p&gt;The code that is specific to find the appropriate interrupt handler is
called &lt;code&gt;trap()&lt;/code&gt; and is available in the file &lt;code&gt;trap.c&lt;/code&gt;. If &lt;code&gt;trap()&lt;/code&gt; check’s
out the trapnumber in the generated trapframe (a structure that represents
the processor’s state at the time that the trap happened) to be equal to
&lt;code&gt;T_SYSCALL&lt;/code&gt;, it calls &lt;code&gt;syscall()&lt;/code&gt; (the software interrupt handler)
 that’s available in &lt;code&gt;syscall.c&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// This is the part of trap that&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// calls syscall()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trapframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trapno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_SYSCALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;killed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;killed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;syscall()&lt;/code&gt; is finally the function that checks out &lt;code&gt;%eax&lt;/code&gt; to get the 
number of the system call (to index the array with the system 
call pointers), and execute the code corresponding to that system call.&lt;/p&gt;

&lt;p&gt;The implementation of system calls in xv6 is under two files. The first one
is &lt;code&gt;sysproc.c&lt;/code&gt;, and is the one containing the implementation of system calls
correspondent to processes, and &lt;code&gt;sysfile.c&lt;/code&gt; that contains the implementation
of system calls regarding the file system.&lt;/p&gt;

&lt;h2 id=&quot;the-specific-implementation-of-the-numcalls-system-call&quot;&gt;The specific implementation of the &lt;code&gt;numcalls()&lt;/code&gt; system call&lt;/h2&gt;

&lt;p&gt;To implement the system call itself is simple. I did so with a global variable
in &lt;code&gt;syscall.c&lt;/code&gt; called &lt;code&gt;syscallnum&lt;/code&gt;, that’s incremented everytime 
&lt;code&gt;syscall()&lt;/code&gt;, calls a system call function, that is, the system call
is valid.&lt;/p&gt;

&lt;p&gt;Next we just need a function, the system call implementation that returns
that number to the userspace program that asks for it. Below is the 
function itself, and &lt;code&gt;syscall()&lt;/code&gt; after our change.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// return the number of system calls that have taken place in&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the system&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sys_numcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscallnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// The syscall() implementation after&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// our change&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NELEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;syscallnum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// increment the syscall counter&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d %s: unknown sys call %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After that was done, the next few things that were needed to be done
were fairly straight forward. We had to add an index number for the new
system call in &lt;code&gt;syscall.h&lt;/code&gt;, expose it to user proccesses via &lt;code&gt;user.h&lt;/code&gt;,
and add a new macro to &lt;code&gt;usys.S&lt;/code&gt; that defines an asm routine that calls
that specific system call, and change the makefile to facilitate our change
. After doing so we had to write a userspace testing program to test our changes.&lt;/p&gt;

&lt;p&gt;The result after doing all this is below :)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;cpu1: starting
cpu0: starting
init: starting sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls
.              1 1 512
..             1 1 512
README         2 2 2209
cat            2 3 9725
&lt;span class=&quot;nb&quot;&gt;echo           &lt;/span&gt;2 4 9254
forktest       2 5 5986
grep           2 6 10873
init           2 7 9579
&lt;span class=&quot;nb&quot;&gt;kill           &lt;/span&gt;2 8 9246
ln             2 9 9240
ls             2 10 10832
mkdir          2 11 9315
rm             2 12 9308
sh             2 13 16600
stressfs       2 14 9790
usertests      2 15 37633
wc             2 16 10207
zombie         2 17 9028
syscallnum     2 18 9144
console        3 19 0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;syscallnum
The total number of syscalls so far is 643
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;syscallnum
The total number of syscalls so far is 705
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;syscallnum
The total number of syscalls so far is 767
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;syscallnum
The total number of syscalls so far is 829&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;I usually end my blog posts with an epilogue. Although this is a post
that doesn’t necesarilly need one, &lt;strong&gt;I wanted to write one just to say to you
that you should try kernel hacking&lt;/strong&gt;, &lt;em&gt;that is programming jargon for
programming an operating system kernel&lt;/em&gt;, because it’s an experience that
undoubtedly will teach you a great deal of things about how your computer
actually works.&lt;/p&gt;

&lt;p&gt;Last but not least, take a look at the ongoing work on &lt;a href=&quot;https://github.com/NlightNFotis/Ensidia&quot;&gt;Ensidia, my fork
of xv6&lt;/a&gt;. To see this particular
work, take a look at the &lt;code&gt;syscall&lt;/code&gt; branch.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://zoo.cs.yale.edu/classes/cs422/2010/reference&quot;&gt;CS422/522: Operating systems, Yale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zoo.cs.yale.edu/classes/cs422/2010/xv6-book/fscall.pdf&quot;&gt;Chapter 8, File System calls, xv6 reference, Yale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zoo.cs.yale.edu/classes/cs422/2010/xv6-book/trap.pdf&quot;&gt;Chapter 3, System calls, exceptions and interrupts, Yale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pdos.csail.mit.edu/6.828/2012/xv6/book-rev7.pdf&quot;&gt;xv6 Documentation, MIT csail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;/introduction-to-xv6-adding-a-new-system-call/&quot;&gt;Introduction to xv6: Adding a new system call.&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on April 28, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[How the compiler, the Library and the Kernel work - Part 2 ]]></title>
 <link rel="alternate" type="text/html" href="/how-the-compiler/" />
  <id>/how-the-compiler</id>
  <published>2014-04-25T18:27:00+03:00</published>
  <updated>2014-04-25T18:27:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;In the previous part of this little series, we talked about the compiler, and what it does 
with the header files, in our attempt to demistify their usage. In this part, I want to show you
what’s the compiler’s output, and how we create our file.&lt;/p&gt;

&lt;h1 id=&quot;the-compilers-composition&quot;&gt;The compiler’s composition&lt;/h1&gt;

&lt;p&gt;Generally speaking, a &lt;em&gt;compiler&lt;/em&gt; belongs to a family of software called &lt;strong&gt;translators&lt;/strong&gt;. 
A translator’s job is to read some source code in a source language, and generate (translate it to) 
some source code in a target language.&lt;/p&gt;

&lt;p&gt;Now, you might think that most compilers you know don’t do that. You input a (source code) file, 
and you get a binary file, ready to run when you want it to. Yes that’s what it does, but it’s not
the compiler that does all this. If you remember from the last installment of this series,
when you call the compiler like &lt;code&gt;gcc some_file.c&lt;/code&gt; or &lt;code&gt;clang some_file.c&lt;/code&gt;, in essence you are
calling the compilation driver, with the file as a parameter. The compilation driver then calls
1) the preprocessor, 2) the (actual) compiler, 3) the assembler and last but not least the linker.
At least when it comes to gcc, these pieces of software are called &lt;code&gt;cpp&lt;/code&gt;, &lt;code&gt;cc1&lt;/code&gt;, 
&lt;code&gt;gas&lt;/code&gt; (executable name is &lt;code&gt;as&lt;/code&gt;)  and &lt;code&gt;collect2&lt;/code&gt; (executable name is &lt;code&gt;ld&lt;/code&gt;) respectively.&lt;/p&gt;

&lt;p&gt;From that little software collection up top, that we call the compiler, we can easily take notice
of at least 3 (yeah, that’s right) translators, that act as we mentioned earlier, 
that is take some input in a source language, and produce some output to a target language.&lt;/p&gt;

&lt;p&gt;The first is the preprocessor. The preprocessor accepts source code in C as a source language,
and produces source code again in C (as a target language), but with the output having various
elements of the source code resolved, such as header file inclusion, macro expansion, etc.&lt;/p&gt;

&lt;p&gt;The second is the compiler. The compiler accepts (in our case) C source code, as a source language,
and translates it to some architecture’s assembly language. In my case, when I talk about the 
compiler, I’m gonna assume that it produces x86 assembly.&lt;/p&gt;

&lt;p&gt;The last one, is the assembler, which accepts as input some machine’s architecture assembly
language, and produces what’s called binary, or object representation of it, that is it translates
the assembly mnemonics directly to the bytes they correspond to, in the target architecture.&lt;/p&gt;

&lt;p&gt;At this point, one could also argue that the linker is also a translator, accepting binary, and 
translating it to an executable file, that is, resolving references, and fitting the binary code
on the segments of the file that is to be produced. For example, on a typical GNU/Linux system,
this phase produces the executable ELF file.&lt;/p&gt;

&lt;h1 id=&quot;the-actual-compilers-output-x86-assembly&quot;&gt;The (actual) compiler’s output: x86 assembly.&lt;/h1&gt;

&lt;p&gt;Before we go any further, I would like to show you what the compiler really creates:&lt;/p&gt;

&lt;p&gt;For the typical hello world program we demonstrated in our first installment, the compiler
will output the following assembly code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;gas&quot;&gt;&lt;span class=&quot;na&quot;&gt;.file&lt;/span&gt;	&lt;span class=&quot;s&quot;&gt;&amp;quot;hello.c&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;.section&lt;/span&gt;	&lt;span class=&quot;no&quot;&gt;.rodata&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;.LC0:&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;.string&lt;/span&gt;	&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;.text&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;.globl&lt;/span&gt;	&lt;span class=&quot;no&quot;&gt;main&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;.type&lt;/span&gt;	&lt;span class=&quot;no&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;@function&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;main:&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;pushq&lt;/span&gt;	&lt;span class=&quot;nv&quot;&gt;%rbp&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;	&lt;span class=&quot;nv&quot;&gt;%rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%rbp&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;subq&lt;/span&gt;	&lt;span class=&quot;no&quot;&gt;$16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%rsp&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;movl&lt;/span&gt;	&lt;span class=&quot;nv&quot;&gt;%edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;	&lt;span class=&quot;nv&quot;&gt;%rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;movl&lt;/span&gt;	&lt;span class=&quot;no&quot;&gt;$.LC0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%edi&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;	&lt;span class=&quot;no&quot;&gt;puts&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;movl&lt;/span&gt;	&lt;span class=&quot;no&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%eax&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;leave&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;.size&lt;/span&gt;	&lt;span class=&quot;no&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;.-main&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;.ident&lt;/span&gt;	&lt;span class=&quot;s&quot;&gt;&amp;quot;GCC: (GNU) 4.8.2 20131212 (Red Hat 4.8.2-7)&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;.section&lt;/span&gt;	&lt;span class=&quot;no&quot;&gt;.note.GNU-stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;@progbits&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To produce the above file, we had to use the following gcc invocation command:
&lt;code&gt;gcc -S -fno-asynchronous-unwind-tables -o hello.S hello.c&lt;/code&gt;. 
We used &lt;code&gt;-fno-asynchronous-unwind-tables&lt;/code&gt; to remove &lt;code&gt;.cfi&lt;/code&gt; directives, which tell &lt;code&gt;gas&lt;/code&gt; 
(the gnu assembler) to emit Dwarf Call Frame Information tags, which are used to reconstruct
a stack backtrace when a frame pointer is missing.&lt;/p&gt;

&lt;p&gt;For more usefull compilation flags, to control the intermediary compilation flow, try these:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-E&lt;/code&gt;: stop after preprocessing, and produce a *.i file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-S&lt;/code&gt;: we used this, stop after the compiler, and produce a *.s file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: stop after the assembler, and produce a *.o file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default behaviour is to use none, and stop after the linker has run. If you want to run a 
full compilation and keep all the intermediate files, use the &lt;code&gt;-save-temps&lt;/code&gt; flag.&lt;/p&gt;

&lt;h1 id=&quot;from-source-to-binary-the-assembler&quot;&gt;From source to binary: the assembler.&lt;/h1&gt;

&lt;p&gt;The next part of the compilation process, is the assembler. We have already discussed what
the assembler does, so here we are going to see it in practice. If you have followed so far,
you should have two files, a &lt;code&gt;hello.c&lt;/code&gt;, which is the hello world’s C source code file,
and a &lt;code&gt;hello.S&lt;/code&gt; which is what we created earlier, the compiler’s (x86) assembly output.&lt;/p&gt;

&lt;p&gt;The assembler operates on that last file as you can imagine, and to see it running, and emit
binary, we need to invoke it like this: &lt;code&gt;as -o hello.bin hello.S&lt;/code&gt;, and produces this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ELF\00\00\00\00\00\00\00\00\00\00&amp;gt;\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F0\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00@\00\00\00UH\89\E5H\83\EC\89}\FCH\89u\F0\BF\00\00\00\00\E8\00\00\00\00\B8\00\00\00\00\C9\C3Hello world!\00\00GCC: (GNU) 4.8.2 20131212 (Red Hat 4.8.2-7)\00\00.symtab\00.strtab\00.shstrtab\00.rela.text\00.data\00.bss\00.rodata\00.comment\00.note.GNU-stack\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\B8\00\00\00\00\00\000\00\00\00\00\00\00\00	\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00&amp;amp;\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\001\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\00\00\00\00\00\00\00
\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\009\00\00\00\00\00\000\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00m\00\00\00\00\00\00\00-\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00B\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\9A\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\9A\00\00\00\00\00\00\00R\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\B0\00\00\00\00\00\00\F0\00\00\00\00\00\00\00
\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00	\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\A0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F1\FF\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00	\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00hello.c\00main\00puts\00\00\00\00\00\00\00\00\00\00\00\00\00
\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00	\00\00\00\FC\FF\FF\FF\FF\FF\FF\FF
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;last-but-not-least-the-linker&quot;&gt;Last but not least: the linker&lt;/h1&gt;

&lt;p&gt;We saw what the assembler emits, which is to say, binary code. However, that binary code
still needs further processing. To explain that, we need to go back a little.&lt;/p&gt;

&lt;p&gt;In our first installment of the series, we said that when you call a function like &lt;code&gt;printf()&lt;/code&gt;,
the compiler only needs its prototype to do type checking and ensure that you use it legally.
For that you include the header file &lt;code&gt;stdio.h&lt;/code&gt;. But since that contains the function prototype only,
where is the source code for that function? Surely, it must be somewhere, since it executes 
successfully to begin with, but we haven’t met the source code for printf so far, so where is it?&lt;/p&gt;

&lt;p&gt;The function’s source code is located in the &lt;code&gt;.so&lt;/code&gt; (shared object) of the standard C library,
which in my system (Fedora 19, x64) is &lt;code&gt;libc-2.17.so&lt;/code&gt;. I don’t want to expand on that further,
as I plan to do so on the next series installment, however, what we have said so far is enough
for you to understand the linker’s usage:&lt;/p&gt;

&lt;p&gt;The linker resolves the undefined (thus far) reference to printf, by finding the reference to
the printf symbol and (in layman’s talk) 
making a pointer to point to it so that execution can jump to printf’s code
when we have to do that during our program’s execution.&lt;/p&gt;

&lt;p&gt;To invoke the linker on our file, &lt;a href=&quot;https://sourceware.org/binutils/docs-2.20/ld/Options.html#Options&quot;&gt;at least according to it’s documentation&lt;/a&gt;, 
we should do the following: &lt;code&gt;ld -o hello.out /lib/crt0.o hello.bin -lc&lt;/code&gt;. Then we should
be able to run the file like this: &lt;code&gt;./hello.out&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;That’s this end of this part 2 of my series that explains how your code turns into binary, and how
your computer (at least when it comes to the software side) runs it. In part 3, I am going to discuss
in greater length, the C library, and the kernel.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3564752/what-is-cfi-and-lfe-in-assembly-code-produced-by-gcc-from-c-program&quot;&gt;StackOverflow: What is .cfi and .LFE in assembly code produced by GCC from c++ program?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.lxgcc.net/?p=181&quot;&gt;GCC front-end (1): driver vs. compiler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.osdev.org/GAS&quot;&gt;GAS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceware.org/binutils/docs-2.20/ld/&quot;&gt; ld: Binutils documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;/how-the-compiler/&quot;&gt;How the compiler, the Library and the Kernel work - Part 2 &lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on April 25, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[My Linux from Scratch Experience]]></title>
 <link rel="alternate" type="text/html" href="/my-linux-from-scratch-experience/" />
  <id>/my-linux-from-scratch-experience</id>
  <published>2014-02-23T20:59:00+02:00</published>
  <updated>2014-02-23T20:59:00+02:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;The past two to three days, I have been busy with creating my very own Linux distribution
using the well known &lt;a href=&quot;http://www.linuxfromscratch.org&quot;&gt;Linux from Scratch&lt;/a&gt;. This post is 
an accounting of my experience with the process, what I liked, what I did learn from that,
what was surprising to me and more.&lt;/p&gt;

&lt;h1 id=&quot;linux-from-scratch-an-introduction&quot;&gt;Linux from Scratch: An introduction&lt;/h1&gt;

&lt;p&gt;If you are here, then you most likely already know what &lt;a href=&quot;http://www.linuxfromscratch.com/&quot;&gt;linux from scratch&lt;/a&gt;
is, but for the sake of completeness (or in the case that you don’t know what it is, but are
so keen on learning)  I will provide an introduction about it here.&lt;/p&gt;

&lt;p&gt;Linux from scratch is a book (from now on, &lt;em&gt;lfs&lt;/em&gt;), providing a series of steps that guide you to the creation of
a fully function GNU/Linux distribution. Although the original book creates a “barebones”
distribution, with only fundamental tools in it, the distribution created provides a fine
enviroment for further experimentation or customization. &lt;/p&gt;

&lt;p&gt;Apart from the basic book, the lfs project also has 3-4 books to read if you want to extend
the basic system (such as blfs, Beyond Linux from Scratch) or if you want to automate the process,
create a distribution that is more secure, or how to cross-compile an lfs system for different machines.&lt;/p&gt;

&lt;h1 id=&quot;my-experience-with-building-lfs&quot;&gt;My experience with building LFS&lt;/h1&gt;

&lt;h2 id=&quot;a-small-introduction-about-my-background&quot;&gt;A small introduction about my background&lt;/h2&gt;

&lt;p&gt;I have been a UNIX (-like) systems (full-time) user for about 2.5 years now. During that time
I had seen myself from being what you would call a Linux newbie, not knowing how to use
a system without a GUI installed (have I mentioned that Ubuntu was my favourite distribution) to being an arguably experienced UNIX programmer, trying to learn more about the
various aspects of UNIX systems, and delving deeper and deeper into them every day
(while also feeling pain if using something other than a UNIX like system).&lt;/p&gt;

&lt;p&gt;During that time, I have learned about the Unix way of working with the system, using the shell and the system’s toolchain to write software and other wise manipulate the system. I
ditched my old knowledge about IDEs and GUIs, and set out to master the command line and the associated tools (Anecdote: I remember, when I first came from to Unix from Windows, to searching the net for a C/C++ IDE to do development.) I remember reading about
how people worked another way in Unix land, using an editor, and the shell to work, and I 
decided to force myself to learn to work that way. I still remember trying to use vim and gcc, 
and ending up liking this way better because it seemed a more natural way to interact with
the software development process, than using a ide and pressing the equivalent of a “play”
button, so that magic ensues for the next few seconds until I have a result. &lt;/p&gt;

&lt;p&gt;Time has passed since then, and going through hours and hours of reading and working with
the system, I did learn quite a lot about it. My Google Summer of Code experience in 2013
expanded my system knowledge even further (that’s what you get when you have to work
with the system kernel, the C library and a compiler). &lt;/p&gt;

&lt;p&gt;But in all that time, of using Unix like systems, I never had the chance to create one myself.
And although my background did allow me to know quite a few things of the inner workings
of a system like that, I never actually saw all these software systems combining in front
of my very eyes to create that beauty we know as a GNU/Linux distribution. And that left
me a bad taste, because I knew what was happening, but I wanted to see it happen right 
in front of my eyes. &lt;/p&gt;

&lt;p&gt;Knowing about the existence of lfs, and not actually going through it also made matters worse
for me, as I knew that I could actually “patch” that knowledge gap of mine, but I never really
tried to do that. I felt that I was missing on a lot, and that lfs would be instrumental to my
understanding of a Linux system. Having gone through that some years ago, and getting
stuck at the very beginning had also created an innate fear in me, that it was something
that would be above my own powers.&lt;/p&gt;

&lt;p&gt;Until two days ago, when I said to myself: “You know what? I have seen and done a lot 
of things in a UNIX system. I am now much more experienced than I was when I last did it.
And I know I want to at least try it, even if it will only give me nothing but infinite confusion 
Because if I do manage to get it, I will learn so many more things, or at least get assured
that my preexisting knowledge was correct” And that thought was the greatest motive I had
to do that in a fairly long time.&lt;/p&gt;

&lt;p&gt;So, I sat at my desk, grabbed a cup of coffee and off I went!&lt;/p&gt;

&lt;h2 id=&quot;the-process&quot;&gt;The process&lt;/h2&gt;

&lt;h3 id=&quot;preparation-and-the-temporary-toolchain&quot;&gt;Preparation and the temporary toolchain&lt;/h3&gt;

&lt;p&gt;The book is itself several chapters long, each of which perform another “big step” in the
creation of the distribution. &lt;/p&gt;

&lt;p&gt;The first few chapters are preparatory chapters, where you ensure the integrity of the 
building environment, and download any building dependencies you may be lacking,
create a new partition that will host the lfs system, and create the user account that
will do the building of the temporary toolchain.&lt;/p&gt;

&lt;p&gt;The temporary toolchain building is a more exciting process. In essence
you compile and collect several pieces of software that will later be used
to compile the distribution’s toolchain and other software.&lt;/p&gt;

&lt;p&gt;You start of with building binutils, and that is to get a working assembler and linker. 
After having a working assembler and linker, you proceed with compiling &lt;code&gt;gcc&lt;/code&gt;.
Next on is unpacking the linux headers, so that you can compile (and link against them)
the glibc. &lt;/p&gt;

&lt;p&gt;Having the basic parts of the toolchain compiled, you then proceed with installing other
software that is needed in the temporary toolchain, like &lt;code&gt;gawk&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;perl&lt;/code&gt;
etc.&lt;/p&gt;

&lt;h3 id=&quot;building-the-main-system&quot;&gt;Building the main system&lt;/h3&gt;

&lt;p&gt;After getting done with the temporary toolchain, you then &lt;code&gt;chroot&lt;/code&gt; into the lfs partition.
You start of with creating the needed directories (like &lt;code&gt;/bin&lt;/code&gt;, &lt;code&gt;/boot&lt;/code&gt;, &lt;code&gt;/etc&lt;/code&gt;, &lt;code&gt;/home&lt;/code&gt; etc)
and then continue with building the distribution software, utilising the temporary toolchain.
For instance, you construct a new &lt;code&gt;gcc&lt;/code&gt;, you compile &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;bzip&lt;/code&gt;, the &lt;code&gt;shadow&lt;/code&gt;
utility that manages the handling of passwords etc, all while making sure that things don’t
break, and running countless tests (that sometimes take longer than what the package
took to compile) to ensure that what you build is functional and reliable.&lt;/p&gt;

&lt;h3 id=&quot;final-configuration&quot;&gt;Final configuration&lt;/h3&gt;

&lt;p&gt;Next one on the list, is the various configuration files that reside in &lt;code&gt;/etc&lt;/code&gt;, and the setup
of &lt;code&gt;sysvinit&lt;/code&gt;, the distribution’s &lt;code&gt;init&lt;/code&gt; system.&lt;/p&gt;

&lt;p&gt;Last, but not least, you are compiling the linux kernel and setting up grub so that the
system is bootable.&lt;/p&gt;

&lt;p&gt;At this point, if all has gone well, and you reset, you should boot into your new lfs system.&lt;/p&gt;

&lt;h1 id=&quot;what-did-i-gain-from-that&quot;&gt;What did I gain from that?&lt;/h1&gt;

&lt;p&gt;Building lfs was a very time consuming process for me. It must have taken about 7-8
hours at the very least. Not so much because of the compilation and testing (I was compiling
with &lt;code&gt;MAKEFLAGS=&#39;-j 4&#39;&lt;/code&gt; on a Core i5), but because I was didn’t complete some steps
correctly, and later needed to go back and redo them, along with everything that followed,
along with the time it took to research some issues, programs or various other things
before I did issue a command at the shell.&lt;/p&gt;

&lt;p&gt;Now if I were to answer the question “What did I gain from that”, my answer would be
along the lines of “Infinite confusion, and some great insight at some points”.&lt;/p&gt;

&lt;p&gt;To elaborate on that,  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lfs mostly served as a reassurance that indeed, what I did know
about the system was mostly correct. &lt;/li&gt;
  &lt;li&gt;I did have the chance to see the distribution
get built right before my eyes, which was something I longed for a great amount of time.&lt;/li&gt;
  &lt;li&gt;It did make me somewhat more familiar with the &lt;code&gt;configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/code&gt;
cycle&lt;/li&gt;
  &lt;li&gt;It made me realise that the directories in the system are the simple result of a &lt;code&gt;mkdir&lt;/code&gt; command, and that configuration files in the &lt;code&gt;/etc/folder&lt;/code&gt; are handwritten plain files. (&lt;em&gt;yeah, I feel stupid about that one - I don’t know what I was expecting.&lt;/em&gt; This was probably the result of the “magic involved” that the distro making process entailed for me)&lt;/li&gt;
  &lt;li&gt;I got to see the specific software that is needed to create a distribution, and demonstrate to me how I can build it, customize that build, or even change that software to my liking &lt;/li&gt;
  &lt;li&gt;And last but not least, something that nearly every lfs user says after a successful try:
I knew that package managers did a great many things in order to maintain the system, and that much
of the work I would normally have to do was done nearly automatically 
but boy, was I underestimating them. After lfs, I developed a new appreciation for a
good package manager.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Lfs was, for the most part, a great experience.&lt;/em&gt; &lt;strong&gt;As a knowledge expander, it works great.&lt;/strong&gt;
&lt;strong&gt;As a system that you keep and continue to maintain? I don’t know.&lt;/strong&gt; I know that people have
done that in the past, but I decided against maintaining my build, as I figured it would be
very time consuming, and that if I ever wanted to gain the experience of maintaining a distro,
I would probably fork something like &lt;a href=&quot;http://www.crux.nu&quot;&gt;Crux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end if you ask me if I can recommend that to you, I will say that I’m not so sure.
&lt;strong&gt;It will provide you with some insight into the internals of a GNU/Linux distribution, but it 
won’t make you a better programmer as some people claim&lt;/strong&gt; (most of the process revolves
around the &lt;code&gt;configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/code&gt; cycle, and some conf files handwriting).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the end, it is yourself who you should ask. Do you want that knowledge? Is it worth the hassle for you?
Do you want the bragging rights? Are you crazy enough to want to maintain it?&lt;/strong&gt; 
&lt;em&gt;These are all questions that you get as many answers to them as the people you ask.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/my-linux-from-scratch-experience/&quot;&gt;My Linux from Scratch Experience&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on February 23, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[How the compiler, the Library and the kernel work - Part 1]]></title>
 <link rel="alternate" type="text/html" href="/how-the-compiler/" />
  <id>/how-the-compiler</id>
  <published>2013-12-12T16:13:00+02:00</published>
  <updated>2013-12-12T16:13:00+02:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Before we get any further, it might be good if we provided some context.&lt;/p&gt;

&lt;h1 id=&quot;hello-world-again&quot;&gt;Hello world. Again.&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every user space (read: application) programmer, has written a hello world program. 
Only god knows how many times this program has been written. Yet, 
most programmers’ knowledge of the program is limited to something along the lines of:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;It sends the string passed as a parameter to the system to print.  &lt;/li&gt;
    &lt;li&gt;It takes the printf function from stdio.h and prints the string&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;and various other things, which are anywhere between plain wrong, or partially correct. &lt;/p&gt;

&lt;p&gt;** So why not demistify the process? **&lt;/p&gt;

&lt;h1 id=&quot;enter-the-c-preprocessor&quot;&gt;Enter the C preprocessor.&lt;/h1&gt;

&lt;p&gt;You may have heard of the C Preprocessor. It’s the first stage of a c or c++ file compilation,
and it’s actually responsible for things such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;inclusion of header files&lt;/strong&gt; (it does so by replacing
&lt;code&gt;#include &amp;lt;header.h&amp;gt;&lt;/code&gt; with the content of this file, and the file it includes recursively),&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;macro expansion&lt;/strong&gt;, such as the famous comparison of two numbers (a greater than b). In essence, if you define
 the following macro &lt;code&gt;#define gt(a, b) ((a &amp;gt; b) ? 1 : 0)&lt;/code&gt;, then in a statement such as this:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre lang=&quot;c&quot;&gt;&lt;code&gt; if (gt (5, 3)) printf (&quot;The first parameter is greater than the second.\n&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gt (5, 3)&lt;/code&gt; gets expanded to the macro definition, so after the preprocessor has run you end up with something like this:&lt;/p&gt;

&lt;pre lang=&quot;c&quot;&gt;&lt;code&gt; if (((5 &amp;gt; 3) ? 1 : 0)) printf (&quot;The first parameter is greater than the second.\n&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;conditional compilation&lt;/strong&gt; (things such as: &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifdef WIN32 &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;We are on windows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;amongst others. You can see it for yourself. Write the hello world program, and pass it to cpp: &lt;code&gt;cpp hello_world.c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So now that we know what it does it’s time to demistify a common myth regarding it: &lt;em&gt;Some people believe
that the header files include the function to be called.&lt;/em&gt;. &lt;strong&gt;That’s wrong.&lt;/strong&gt; What it does include is 
&lt;strong&gt;function prototypes&lt;/strong&gt; (and some type definitions, etc) &lt;strong&gt;only&lt;/strong&gt;. It doesn’t include the body of the function
to be called.&lt;/p&gt;

&lt;p&gt;Some people find that fact quite surprising, though, it isn’t, if you get to understand what the compiler
does with it.&lt;/p&gt;

&lt;h1 id=&quot;say-hello-to-the-compiler&quot;&gt;Say hello to the compiler.&lt;/h1&gt;

&lt;p&gt;Here we are gonna unmask another pile of misconceptions. First of all, some people think that when they call 
&lt;code&gt;gcc&lt;/code&gt; on the command line they are actually calling the compiler. &lt;strong&gt;They are not.&lt;/strong&gt; &lt;em&gt;In fact they are calling
the software commonly called &lt;strong&gt;the compilation driver&lt;/strong&gt;, whose job is to run all the software needed to fully
turn source to binary, including preprocessors, the actual compiler, an assembler and finally the linker&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Having said that, the actual compiler that’s getting called when you call &lt;code&gt;gcc&lt;/code&gt; is called &lt;code&gt;cc1&lt;/code&gt;. You may have seen it some times when the driver reports errors. Wanna take a look at it, to make sure I’m not lying to you? 
(Hint: I’m not!) Fair enough. Why don’t you type this in the command line: &lt;code&gt;gcc -print-prog-name=cc1&lt;/code&gt;. It should tell you where the actual compiler is located in your system.&lt;/p&gt;

&lt;p&gt;So now that we have this (misconception) out of our minds, we can continue with our analysis. Last time we talked
about it, we said that the header files include &lt;strong&gt;prototypes&lt;/strong&gt; and not the whole function.&lt;/p&gt;

&lt;p&gt;You may know that in C, you usually declare a function, before you use it. The primary reason for doing this
is to provide the compiler with the ability to perform &lt;strong&gt;type checking&lt;/strong&gt;, that is to check that the arguments
passed are correct, both in number, and in type, and to verify that the returned value (assuming there is one)
is being used correctly. Below is a program that demonstrates the function prototype:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_nums&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;5 + 5 results in %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_nums&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add_nums&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this particular example, the prototype gives the compiler a wide variety of information. It tells it
that function &lt;code&gt;add_nums&lt;/code&gt; takes two int arguments and returns an integer to the calling function. Now the
compiler can verify that I am passing correct arguments to it when I call it inside printf. If I don’t include
the function prototype, and do something slightly evil such as calling &lt;code&gt;add_nums&lt;/code&gt; with &lt;code&gt;float&lt;/code&gt; arguments then 
this might happen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5 + 4 results in 2054324224
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you know that the compiler (the real one) only needs the prototype and not the actual function code,
you may be wondering how the compiler actually compiles it if it doesn’t know it’s code.&lt;/p&gt;

&lt;p&gt;Now is the time to bring down another missconception. The word &lt;em&gt;compiler&lt;/em&gt; is just a fancy name for software
otherwise known as &lt;em&gt;translators&lt;/em&gt;. A &lt;em&gt;translator’s&lt;/em&gt; job is to get input and turn it from one language (source language) to a second language (target language), whatever that may be. Most of the times, when you compile software,
you compile it to run in your computer, which runs on a processor from the x86 architecture family of processors.
A processor is typically associated with an assembly language for that architecture (which is just human friendly
mnemonics for common processor tasks), so your &lt;em&gt;x86 computer runs x86 assembly&lt;/em&gt; (ok that’s not 100% true, but for
simplicity’s sake at the moment, it should serve. We will see why it’s not true later.) So the compiler 
(in a typical translation) translates (compiles) your C source code to x86 assembly. 
You can see this by compiling your hello world example and passing the compiler the &lt;code&gt;-S&lt;/code&gt; (which asks it to stop,
after x86 assembly is produced) parameter, likewise &lt;code&gt;gcc -S hello.c&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;At this part, we saw how the compiler and the preprocessor work with our code, in an attempt to demistify the 
so called library calls. In the next part, we are going to study the assembler and the linker, and for the final
part the loader and the kernel.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/how-the-compiler/&quot;&gt;How the compiler, the Library and the kernel work - Part 1&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on December 12, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GSOC Week 11 report]]></title>
 <link rel="alternate" type="text/html" href="/gsoc-week-11-report/" />
  <id>/gsoc-week-11-report</id>
  <published>2013-09-02T09:25:00+03:00</published>
  <updated>2013-09-02T09:25:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This week was spent investigating the runtime and debugging executables with gdb.
It was interesting in the sense that it provided me with some interesting
pieces of information. Without any further ado, let’s present our findings:&lt;/p&gt;

&lt;h2 id=&quot;my-findings&quot;&gt;My findings&lt;/h2&gt;

&lt;p&gt;Before starting out playing with libpthread, and glibc, I wanted to make sure
that the goruntime behaved the way I believed it behaved, and make some further
assurances about the goruntime. These assurances had to do with the total number
of goroutines and the total number of machine threads at various checkpoints
in the language runtime.  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first thread in the program is initialised during &lt;code&gt;runtime_schedinit&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The number of m’s (kernel threads) is dependent on the number of goroutines.
The runtime basically attempts to create an equal amount of m’s to run the goroutines.
We can observe everytime a new goroutine is created, there is a number of calls
to initiate a new kernel thread.&lt;/li&gt;
  &lt;li&gt;There are at least two kernel threads. One that supports the runtime (mainly the 
garbage collector) and one that executes the code of the go program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is only one small piece of code in the goruntime that creates some sort of
confusion for me, and that is the code for a new m initialisation. Let me first
present the code that confuses me:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runtime_newm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_mal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mcommoninit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_malg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pthread_attr_init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_setdetachstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTHREAD_CREATE_DETACHED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pthread_attr_setdetachstate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I purposely compacted the function for brevity, as it only serves as a demonstration for a point.
Now, my confusion lies in the line &lt;code&gt;mp-&amp;gt;g0 = runtime_malg(-1, nil, nil)&lt;/code&gt;. It is a piece of code
that allocates memory for a new goroutine. Now I am ok with that, &lt;strong&gt;but&lt;/strong&gt; what I do not understand
is that new kernel threads (m’s) are supposed to be pick and run a goroutine from the global 
goroutine pool - that is run an existing one, and not create a new one. Now, the &lt;code&gt;runtime_malg&lt;/code&gt;
is given parameters that don’t initialise a new goroutine properly, but still, new memory
is allocated for a new goroutine, and is returned to &lt;code&gt;mp-&amp;gt;g0&lt;/code&gt; from runtime_malg.&lt;/p&gt;

&lt;p&gt;Assuming I have not misunderstood something, and I am not mistaken (which is kind of likely), 
this is behavior that could lead to a number of questions and/or problems. For instance,
what happens to the goroutine created by &lt;code&gt;runtime_malg&lt;/code&gt;? Is it killed after the m is assigned
a new goroutine to execute? Is it parked on the goroutine global list? Is it just ignored?
Does it affect the runtime scheduler’s goroutine count? This is the last thing I feel I wanna
clear out regarding gccgo’s runtime.&lt;/p&gt;

&lt;h2 id=&quot;gdb&quot;&gt;gdb&lt;/h2&gt;

&lt;p&gt;For this week, I also run the executables created by gccgo through gdb. It was a fertile attempt
that, most of the time, confirmed my findings in the goruntime. It also provided us with some
other nice pieces of information regarding the crashing of goroutines, but also left me with a 
question.&lt;/p&gt;

&lt;p&gt;The code in question that I run through gdb is this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[!!] right before a go statement&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Your very typical hello world like goroutine program. Now, setting a break point in main 
(not the program’s main, that’s &lt;code&gt;main.main&lt;/code&gt;. &lt;code&gt;main&lt;/code&gt; as far as the runtime is concerned is
 the runtime entry point, in &lt;code&gt;go-main.c&lt;/code&gt;) and running it through gdb yields the following
results:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;Breakpoint 1, main &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; at ../../../gcc_source/libgo/runtime/go-main.c:52
52 runtime_check &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
2:  &lt;span class=&quot;nv&quot;&gt;__pthread_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; next
53 runtime_args &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argc, &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;byte **&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; argv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
2: &lt;span class=&quot;nv&quot;&gt;__pthread_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
54 runtime_osinit &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
2: &lt;span class=&quot;nv&quot;&gt;__pthread_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
63: runtime_schedinit &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
2: &lt;span class=&quot;nv&quot;&gt;__pthread_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Up until now, nothing unexpected. The kernel thread is registered with the runtime scheduler
during its initialisation process in &lt;code&gt;runtime_schedinit&lt;/code&gt; and that’ why the &lt;code&gt;runtime_sched.mcount&lt;/code&gt;
is reported to be zero many times before schedinit is run.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;68 __go_go &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mainstart, NULL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
2: &lt;span class=&quot;nv&quot;&gt;__pthread_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; display runtime_sched.gcount
3: runtime_sched.gcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That too is ok, because a new goroutine is registered with the scheduler during the call to
&lt;code&gt;__go_go&lt;/code&gt;. Now I am gonna fast forward a bit, to a more interesting point.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in runtime_gogo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; new goroutine&lt;span class=&quot;s1&quot;&gt;&amp;#39;s status is 2&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_gogo) number of goroutines now is 2&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[New Thread 629.30]&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Program received SIGTRAP, Trace/breakpoint trap.&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;3: runtime_sched.gcount = 2&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;2: __pthread_total = 2&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;1: runtime_sched.mcount = 2&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;(gdb) info threads&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt; Id   Target  Id       Frame&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt; 6    Thread  629.30   0x08048eb7 in main.main () at goroutine.go:12&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt; 5    Thread  629.29   0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;*4    Thread  629.28   0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;```&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;This is getting weird. I mean, libpthread is reporting that 2 threads are active,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;but gdb reports that 3 are active. Anyway, let&amp;#39;&lt;/span&gt;s &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;:

&lt;span class=&quot;sb&quot;&gt;```&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in runtime_stoptheworld&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; stopped the garbage collector
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in runtime_starttheworld&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; starting the garbage collector
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in runtime_starttheworld&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; number of m&lt;span class=&quot;s1&quot;&gt;&amp;#39;s now is: 2&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_starttheworld) [note] there is already one gc thread&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[!!] right before a go statement&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Program received signal SIGTRAP, Trace/breakpoint trap.&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;3: runtime_sched.gcount = 2&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;2: __pthread_total = 2&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;1: runtime_sched.mcount = 2&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;(gdb) continue&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;... (output omitted by me for brevity)&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_newm) Right before the call to pthread_create.&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&amp;#39;&lt;/span&gt; failed.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;New Thread 629.31&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

Program received signal SIGABRT, Aborted.
0x01da48ec in ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
3: runtime_sched.gcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
2: &lt;span class=&quot;nv&quot;&gt;__pthread_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Oh my goodness. From a first glance, this seems to be a very serious inconsistency between libpthread and the goruntime.
At this point, the go scheduler reports 3 threads (3 registered threads, that means 
that flow of execution has passed &lt;code&gt;mcommoninit&lt;/code&gt;, the kernel thread initialisation function
which also registers the kernel thread with the runtime_scheduler) whereas libpthread reports 2 threads.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But WAIT! Where are you going? Things are about to get even more interesting!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; info threads
 Id   Target  Id       Frame
 7    Thread  629.31   0x01f4da00 in entry_point &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libpthread.so.0.3
 6    Thread  629.30   0x01da48ec in ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
 5    Thread  629.29   0x01da48ec in ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
*4    Thread  629.28   0x01da48ec in ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;GDB reports 4 threads. Yes, 4 threads ladies and gentlemen. Now take a look closely.
3 threads are in the same frame, with the one with id 4 being the one currently executed.
And there is also a pattern. &lt;code&gt;0x01da48ec&lt;/code&gt; is the value of the &lt;code&gt;eip&lt;/code&gt; register for all 3 of them.&lt;/p&gt;

&lt;p&gt;That’s one thing that is for certain. Now I already have an idea. Why not change
the current thread to the one with id 7? I’m sold to the idea, let’s do this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; thread 7
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Switching to thread 7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Thread 629.31&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#0  0x01f4da00 in entry_point () from /lib/i386-gnu/libpthread.so.0.3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
Continuing.

Program received signal SIGABRT, Aborted.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Switching to Thread 629.28&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
0x01da48ec in ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
3: runtime_sched.gcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
2: &lt;span class=&quot;nv&quot;&gt;__pthread_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; info threads
 Id   Target  Id       Frame
 7    Thread  629.31   0x01dc08b0 in ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
 6    Thread  629.30   0x01da48ec in ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
 5    Thread  629.29   0x01da48ec in ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
*4    Thread  629.28   0x01da48ec in ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Damn. But I am curious. What’s the next value to be executed?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; x/i &lt;span class=&quot;nv&quot;&gt;$eip&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; 0x1da48ec: ret&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And what is the next value to be executed for the thread with id 7?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; x/i &lt;span class=&quot;nv&quot;&gt;$eip&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; 0x1dc08b0: call *%edx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Apparently, there is still much debugging left to checkout what is really happening.
But we have got some leads in the right direction, that hopefully will lead us to 
finally finding out where the problem lies, and correct it.&lt;/p&gt;

&lt;p&gt;Most importantly, in my immediate plans, before iI start playing around with libpthread
is to attempt the same debugging run on the same code, under linux (x86). Seeing as
go is clean on linux, it would provide some clues as to what the expected results 
should be, and where the execution differentiates substantially, a clue
that might be vital to finding the problem.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/gsoc-week-11-report/&quot;&gt;GSOC Week 11 report&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on September 02, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GSOC week 10 report]]></title>
 <link rel="alternate" type="text/html" href="/gsoc-week-10-report/" />
  <id>/gsoc-week-10-report</id>
  <published>2013-08-26T09:00:00+03:00</published>
  <updated>2013-08-26T09:00:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This week was spent attempting to debug the gccgo runtime via print statements. There were many things
that I gained from this endeavour. The most significant of which, is the fact that I have got a great
deal of information regarding the bootstrapping of a go process. Let’s proceed into presenting this 
week’s findings, shall we?&lt;/p&gt;

&lt;h1 id=&quot;findings&quot;&gt;Findings&lt;/h1&gt;

&lt;h2 id=&quot;the-process-bootstrapping-sequence&quot;&gt;The process bootstrapping sequence&lt;/h2&gt;

&lt;p&gt;The code that begins a new go-process is conveniently located in a file called &lt;code&gt;go-main.c&lt;/code&gt;, the most significant
part of which is the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_check&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_osinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_schedinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;__go_go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainstart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_mstart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtime_m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mainstart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The process is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First &lt;code&gt;runtime_check&lt;/code&gt; runs and registers the os_Args and syscall_Envs as runtime_roots with the garbage collector. I am still investigating what this function exactly is doing, but it seems like some early initialisation of the garbage collector&lt;/li&gt;
  &lt;li&gt;Secondly, &lt;code&gt;runtime_args&lt;/code&gt; is run. It’s job is to call a specific argument handler for the arguments passed to &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Thirdly, &lt;code&gt;runtime_osinit&lt;/code&gt; is run, whose job is to call the lowlevel _CPU_COUNT function, to get the number of CPUs (in a specific data structure that represents a set of CPUs)&lt;/li&gt;
  &lt;li&gt;After that, &lt;code&gt;runtime_schedinit&lt;/code&gt; is run, whose job is to create the very first goroutine (g) and system thread (m), and continues with parsing the command line arguments, and the environment variables. After that it sets the maximum number of cpus that are to be used (via &lt;code&gt;GOMAXPROCS&lt;/code&gt;), runs the first goroutine, and does some last pieces of the scheduler’s initialisation.&lt;/li&gt;
  &lt;li&gt;Following &lt;code&gt;runtime_schedinit&lt;/code&gt;, &lt;code&gt;__go_go&lt;/code&gt; is run, a function whose purpose is to create a new queue, tell it to execute the function that is passed to it as the first parameter, and then queue the goroutine in the
global ready-to-run goroutine pool.&lt;/li&gt;
  &lt;li&gt;Last but not least, &lt;code&gt;runtime_mstart&lt;/code&gt; runs, which seems to be starting te execution of the kernel thread created during &lt;code&gt;runtime_schedinit&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The very last piece of code that is run (and most probably the most important) is &lt;code&gt;runtime_main&lt;/code&gt;. Remember that this is passed as a parameter to a goroutine created during the &lt;code&gt;__go_go&lt;/code&gt; call, and its job is to mark the goroutine that called it as &lt;em&gt;the main os thread&lt;/em&gt;, to initialise the sceduler, and create a goroutine whose job is to release unused memory (from the heap) back to the OS.
It then starts executing the process user defined instructions (the code the programmer run) via a call to a
macro that directs it to &lt;code&gt;__go_init_main&lt;/code&gt; in the assembly generated by the compiler.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Runtime_main&lt;/code&gt; is also the function that terminates the execution of a go process, with a call to &lt;code&gt;runtime_exit&lt;/code&gt;
which seems to be a macro to the &lt;code&gt;exit&lt;/code&gt; function.&lt;/p&gt;

&lt;h2 id=&quot;other-findings&quot;&gt;Other findings&lt;/h2&gt;

&lt;p&gt;During our debugging sessions we found out that the total count of kernel threads that are running in a simple program is at least two.
The first one is the bootstrap M, (the one initialised during the program’s initialisation, inside &lt;code&gt;runtime_schedinit&lt;/code&gt;) and at least another one, (I am still invistigating the validity of the following claim) 
created to be used by the garbage collector. &lt;/p&gt;

&lt;p&gt;A simple go program such as one doing arithmetic or printing a helloworld like message evidently has no issue
running.
The issues arrise when we use a &lt;code&gt;go statement&lt;/code&gt;. With all our debugging messages activated, this is how a simple
go program flows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;root@debian:~/Software/Experiments/go# ./a.out
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_mcheck is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_args is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_osinit is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_schedinit is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_mstart is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in runtime_mstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; right before the call to runtime_minit
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in mainstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; right before the call to runtime_main
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in runtime_main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Beginning of runtime_main
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;start of runtime_newm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Total number of m&lt;span class=&quot;s1&quot;&gt;&amp;#39;s is 1&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_newm) Preparing to create a new thread&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_newm) Right before the call to pthread_create&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_newm) pthread_create returned 0&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_mstart) right before the call to runtime_minit&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (end of runtime_newm) Total number of m&amp;#39;&lt;/span&gt;s is 2
Hello, fotis
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in runtime_main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Right before runtime_exit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this is how a goroutine powered program fails:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;root@debian:~/Software/Experiments/go# ./a.out
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_mcheck is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_args is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_osinit is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_schedinit is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_mstart is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in runtime_mstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; right before the call to runtime_minit
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in mainstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; right before the call to runtime_main
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in runtime_main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Beginning of runtime_main
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;start of runtime_newm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Total number of m&lt;span class=&quot;s1&quot;&gt;&amp;#39;s is 1&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_newm) Preparing to create a new thread&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_newm) Right before the call to pthread_create&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_newm) pthread_create returned 0&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_mstart) right before the call to runtime_minit&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (end of runtime_newm) Total number of m&amp;#39;&lt;/span&gt;s is 2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;start of runtime_new&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Total number of m&lt;span class=&quot;s1&quot;&gt;&amp;#39;s is 2&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_newm) Preparing to create a new thread.&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[DEBUG] (in runtime_newm) Right before the call to pthread_create&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&amp;#39;&lt;/span&gt; failed.
Aborted&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;work-for-the-next-week&quot;&gt;Work for the next week&lt;/h1&gt;

&lt;p&gt;I will of course continue to print debug until I have knowledge of the exact flow of execution in the go
runtime. Right now I have very good knowledge of the flow, but there are some things that I need to sort out.
For instance it is not exactly clear to me why we call certain functions, or what they are supposed to be doing at certain parts. After I sort this out,  I also plan to start debugging the libpthread to see what’s libpthreads status
during a hello world like program, and during a goroutine powered program, to get to see if we get
to find something interesting in libpthread (like how many threads does libpthread report against how
many the goruntime reports)&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/gsoc-week-10-report/&quot;&gt;GSOC week 10 report&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on August 26, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GSOC Week 9 (Partial) report]]></title>
 <link rel="alternate" type="text/html" href="/gsoc-week-9-partial-report/" />
  <id>/gsoc-week-9-partial-report</id>
  <published>2013-08-19T11:35:00+03:00</published>
  <updated>2013-08-19T11:35:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;This week was revolving around the print debugging in the gccgo runtime in search
for clues regarding the creation of new threads under the goruntime, so as to see
if there is something wrong with the runtime itself, or the way the runtime 
interacts with the libpthread.&lt;/p&gt;

&lt;h2 id=&quot;partial-presentation-of-findings&quot;&gt;(partial presentation of) findings&lt;/h2&gt;

&lt;p&gt;During print debugging the gccgo runtime, I didn’t notice anything abnormal or 
unusual so far. For example, the code that does trigger the assertion failure
seems to work at least once, since &lt;code&gt;pthread_create()&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt; at least once.&lt;/p&gt;

&lt;p&gt;This is expected behavior, since we already have stated that there is at least
one &lt;code&gt;M&lt;/code&gt; (kernel thread) created at the initialisation of the program’s runtime.&lt;/p&gt;

&lt;p&gt;If however, we try to use a &lt;em&gt;go statement&lt;/em&gt; in our program, to make usage of a 
goroutine, the runtime still fails at the usual assertion fail, however the 
output of the program is this:&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
[DEBUG] pthread_create returned 0
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&#39; failed.
Aborted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above output can give us some pieces of information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;pthread_create()&lt;/code&gt; is called at least once.&lt;/li&gt;
  &lt;li&gt;it executes successfuly and without errors - libpthread code suggests that 0 is returned upon successful execution and creation of a thread&lt;/li&gt;
  &lt;li&gt;However the assertion is still triggered, which we know it’s getting triggered during thread creation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second bullet point is also being supported by the fact that even if you exe
cute something as simple as hello world in go, a new M is created, so you get
something along the lines of this as an output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;root@debian:~/Software/Experiments/go# ./a.out
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; pthread_create returned 0
Hello World!
root@debian:~/Software/Experiments/go#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is however something that the above piece of code doesn’t tell us, 
but it would be useful to know: &lt;em&gt;How many times did we create a new thread?&lt;/em&gt;
So we modify our gcc’s source code to see how many times the runtimes 
attempts to create a new kernel thread (M). This is what we get out of it:&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
[DEBUG] Preparing to create a new thread.
[DEBUG] pthread_create returned 0
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&#39; failed.
[DEBUG] Preparing to create a new thread.
aborted.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code at this point in the runtime is this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Create a new m.  It will start off with a call to runtime_mstart.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runtime_newm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;pthread_attr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if 0&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;	static const Type *mtype;  // The Go type M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;	if(mtype == nil) {&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;		Eface e;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;		runtime_gc_m_ptr(&amp;amp;e);&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;		mtype = ((const PtrType*)e.__type_descriptor)-&amp;gt;__element_type;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;	}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// XXX: Added by fotis for print debugging.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[DEBUG] Preparing to create a new thread.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_mal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mcommoninit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_malg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pthread_attr_init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_setdetachstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTHREAD_CREATE_DETACHED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pthread_attr_setdetachstate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// &amp;lt;http://www.gnu.org/software/hurd/open_issues/libpthread_set_stack_size.html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef __GNU__&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTHREAD_STACK_MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// With glibc before version 2.16 the static TLS size is taken&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// out of the stack size, and we get an error or a crash if&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// there is not enough stack space left.  Add it back in if we&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// can, in case the program uses a lot of TLS space.  FIXME:&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// This can be disabled in glibc 2.16 and later, if the bug is&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// indeed fixed then.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tlssize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_setstacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pthread_attr_setstacksize&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Block signals during pthread_create so that the new thread&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// starts with signals disabled.  It will enable them in minit.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigfillset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef SIGTRAP&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Blocking SIGTRAP reportedly breaks gdb on Alpha GNU/Linux.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigdelset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGTRAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;sigemptyset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigprocmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG_BLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_mstart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* XXX: added for debug printing */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[DEBUG] pthread_create() returned %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;sigprocmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG_SETMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pthread_create&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can deduce two things about our situation right now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is &lt;strong&gt;at least one&lt;/strong&gt; thread successfully created, and there is an attempt
to create another one.&lt;/li&gt;
  &lt;li&gt;The second time, there is a failure before pthread_create is called.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;continuation-of-work&quot;&gt;Continuation of work.&lt;/h2&gt;

&lt;p&gt;I have been following this course of path the last week. I presented
some of my findings, and hope to soon be able to write an exhaustive
report on what exactly it is that causes the bug.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/gsoc-week-9-partial-report/&quot;&gt;GSOC Week 9 (Partial) report&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on August 19, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GSOC Week 8 (Partial) report]]></title>
 <link rel="alternate" type="text/html" href="/gsoc-week-8-partial-report/" />
  <id>/gsoc-week-8-partial-report</id>
  <published>2013-08-12T10:27:00+03:00</published>
  <updated>2013-08-12T10:27:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;This week was spent studying the go language’s runtime and studying the behaviour of various go programs when executed under the Hurd. I learnt a variety of new things, and got some 
new clues about the problem.&lt;/p&gt;

&lt;h2 id=&quot;the-new-libgo-clues&quot;&gt;The new libgo clues&lt;/h2&gt;

&lt;p&gt;I already know that &lt;em&gt;M’s are the “real” kernel schedulable threads&lt;/em&gt; and &lt;em&gt;G’s are the go runtime managed ones (goroutines)&lt;/em&gt;. Last time I had gone through the go runtime’s code I had noticed that neither of them get created, so there must be an issue with thread creation. &lt;strong&gt;But since there is at least one of each created during the program’s initialization, how come
most programs are able to run, and issues present themselves when we manually attempt to run a goroutine?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will admit that the situation looks strange. So I decided to look more into it. Before we go any further, I have to embed the issues I had when I run goroutine powered programs under the Hurd.&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&#39; failed.
Aborted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;__pthread_create_internal&lt;/code&gt; is a libpthread function that gets called when a new posix thread is instanciated. So we know that when we call a goroutine, apart from the goroutine,
there is at least one kernel thread created, otherwise, if a new goroutine was created, and not a new kernel thread (M) why wasn’t it matched with an existing kernel thread
(remember there is at least one).&lt;/p&gt;

&lt;p&gt;That made me look into the go runtime some more. I found a lot of things, that I can not enumerate here, but amongst the most interesting ones, was the following piece of code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Create a new m.  It will start off with a call to runtime_mstart.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runtime_newm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;pthread_attr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if 0&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;	static const Type *mtype;  // The Go type M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;	if(mtype == nil) {&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;		Eface e;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;		runtime_gc_m_ptr(&amp;amp;e);&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;		mtype = ((const PtrType*)e.__type_descriptor)-&amp;gt;__element_type;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;	}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_mal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mcommoninit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_malg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pthread_attr_init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_setdetachstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTHREAD_CREATE_DETACHED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pthread_attr_setdetachstate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTHREAD_STACK_MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// With glibc before version 2.16 the static TLS size is taken&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// out of the stack size, and we get an error or a crash if&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// there is not enough stack space left.  Add it back in if we&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// can, in case the program uses a lot of TLS space.  FIXME:&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// This can be disabled in glibc 2.16 and later, if the bug is&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// indeed fixed then.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tlssize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_setstacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pthread_attr_setstacksize&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Block signals during pthread_create so that the new thread&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// starts with signals disabled.  It will enable them in minit.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigfillset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef SIGTRAP&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Blocking SIGTRAP reportedly breaks gdb on Alpha GNU/Linux.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigdelset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGTRAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;sigemptyset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigprocmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG_BLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_mstart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigprocmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG_SETMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pthread_create&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the code that creates a new kernel thread. Notice the line &lt;code&gt;ret = pthread_create(&amp;amp;tid, &amp;amp;attr, runtime_mstart, mp);&lt;/code&gt;. It’s obvious that it creates a new kernel thread,
so that explains why we get the specific error. But what is not explained is that since we do have at least one in program startup, why is this specific error only triggered when
we manually create a go routine?&lt;/p&gt;

&lt;h2 id=&quot;go-programs-under-the-hurd&quot;&gt;Go programs under the Hurd&lt;/h2&gt;

&lt;p&gt;Apart from studying Go’s runtime source code, I also run some experiments under the Hurd. I got some very weird results that I am investigating, but I would like to share nonetheless.
Consider the following piece of code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A very basic example that can demonstrate goroutines. Now, if we change &lt;strong&gt;one&lt;/strong&gt; of the say functions inside main to a goroutine, this happens:&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&#39; failed.
Aborted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt; if we change &lt;strong&gt;BOTH&lt;/strong&gt; of these functions to goroutines (&lt;code&gt;go say(&quot;world&quot;)&lt;/code&gt;, &lt;code&gt;go say(&quot;hello&quot;)&lt;/code&gt;), this happens:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;root@debian:~/Software/Experiments/go# ./a.out
root@debian:~/Software/Experiments/go#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wait a minute. It can’t be! Did it execute correctly? Where is the output? &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;root@debian:~/Software/Experiments/go# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
0
root@debian:~/Software/Experiments/go#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It reports that it has executed correctly. But there is no output.&lt;/p&gt;

&lt;h2 id=&quot;what-i-am-doing-next&quot;&gt;What I am doing next&lt;/h2&gt;

&lt;p&gt;I will continue reading through the go runtime for some clues. On the more active size, I am writing a custom test case for goroutine testing under the Hurd, while also doing some analysis
on the programs that run there (currently studying the assembly generated for these programs) to see how they differ and why we get this particular behavior.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/gsoc-week-8-partial-report/&quot;&gt;GSOC Week 8 (Partial) report&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on August 12, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GSOC (Partial) Week 7 report]]></title>
 <link rel="alternate" type="text/html" href="/gsoc/golang/gcc/gsoc-partial-week-7-report/" />
  <id>/gsoc/golang/gcc/gsoc-partial-week-7-report</id>
  <published>2013-08-05T01:36:00+03:00</published>
  <updated>2013-08-05T01:36:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;an-exciting-week&quot;&gt;An exciting week.&lt;/h1&gt;

&lt;p&gt;This week was exciting. Spending it on learning about the go runtime was the reason for this. As insightfull as it was however,
it also confused me a little bit. Before this goes any further, I should state that this is a partial report on my research
and my findings. My aims for this week were the following: &lt;strong&gt;To investigate the behavior of go programs under the Hurd, to
study the go runtime, and possibly modify it to see if the goroutine issues are libpthread’s issue or the go’s runtime issue&lt;/strong&gt;. &lt;/p&gt;

&lt;h1 id=&quot;presenting-my-findings&quot;&gt;Presenting my findings.&lt;/h1&gt;

&lt;p&gt;Most of my time was spent studying the gcc go frontend, libgo and the go runtime. Fortunatelly, I can say (gladly) that it was
time well spent. What I got from it were some nice pieces of insight, but also some slight confusion and doubts.&lt;/p&gt;

&lt;p&gt;The first interesting thing in my findings was this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Defer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Panic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// current exception being thrown&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;is_foreign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// whether current exception from other language&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcstack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// if status==Gsyscall, gcstack = stackbase to use during gc&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcstack_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcnext_segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcnext_sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcinitial_sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;ucontext_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcregs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// initial function&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;alllink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// on allg&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// passed parameter on wakeup&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fromgogo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// reached from gogo&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int16&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;goid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;selgen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// valid sudog pointer&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;waitreason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// if status==Gwaiting&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;schedlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;readyonstop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ispanic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;issystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int8&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;raceignore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ignore race detection events&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// for debuggers, but offset not hard-coded&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;lockedm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;idlem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;writenbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;writebuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// DeferChunk	*dchunk;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// DeferChunk	*dchunknext;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sigcode0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sigcode1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// uintptr	sigpc;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gopc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// pc of go statement that created this goroutine&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ncgo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CgoMal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cgomal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;ucontext_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;stack_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yep. This is the code that resembles a (yeah, you guessed it, a &lt;strong&gt;goroutine&lt;/strong&gt;). I was pretty surprised at first to see that a thread is resembled as a struct. But then again,
taking a closer look at it, it makes perfect sense. The next one though was a &lt;em&gt;lot trickier&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;g0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// goroutine with scheduling stack&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gsignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// signal-handling G&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;curg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// current running goroutine&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mallocing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;throwing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;locks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nomemprof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;waitnextg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;profilehz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;helpgc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fastrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ncgocall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of cgo calls in total&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;havenextg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nextg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;alllink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// on allm&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;schedlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MCache&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;lockedg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;idleg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createstack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Stack that created this thread.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nextwaitm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// next M waiting for lock&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;waitsema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// semaphore for parking on locks&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;waitsemacount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;waitsemalock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GCStats&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcstats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;racecall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;racepc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;settype_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;settype_bufsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This was a source of endless confusion at the beginning. It does have some hints reassuring the fact that G’s are indeed goroutines, but nothing that really helps to describe what an M is.
It’s structure is identical to that of the G however, which means that it might have something to do with a thread. And indeed it is. Further study of the source code
made me speculate that &lt;strong&gt;M’s must be the real operating system scheduled (kernel) threads, while G’s (goroutines) must be the lightweight threads managed by the go runtime.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was more than happy to find comments that reassured that position of mine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// The go scheduler&#39;s job is to match ready-to-run goroutines (`g&#39;s)
// with waiting-for-work schedulers (`m&#39;s)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another cool finding was the go (runtime) scheduler - from which the above comment originates:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sched&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gfree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// available g&amp;#39;s (status == Gdead)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goidgen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ghead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// g&amp;#39;s waiting to run&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gtail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of g&amp;#39;s waiting to run&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of g&amp;#39;s that are alive&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grunning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of g&amp;#39;s running on cpu or in syscall&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mhead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// m&amp;#39;s waiting for work&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of m&amp;#39;s waiting for work&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of m&amp;#39;s that have been created&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// atomic scheduling word (see below)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profilehz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// cpu profiling rate&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// running initialization&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockmain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// init called runtime.LockOSThread&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;stopped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// one g can set waitstop and wait here for m&amp;#39;s to stop&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From that particular piece of code, without a doubt the most interesting line is: &lt;code&gt;G *gfree&lt;/code&gt;. That is a pool of the go routines that are available to be used.
There are also helper schedulling functions, from which, the most interesting (for my purposes), was the &lt;code&gt;static void gfput(G*);&lt;/code&gt; which realeases a go routine (puts it to the gfree list)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Put on gfree list.  Sched must be locked.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;gfput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;gp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedlink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gfree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;runtime_sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gfree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are loads of other extremely interesting functions there, but for the sake of space I will not expand here more. However I will expand on what it is that is confusing me:&lt;/p&gt;

&lt;h2 id=&quot;the-source-of-confusion&quot;&gt;The source of confusion&lt;/h2&gt;

&lt;p&gt;My tests in this point are to include testing if removing thread destruction from the go runtime would result in difference in behavior.
There are however (as far as go is concerned), two kinds of threads in the go runtime. &lt;strong&gt;Goroutines&lt;/strong&gt; (G’s) and the &lt;strong&gt;kernel schedulable threads&lt;/strong&gt; (M’s).&lt;/p&gt;

&lt;p&gt;Neither of which, seem to really be destroyed. From my understanding so far, G’s are never totally destroyed (I may be wrong here, I am still researching this bit). Whenever
they are about to “destroyed”, they are added to the scheduler’s list of freeG’s to allow for reuse, as evidenced by the &lt;code&gt;gfput&lt;/code&gt; and &lt;code&gt;gfget&lt;/code&gt; functions. 
M’s on the other hand (the kernel threads), also seem to not be destroyed. A comment in go’s scheduler seems to support this (&lt;code&gt;// For now, m&#39;s never go away.&lt;/code&gt;) and as a 
matter of fact I could not find any code that destroyed M’s (I am still researching this bit).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Since none of the two actually get destroyed, and seeing as thread creation alone should not be buggy, how come we are facing the specific bugs we are facing?&lt;/strong&gt;
I will try to provide with an interpretation: Either I am fairly wrong and M’s (or G’s or both) actually do get destroyed somewhere (possible and very much probable)
or I looking for clues regarding the issue in the wrong place (might be possible but I don’t see it being very probable).&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/gsoc/golang/gcc/gsoc-partial-week-7-report/&quot;&gt;GSOC (Partial) Week 7 report&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on August 05, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GSOC: Week 6 report]]></title>
 <link rel="alternate" type="text/html" href="/gsoc-week-6-report/" />
  <id>/gsoc-week-6-report</id>
  <published>2013-07-31T12:36:00+03:00</published>
  <updated>2013-07-31T12:36:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;First of all, I would like to apologize for this report being late. But unfortunately this happened:
&lt;img src=&quot;http://i1.kym-cdn.com/photos/images/original/000/000/376/Accidentally93mb20110724-22047-ix1t06.png&quot; alt=&quot;I Accidentally 93 MB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Only that, in my case, it was not exactly 93 MB, rather it was about 1.5GB. Yeah, &lt;em&gt;I accidentally obliterated my &lt;strong&gt;GCC&lt;/strong&gt; repository on the Hurd&lt;/em&gt;, so I had to reclone and rebuild everything, something that took considerable amounts of time. 
How this happened is a long story that involved me wanting to rebuild my gcc, and &lt;code&gt;cd&lt;/code&gt;-ing 2 directories above the build folder, and ending up &lt;code&gt;rm -rf *&lt;/code&gt; from my &lt;code&gt;gcc&lt;/code&gt; folder (that included the source, and the build folder) rather than my &lt;code&gt;gcc_build&lt;/code&gt; folder. 
Thank god, that was only a minor setback, and the (small scale) crisis was soon averted.&lt;/p&gt;

&lt;h1 id=&quot;further-research&quot;&gt;Further research&lt;/h1&gt;

&lt;p&gt;This week was mostly spent reading source code, primarily looking for clues for the previous situation, and secondarily to get a better undestanding of the systems I am working on. This proved to be fertile, as I got a firmer grip of libpthread, and the GNU Mach system. However, while this week was mostly spent reading documentation, that doesn’t mean that I didn’t do anything practical. I also used my time to do some further research into what was it specifically that triggered the assertion failure. That required us to play a little bit with our newly built compiler on the Hurd and see what we can do with go on the Hurd.&lt;/p&gt;

&lt;h2 id=&quot;testing-gccgo-under-the-hurd&quot;&gt;Testing gccgo under the Hurd&lt;/h2&gt;

&lt;p&gt;If you recall correctly, the last time I reported I had found out that an assertion on &lt;code&gt;libpthread&lt;/code&gt;`s code was failing, and that was the root cause that failed both the &lt;code&gt;gccgo&lt;/code&gt; tests
and the &lt;code&gt;libgo&lt;/code&gt; tests. That assertion was failing at two different places in the code, the first being &lt;code&gt;__pthread_create_internal&lt;/code&gt; which is a &lt;code&gt;libpthread&lt;/code&gt; function 
located in &lt;code&gt;libpthread/pthread/pt-create.c&lt;/code&gt; and is invoked when an application wants to create a new POSIX thread. That function of course is not getting called directly, rather
it is invoked by &lt;code&gt;pthread_create&lt;/code&gt; which is the function that user space application use to create the new thread. (For reference reasons you can find the code &lt;a href=&quot;https://github.com/NlightNFotis/libpthread/blob/master/pthread/pt-create.c#L67&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The second place where that assertion was failing was at &lt;code&gt;__sem_timedwait_internal&lt;/code&gt; at the file &lt;a href=&quot;https://github.com/NlightNFotis/libpthread/blob/master/sysdeps/generic/sem-timedwait.c&quot;&gt;libpthread/sysdeps/generic/sem-timedwait.c&lt;/a&gt;, where it gets inlined in the place of &lt;code&gt;self = _pthread_self ();&lt;/code&gt;. (For more information, checkout last week’s report).&lt;/p&gt;

&lt;p&gt;So I was curious to test out the execution of some sample programs under the compiler we built on the Hurd. &lt;strong&gt;Beginning with some very simple hello world like programs, we could see that
they were compiling successfully, and also ran successfully without any issues at all.&lt;/strong&gt; Seeing as the assertion failure is generated when we attempt to create a new thread, I figured I might want to start playing with go routines under the Hurd.&lt;/p&gt;

&lt;p&gt;So we started playing with a simple hello world like goroutine example (the one available under the &lt;a href=&quot;http://tour.golang.org/#62&quot;&gt;tour of go on the golang.org website.&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Millisecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This gets compiled without any issues at all, but when we try to run it…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sysdeps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timedwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sem_timedwait_internal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Assertion&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ktid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__mach_thread_self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ktid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__mach_port_deallocate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__mach_task_self_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ktid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Aborted&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;goroutine&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcc_source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libgo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;goroutine&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcc_source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libgo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bam! It exploded right infront of our face. Let’s see if this might become friendlier if we alter it a little bit. To do this we removed the &lt;code&gt;go&lt;/code&gt; from &lt;code&gt;say&lt;/code&gt; to avoid running it as a goroutine, and we also removed &lt;code&gt;time.Sleep&lt;/code&gt; (along with the &lt;code&gt;time&lt;/code&gt; import), &lt;a href=&quot;https://github.com/NlightNFotis/gcc/blob/master/libgo/go/time/sleep.go#L8&quot;&gt;whose job is to pause a go routine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you do this, the code seems to be a hello world like for loop sample, that prints:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
world
world
world
world
world
hello
hello
hello
hello
hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm. Let’s play with it some more. Changing our code a little bit to make &lt;code&gt;say(&quot;world&quot;)&lt;/code&gt; run as a goroutine gives us the following code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which, when executed results in this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&#39; failed.
Aborted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we can see that the simplest go programs that run with goroutines do not run. Let’s still try some programs that invoke goroutines to see if our assumptions are correct.
Below is the code of a very simple web server in go (&lt;a href=&quot;http://tour.golang.org/#56&quot;&gt;found in the golang website&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;localhost:4000&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The (non surprising) result is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
Aborted

goroutine 1 [syscall]:
no stack trace available
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm. This failure was last caused by &lt;code&gt;time.Sleep&lt;/code&gt;. So let’s take a closer look into the code of the &lt;code&gt;ListenAndServe&lt;/code&gt; function. The code for this function in the go runtime is this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ListenAndServe listens on the TCP network address srv.Addr and then&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// calls Serve to handle requests on incoming connections.  If&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// srv.Addr is blank, &amp;quot;:http&amp;quot; is used.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Addr&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;:http&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This calls the function &lt;a href=&quot;https://github.com/NlightNFotis/gcc/blob/master/libgo/go/net/http/server.go#L1255&quot;&gt;&lt;code&gt;Serve&lt;/code&gt;&lt;/a&gt;. The interesting part in this one is line 1271:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
 time.Sleep(tempDelay)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It calls &lt;code&gt;time.Sleep&lt;/code&gt; on accept failure. Which is known to pause go routines, and as a result be the ultimate cause for the result we are seeing.&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts---work-for-next-week&quot;&gt;Final thoughts - Work for next week&lt;/h1&gt;

&lt;p&gt;So pretty much everything that has anything to do with a goroutine is failing. Richard Braun on the #hurd suggested that since &lt;strong&gt;creation and destruction&lt;/strong&gt; of threads is buggy in libpthread, maybe we should try a work around until a proper fix is in place. 
Apart from that my mentor Thomas Schwinge suggested to make thread destruction in go’s runtime a no-op to see if that makes any difference. 
If it does that should mean that there is nothing wrong in the go runtime itself, rather, the offending code is in libpthread. This is also my very next course of action, which I shall report on very soon.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/gsoc-week-6-report/&quot;&gt;GSOC: Week 6 report&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on July 31, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GSOC: Week 5 report]]></title>
 <link rel="alternate" type="text/html" href="/gsoc-week-5-report/" />
  <id>/gsoc-week-5-report</id>
  <published>2013-07-24T12:36:00+03:00</published>
  <updated>2013-07-24T12:36:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;a-clue&quot;&gt;A clue!&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;So last week we were left with the compiler test logs and the build results logs that we had to go through to checkout what was the root cause of all these failures in the gccgo test results, and more importantly in the libgo tests.&lt;/strong&gt; So I went through the gccgo logs in search for a clue about why this may have happened. Here is the list of all the failures I compiled from the logs:&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;
spawn [open ...]^M
doubleselect.x: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_s      elf_ + 0), ktid); ok; })&#39; failed.
FAIL: go.test/test/chan/doubleselect.go execution,  -O2 -g

==========================================================

spawn [open ...]^M
nonblock.x: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_       + 0), ktid); ok; })&#39; failed.
FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g

==========================================================

Executing on host: /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../  -fno-diagnostics-show-caret -fdiagnostics-color=never  -I/root/gcc_new/gccbuild/i68      6-unknown-gnu0.3/./libgo  -fsplit-stack -c  -o split_stack376.o split_stack376.c    (timeout = 300)
spawn /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ -fno-diagnostics-show-caret -fdiagnostics-color=never -I/root/gcc_new/gccbuild/i686-unknown-gnu0.      3/./libgo -fsplit-stack -c -o split_stack376.o split_stack376.c^M
cc1: error: &#39;-fsplit-stack&#39; currently only supported on GNU/Linux^M
cc1: error: &#39;-fsplit-stack&#39; is not supported by this compiler configuration^M
compiler exited with status 1
output is:
 cc1: error: &#39;-fsplit-stack&#39; currently only supported on GNU/Linux^M
 cc1: error: &#39;-fsplit-stack&#39; is not supported by this compiler configuration^M 

UNTESTED: go.test/test/chan/select2.go

==========================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
select3.x: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate       ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
Aborted
 
FAIL: go.test/test/chan/select3.go execution,  -O2 -g

==========================================================

Executing on host: /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ /root/gcc_new/gcc/gcc/testsuite/go.test/test/chan/select5.go  -fno-diagnostics-show-      caret -fdiagnostics-color=never  -I/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo  -O  -w  -pedantic-errors  -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -L/root/gcc_new/gccbuild/i686-unknown-      gnu0.3/./libgo/.libs  -lm   -o select5.exe    (timeout = 300)
spawn /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ /root/gcc_new/gcc/gcc/testsuite/go.test/test/chan/select5.go -fno-diagnostics-show-caret -fdiagno      stics-color=never -I/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -O -w -pedantic-errors -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.lib      s -lm -o select5.exe^M
PASS: go.test/test/chan/select5.go -O (test for excess errors)
FAIL: go.test/test/chan/select5.go execution

==========================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
bug147.x: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate       ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
Aborted
 
FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g

=========================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
BUG: bug347: cannot find caller
Aborted
 
 
FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g

========================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
BUG: bug348: cannot find caller
panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x2 addr=0x0]
 
goroutine 1 [running]:
FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g

========================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
mallocfin.x: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self      _ + 0), ktid); ok; })&#39; failed.
FAIL: go.test/test/mallocfin.go execution,  -O2 -g

=======================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
Aborted
 
 
FAIL: go.test/test/nil.go execution,  -O2 -g

======================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
Aborted
 
 
FAIL: go.test/test/recover3.go execution,  -O2 -g

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;See a pattern there?&lt;/em&gt; Well certainly I do. In several occasions, the root cause for the fail is this:&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate       ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm… That’s interesting. Let us go through the libgo results too.&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;
Test Run By root on Fri Jul 12 17:56:44 UTC 2013
Native configuration is i686-unknown-gnu0.3

		=== libgo tests ===

a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 10005 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: bufio
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10005) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 10637 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: bytes
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10637) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 10757 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: errors
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10757) - No such process
a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
Aborted


goroutine 1 [syscall]:
no stack trace available
FAIL: expvar
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10886) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11058 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: flag
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11058) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11475 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: fmt
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11475) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11584 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: html
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11584) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11747 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: image
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11747) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11999 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: io
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11999) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 12116 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: log
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (12116) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 13107 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: math
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (13107) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 13271 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: mime
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (13271) - No such process
a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
Aborted


goroutine 1 [chan receive]:
a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
panic during panic
testing.RunTestsFAIL: net
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (14234) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 14699 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: os
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (14699) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&#39; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 14860 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: path
timed out in gotest

...


runtest completed at Fri Jul 12 18:09:07 UTC 2013
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s certainly even more interesting. In case you haven’t noticed, it’s the same assertion that caused the failures in gccgo test suite. Let us find the offending code, shall we?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Set the new thread&amp;#39;s signal mask and set the pending signals to&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     empty.  POSIX says: &amp;quot;The signal mask shall be inherited from the&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     creating thread.  The set of signals pending for the new thread&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     shall be empty.&amp;quot;  If the currnet thread is not a pthread then we&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     just inherit the process&amp;#39; sigmask.  */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__pthread_num_threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigprocmask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__pthread_sigstate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pthread_self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_perror&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This seems to be the code that the logs point to. But no sign of the assertion. After discussing this issue with my peers in #hurd, I was told that the code I was looking for (the failing assertion), is getting inlined via &lt;code&gt;_pthread_self ()&lt;/code&gt; and is actually located in &lt;code&gt;libpthread/sysdeps/mach/hurd/pt-sysdep.h&lt;/code&gt;. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__thread&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__pthread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___pthread_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define _pthread_self()                                            \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;	({                                                         \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;	  struct __pthread *thread;                                \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;	                                                           \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;	  assert (__pthread_threads);                              \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;	  thread = ___pthread_self;                                \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;	                                                           \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;	  assert (thread);                                         \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;	  assert (({ mach_port_t ktid = __mach_thread_self ();     \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;                     int ok = thread-&amp;gt;kernel_thread == ktid;       \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;                     __mach_port_deallocate (__mach_task_self (), ktid);\&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;                     ok; }));                                      \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;          thread;                                                  \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;         })&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So this is what I was looking for. Further discussing it in the weekly IRC meeting, braunr provided me with some more clues:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;08:38:15 braunr&amp;gt; nlightnfotis: did i answer that ?&lt;br /&gt;
08:38:24 nlightnfotis&amp;gt; braunr: which one?&lt;br /&gt;
08:38:30 nlightnfotis&amp;gt; hello btw :)&lt;br /&gt;
08:38:33 braunr&amp;gt; the problems you’re seeing are the pthread resources leaks i’ve been trying to fix lately&lt;br /&gt;
08:38:58 braunr&amp;gt; they’re not only leaks&lt;br /&gt;
08:39:08 braunr&amp;gt; creation and destruction are buggy &lt;br /&gt;
08:39:37 nlightnfotis&amp;gt; I have read so in http://www.gnu.org/software/hurd/libpthread.html. I believe it’s under Thread’s Death right?&lt;br /&gt;
08:40:15 braunr&amp;gt; nlightnfotis: yes but it’s buggy&lt;br /&gt;
08:40:22 braunr&amp;gt; and the description doesn’t describe the bugs&lt;br /&gt;
08:41:02 nlightnfotis&amp;gt; so we will either have to find a temporary workaround, or better yet work on a fix, right?&lt;br /&gt;
08:41:12 braunr&amp;gt; nlightnfotis: i also told you the work around&lt;br /&gt;
08:41:16 braunr&amp;gt; nlightnfotis: create a thread pool  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;work-for-next-week&quot;&gt;Work for next week&lt;/h1&gt;

&lt;p&gt;This leaves us with next week’s work, which is to hack in libpthread’s code to attempt to create a thread pool, so that we avoid some of the issues that are present now with the current implementation of the Hurd libpthread code. &lt;/p&gt;

&lt;p&gt;It was also suggested by Samuel Thibault (youpi) that I should run the libgo tests by hand and see if I get some more clues, like stack traces. It sounds like a good idea to me, so that’s something that I will look into too.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/gsoc-week-5-report/&quot;&gt;GSOC: Week 5 report&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on July 24, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GSOC: Week 4 report]]></title>
 <link rel="alternate" type="text/html" href="/gsoc-week-4-report/" />
  <id>/gsoc-week-4-report</id>
  <published>2013-07-15T11:43:00+03:00</published>
  <updated>2013-07-15T11:43:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;yeah-baby-it-builds&quot;&gt;Yeah baby! It builds!&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;The highlight of this week’s progress was managing to successfully build
gccgo under the Hurd.&lt;/strong&gt;
Not only did it compile successfully, it also run its tests, with the
results &lt;a href=&quot;http://lists.gnu.org/archive/html/bug-hurd/2013-06/msg00117.html&quot;&gt;matching the ones provided by my mentor Thomas Schwinge&lt;/a&gt;.
This was a checkpoint in my summer of code project. Successful building of
the compiler meant that I am (happily) in the position to carry on with the
next part (and the main one) of my project, that is, to make sure that
the &lt;strong&gt;go library (libgo) also passes all its tests 
and works without any major issues.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;so-where-are-we-now&quot;&gt;So where are we now?&lt;/h1&gt;

&lt;h2 id=&quot;gccgo&quot;&gt;gccgo&lt;/h2&gt;

&lt;p&gt;Compiling gccgo on the Hurd was big. But we also had to see how it 
compared to the build that was successful on Linux. The most effective
way to compare the two builds, is to check the test results of the two.&lt;/p&gt;

&lt;p&gt;Taking a look at the gccgo results on the Hurd, I was delighted to find 
that it passed most of its tests. There were few that were failing, but 
for the most part, it did well. Below are the test results of gccgo on the Hurd:&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;     === go Summary ===

# of expected passes        5069
# of unexpected failures    11
# of expected failures      1
# of untested testcases     6
/root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo  version 4.9.0 20130606 (experimental) (GCC)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it’s passing 99% of its tests. That’s cool. But it could help to take a look
at the tests that are failing, to get an idea of what the fails are, how critical they are, etc&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;nlightnfotis@earth:~/HurdVM/HurdFiles$ grep -v ^PASS: &amp;lt; go.sum
Test Run By root on Thu Jul 11 10:33:34 2013
Native configuration is i686-unknown-gnu0.3

        === go tests ===

        Schedule of variations:
            unix

            Running target unix
            Running /root/gcc_new/gcc/gcc/testsuite/go.dg/dg.exp ...
            Running /root/gcc_new/gcc/gcc/testsuite/go.go-torture/execute/execute.exp ...
            Running /root/gcc_new/gcc/gcc/testsuite/go.test/go-test.exp ...
            FAIL: go.test/test/chan/doubleselect.go execution,  -O2 -g 
            FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g 
            UNTESTED: go.test/test/chan/select2.go
            FAIL: go.test/test/chan/select3.go execution,  -O2 -g 
            FAIL: go.test/test/chan/select5.go execution
            UNTESTED: go.test/test/closure.go
            FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g 
            FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g 
            FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g 
            XFAIL: bug429.go  -O2 -g  execution test
            FAIL: go.test/test/goprint.go execution
            UNTESTED: go.test/test/goprint.go compare
            UNTESTED: go.test/test/init1.go
            FAIL: go.test/test/mallocfin.go execution,  -O2 -g 
            FAIL: go.test/test/nil.go execution,  -O2 -g 
            FAIL: go.test/test/recover3.go execution,  -O2 -g 
            UNTESTED: go.test/test/rotate.go
            UNTESTED: go.test/test/stack.go

                    === go Summary ===

# of expected passes        5069
# of unexpected failures    11
# of expected failures      1
# of untested testcases     6
/root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo  version 4.9.0 20130606 (experimental) (GCC) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm. So these are the failing tests. Before we go through them, it might be a good idea
to check the status of the gccgo tests on the Linux build too. Let’s see.&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;nlightnfotis@earth:~$ grep -v ^PASS: &amp;lt; linux_go.sum 
Test Run By fotis on Mon Jul 15 10:28:38 2013
Native configuration is i686-pc-linux-gnu

        === go tests ===

        Schedule of variations:
            unix

            Running target unix
            Running /home/fotis/Software/gcc/gcc/testsuite/go.dg/dg.exp ...
            Running /home/fotis/Software/gcc/gcc/testsuite/go.go-torture/execute/execute.exp ...
            Running /home/fotis/Software/gcc/gcc/testsuite/go.test/go-test.exp ...
            UNTESTED: go.test/test/closure.go
            XFAIL: bug429.go  -O2 -g  execution test
            UNTESTED: go.test/test/init1.go
            UNTESTED: go.test/test/rotate.go

                    === go Summary ===

# of expected passes        5183
# of expected failures      1
# of untested testcases     3
/home/fotis/Software/gcc_build/gcc/testsuite/go/../../gccgo  version 4.9.0 20130702 (experimental) (GCC) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, it seems like there are less tests failing here. But wait a minute. Those tests that are failing.
They are the same as with the Hurd build. So I can assume that we are left with 4 less tests to check
regarding their failures (Go on Linux works without any issues,so I guess it would be safe to skip those tests at the moment).
That leaves us with these tests to check:&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;FAIL: go.test/test/chan/doubleselect.go execution,  -O2 -g
FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g
UNTESTED: go.test/test/chan/select2.go
FAIL: go.test/test/chan/select3.go execution,  -O2 -g
FAIL: go.test/test/chan/select5.go execution
FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g
FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g
FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g
FAIL: go.test/test/goprint.go execution
UNTESTED: go.test/test/goprint.go compare
FAIL: go.test/test/mallocfin.go execution,  -O2 -g
FAIL: go.test/test/nil.go execution,  -O2 -g
FAIL: go.test/test/recover3.go execution,  -O2 -g
UNTESTED: go.test/test/stack.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Discussing this with my mentor &lt;a href=&quot;https://plus.google.com/101468009864620818344&quot;&gt;Thomas Schwinge&lt;/a&gt; in IRC (#hurd)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;tschwinge&gt; For now, please ignore any failing tests that have »select« in their name -- that is, do file them, but do not spend a lot of time figuring out what might be wrong there.
&lt;tschwinge&gt; The Hurd&#39;s select implementation is a bit of a beast, and I don&#39;t want you -- at this time -- spend a lot of time on that.  We already know there are some deficiencies, so we should postpone that to later.
&lt;/tschwinge&gt;&lt;/tschwinge&gt;
&lt;/blockquote&gt;

&lt;p&gt;So that leaves us with even less tests to check:&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g
FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g
FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g
FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g
FAIL: go.test/test/goprint.go execution
UNTESTED: go.test/test/goprint.go compare
FAIL: go.test/test/mallocfin.go execution,  -O2 -g
FAIL: go.test/test/nil.go execution,  -O2 -g
FAIL: go.test/test/recover3.go execution,  -O2 -g
UNTESTED: go.test/test/stack.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice. &lt;strong&gt;This narrowed down the list of errors that I have to go through to make sure that gccgo
works as well on the Hurd as it does on Linux.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;libgo&quot;&gt;libgo&lt;/h2&gt;

&lt;p&gt;So, we talked about gccgo, but what about the runtime libraries (libgo)? They are also getting 
tested when we run &lt;code&gt;make check-go&lt;/code&gt;and seeing as they are a vital part 
of enabling programs written on go to run on the Hurd, we ought
to take a look. (This was also the original goal of my project proposal).&lt;/p&gt;

&lt;p&gt;So let us see what we have at the libgo.sum:&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;Test Run By root on Fri Jul 12 17:56:44 UTC 2013
Native configuration is i686-unknown-gnu0.3

        === libgo tests ===

        Schedule of variations:
            unix

            Running target unix
            Running ../../../gcc/libgo/libgo.exp ...
            FAIL: bufio
            FAIL: bytes
            FAIL: errors
            FAIL: expvar
            FAIL: flag
            FAIL: fmt
            FAIL: html
            FAIL: image
            FAIL: io
            FAIL: log
            FAIL: math
            FAIL: mime
            FAIL: net
            FAIL: os
            FAIL: path
            FAIL: reflect
            FAIL: regexp
            FAIL: runtime
            FAIL: sort
            FAIL: strconv
            FAIL: strings
            FAIL: sync
            FAIL: syscall
            FAIL: time
            FAIL: unicode
            FAIL: archive/tar
            FAIL: archive/zip
            FAIL: compress/bzip2
            FAIL: compress/flate
            FAIL: compress/gzip
            FAIL: compress/lzw
            FAIL: compress/zlib
            FAIL: container/heap
            FAIL: container/list
            FAIL: container/ring
            FAIL: crypto/aes
            FAIL: crypto/cipher
            FAIL: crypto/des
            FAIL: crypto/dsa
            FAIL: crypto/ecdsa
            FAIL: crypto/elliptic
            FAIL: crypto/hmac
            FAIL: crypto/md5
            FAIL: crypto/rand
            FAIL: crypto/rc4
            FAIL: crypto/rsa
            FAIL: crypto/sha1
            FAIL: crypto/sha256
            FAIL: crypto/sha512
            FAIL: crypto/subtle
            FAIL: crypto/tls
            FAIL: crypto/x509
            FAIL: database/sql
            FAIL: database/sql/driver
            FAIL: debug/dwarf
            FAIL: debug/elf
            FAIL: debug/macho
            FAIL: debug/pe
            FAIL: encoding/ascii85
            FAIL: encoding/asn1
            FAIL: encoding/base32
            FAIL: encoding/base64
            FAIL: encoding/binary
            FAIL: encoding/csv
            FAIL: encoding/gob
            FAIL: encoding/hex
            FAIL: encoding/json
            FAIL: encoding/pem
            PASS: encoding/xml
            FAIL: exp/cookiejar
            FAIL: exp/ebnf
            FAIL: exp/html
            FAIL: exp/html/atom
            FAIL: exp/locale/collate
            FAIL: exp/locale/collate/build
            FAIL: exp/norm
            FAIL: exp/proxy
            FAIL: exp/terminal
            FAIL: exp/utf8string
            FAIL: html/template
            FAIL: go/ast
            FAIL: go/doc
            FAIL: go/format
            FAIL: go/parser
            FAIL: go/printer
            FAIL: go/scanner
            FAIL: go/token
            FAIL: go/types
            FAIL: hash/adler32
            FAIL: hash/crc32
            FAIL: hash/crc64
            FAIL: hash/fnv
            FAIL: image/color
            FAIL: image/draw
            FAIL: image/jpeg
            FAIL: image/png
            FAIL: index/suffixarray
            FAIL: io/ioutil
            FAIL: log/syslog
            FAIL: math/big
            FAIL: math/cmplx
            FAIL: math/rand
            FAIL: mime/multipart
            FAIL: net/http
            FAIL: net/http/cgi
            FAIL: net/http/fcgi
            FAIL: net/http/httptest
            FAIL: net/http/httputil
            FAIL: net/mail
            FAIL: net/rpc
            FAIL: net/smtp
            FAIL: net/textproto
            FAIL: net/url
            FAIL: net/rpc/jsonrpc
            FAIL: old/netchan
            FAIL: old/regexp
            FAIL: old/template
            FAIL: os/exec
            FAIL: os/signal
            FAIL: os/user
            FAIL: path/filepath
            FAIL: regexp/syntax
            FAIL: runtime/pprof
            FAIL: sync/atomic
            FAIL: text/scanner
            FAIL: text/tabwriter
            FAIL: text/template
            FAIL: text/template/parse
            FAIL: testing/quick
            FAIL: unicode/utf16
            FAIL: unicode/utf8

                    === libgo Summary ===

# of expected passes        1
# of unexpected failures    130
/root/gcc_new/gccbuild/./gcc/gccgo version 4.9.0 20130606 (experimental) (GCC)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Oh boy!&lt;/strong&gt; Oh boy! Well, on second thoughts, this was not unexpected. 
&lt;strong&gt;This was the core of my GSOC work&lt;/strong&gt;. This is how it starts :)&lt;/p&gt;

&lt;p&gt;Before this goes any further, maybe we should visit the Linux test results too.&lt;/p&gt;

&lt;pre lang=&quot;shell&quot;&gt;&lt;code&gt;
Test Run By fotis on Τρι 02 Ιούλ 2013 09:20:20 μμ EEST
Native configuration is i686-pc-linux-gnu

        === libgo tests ===

        Schedule of variations:
            unix

            Running target unix
            Running ../../../gcc/libgo/libgo.exp ...
            PASS: bufio
            PASS: bytes
            ...

                    === libgo Summary ===

# of expected passes        131
/home/fotis/Software/gcc_build/./gcc/gccgo version 4.9.0 20130702 (experimental) (GCC)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow. Considering the results from the Hurd, they really are &lt;strong&gt;not&lt;/strong&gt; unexpected. &lt;a href=&quot;http://darnassus.sceen.net/~hurd-web/open_issues/gccgo/&quot;&gt;Remember
that &lt;strong&gt;getcontext, makecontext, setcontext and swapcontext&lt;/strong&gt; are not working as expected.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And recalling from an email from Ian Lance Taylor (the GCCgo maintainer, and a member of the Go team)
early in the summer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Go does require switching stacks.  A port of Go that doesn’t support
goroutines would be useless–nothing in the standard library would
work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;conclusion--work-for-next-week&quot;&gt;Conclusion / Work for next week.&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;So now it comes down to work on implementing correctly the context switching functions.&lt;/strong&gt; 
Apart from that, going through the test results that fail from gccgo is also something that
is to be done, however I am not sure that it should be a first priority. I also have to go
through go.log to see if there any clues as to why the gccgo tests fail.&lt;/p&gt;

&lt;p&gt;Having finally built gccgo on the Hurd, and &lt;strong&gt;more importantly still being on schedule,
(the original one, from my proposal) means that I can now concentrate on the core part of my 
project proposal (and the most exciting one too)&lt;/strong&gt;, that is proper implementation 
of what is &lt;em&gt;blocking effective context switching, which
in its part is blocking goroutines, without which, the go library will not work properly.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/gsoc-week-4-report/&quot;&gt;GSOC: Week 4 report&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on July 15, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Hello World]]></title>
 <link rel="alternate" type="text/html" href="/hello-world/" />
  <id>/hello-world</id>
  <published>2013-07-14T12:24:00+03:00</published>
  <updated>2013-07-14T12:24:00+03:00</updated>
  <author>
    <name>Fotis Koutoulakis</name>
    <uri></uri>
    <email>fotis.koutoulakis@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;a-new-beginning&quot;&gt;A new beginning&lt;/h1&gt;

&lt;p&gt;Oh boy! A new start. Isn’t that exciting? You bet it is. It’s not however
my first introduction to blogging. I used to have a &lt;a href=&quot;http://lambdareflection.wordpress.com&quot;&gt;blog&lt;/a&gt;
on Wordpress.com, but after a while I was turned off by the fact that it felt too limited.
So I decided I wanted a new place for me to host my online presence, that wasn’t so much limited as Wordpress was.
Initially I was thinking about renting a VPS and self hosting wordpress there. But after doing a little research,
I came across &lt;a href=&quot;http://pages.github.com&quot;&gt;Github Pages&lt;/a&gt;. I started investigating 
Github pages some more, and found &lt;a href=&quot;http://jekyllrb.com&quot;&gt;jekyll&lt;/a&gt; to be very &lt;strong&gt;very&lt;/strong&gt; interesting.
After a while, I also came across &lt;a href=&quot;http://octopress.org&quot;&gt;Octopress&lt;/a&gt;. That was it. I was sold :)&lt;/p&gt;

&lt;p&gt;Free hosting of a blog, no need to maintain a server, and a platform written in &lt;a href=&quot;http://www.ruby-lang.org&quot;&gt;ruby&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Without hesitation, I immediately started working on it. I went through octopress documentation, (which needless to say, but it was fantastic)
found a wonderful theme online at &lt;a href=&quot;http://opthemes.com&quot;&gt;opthemes&lt;/a&gt;, (kudos to &lt;a href=&quot;http://alexgaribay.com&quot;&gt;Alex Garibay&lt;/a&gt; for that)
and got started. &lt;/p&gt;

&lt;p&gt;And here we are. On a platform that you can hack and customize to your liking - at least more so than the locked down version of wordpress.
On a platform that is written on a language that I don’t hate with passion (like cough, &lt;strong&gt;php&lt;/strong&gt;, cough), 
and may actually learn in the future, just for the sake of being able to customize every bit of it (gotta love the hacker’s way)
- even though I am not really interested in web development per se.&lt;/p&gt;

&lt;p&gt;Hope it starts out nice. I guess that is left to be seen.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/hello-world/&quot;&gt;Hello World&lt;/a&gt; was originally published by Fotis Koutoulakis at &lt;a href=&quot;&quot;&gt;Fotis Koutoulakis&lt;/a&gt; on July 14, 2013.&lt;/p&gt;</content>
</entry>

</feed>
