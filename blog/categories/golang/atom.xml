<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | Fotis Koutoulakis]]></title>
  <link href="http://NlightNFotis.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://NlightNFotis.github.io/"/>
  <updated>2013-07-31T13:58:05+03:00</updated>
  <id>http://NlightNFotis.github.io/</id>
  <author>
    <name><![CDATA[Fotis Koutoulakis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSOC: Week 6 report]]></title>
    <link href="http://NlightNFotis.github.io/blog/2013/07/31/gsoc-week-6-report/"/>
    <updated>2013-07-31T12:36:00+03:00</updated>
    <id>http://NlightNFotis.github.io/blog/2013/07/31/gsoc-week-6-report</id>
    <content type="html"><![CDATA[<p>First of all, I would like to apologize for this report being late. But unfortunately this happened:
<img src="http://i1.kym-cdn.com/photos/images/original/000/000/376/Accidentally93mb20110724-22047-ix1t06.png" alt="I Accidentally 93 MB" /></p>

<p>Only that, in my case, it was not exactly 93 MB, rather it was about 1.5GB. Yeah, <em>I accidentally obliterated my <strong>GCC</strong> repository on the Hurd</em>, so I had to reclone and rebuild everything, something that took considerable amounts of time.
How this happened is a long story that involved me wanting to rebuild my gcc, and <code>cd</code>-ing 2 directories above the build folder, and ending up <code>rm -rf *</code> from my <code>gcc</code> folder (that included the source, and the build folder) rather than my <code>gcc_build</code> folder.
Thank god, that was only a minor setback, and the (small scale) crisis was soon averted.</p>

<h1>Further research</h1>

<p>This week was mostly spent reading source code, primarily looking for clues for the previous situation, and secondarily to get a better undestanding of the systems I am working on. This proved to be fertile, as I got a firmer grip of libpthread, and the GNU Mach system. However, while this week was mostly spent reading documentation, that doesn&rsquo;t mean that I didn&rsquo;t do anything practical. I also used my time to do some further research into what was it specifically that triggered the assertion failure. That required us to play a little bit with our newly built compiler on the Hurd and see what we can do with go on the Hurd.</p>

<h2>Testing gccgo under the Hurd</h2>

<p>If you recall correctly, the last time I reported I had found out that an assertion on <code>libpthread</code>`s code was failing, and that was the root cause that failed both the <code>gccgo</code> tests
and the <code>libgo</code> tests. That assertion was failing at two different places in the code, the first being <code>__pthread_create_internal</code> which is a <code>libpthread</code> function
located in <code>libpthread/pthread/pt-create.c</code> and is invoked when an application wants to create a new POSIX thread. That function of course is not getting called directly, rather
it is invoked by <code>pthread_create</code> which is the function that user space application use to create the new thread. (For reference reasons you can find the code <a href="https://github.com/NlightNFotis/libpthread/blob/master/pthread/pt-create.c#L67">here</a>)</p>

<p>The second place where that assertion was failing was at <code>__sem_timedwait_internal</code> at the file <a href="https://github.com/NlightNFotis/libpthread/blob/master/sysdeps/generic/sem-timedwait.c">libpthread/sysdeps/generic/sem-timedwait.c</a>, where it gets inlined in the place of <code>self = _pthread_self ();</code>. (For more information, checkout last week&rsquo;s report).</p>

<p>So I was curious to test out the execution of some sample programs under the compiler we built on the Hurd. <strong>Beginning with some very simple hello world like programs, we could see that
they were compiling successfully, and also ran successfully without any issues at all.</strong> Seeing as the assertion failure is generated when we attempt to create a new thread, I figured I might want to start playing with go routines under the Hurd.</p>

<p>So we started playing with a simple hello world like goroutine example (the one available under the <a href="http://tour.golang.org/#62">tour of go on the golang.org website.</a>)</p>

<p>```go</p>

<p>package main</p>

<p>import (</p>

<pre><code>"fmt"
"time"
</code></pre>

<p>)</p>

<p>func say(s string) {</p>

<pre><code>for i := 0; i &lt; 5; i++ {
    time.Sleep(100 * time.Millisecond)
    fmt.Println(s)
}
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>go say("world")
say("hello")
</code></pre>

<p>}
```</p>

<p>This gets compiled without any issues at all, but when we try to run it&hellip;</p>

<p><code>``
a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion</code>({ mach_port_t ktid = <strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; </strong>mach_port_deallocate ((<em>_mach_task_self</em> + 0), ktid); ok; })&lsquo; failed.
Aborted</p>

<p>goroutine 1 [sleep]:
time.Sleep</p>

<pre><code>../../../gcc_source/libgo/runtime/time.goc:26
</code></pre>

<p>goroutine 3 [sleep]:
time.Sleep</p>

<pre><code>../../../gcc_source/libgo/runtime/time.goc:26
</code></pre>

<p>```</p>

<p>Bam! It exploded right infront of our face. Let&rsquo;s see if this might become friendlier if we alter it a little bit. To do this we removed the <code>go</code> from <code>say</code> to avoid running it as a goroutine, and we also removed <code>time.Sleep</code> (along with the <code>time</code> import), <a href="https://github.com/NlightNFotis/gcc/blob/master/libgo/go/time/sleep.go#L8">whose job is to pause a go routine</a>.</p>

<p>When you do this, the code seems to be a hello world like for loop sample, that prints:</p>

<p><code>
root@debian:~/Software/Experiments/go# ./a.out
world
world
world
world
world
hello
hello
hello
hello
hello
</code></p>

<p>Hmm. Let&rsquo;s play with it some more. Changing our code a little bit to make <code>say("world")</code> run as a goroutine gives us the following code:</p>

<p>```go
package main</p>

<p>import &ldquo;fmt&rdquo;</p>

<p>func say(s string) {</p>

<pre><code>for i := 0; i &lt; 5; i++ {
    fmt.Println(s)
}
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>go say("world")
say("hello")
</code></pre>

<p>}
```</p>

<p>Which, when executed results in this:</p>

<p><code>``
root@debian:~/Software/Experiments/go# ./a.out
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion</code>({ mach_port_t ktid = <strong>mach_thread_self (); int ok = thread->kernel_thread == ktid;
</strong>mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&lsquo; failed.
Aborted</p>

<p>```</p>

<p>So we can see that the simplest go programs that run with goroutines do not run. Let&rsquo;s still try some programs that invoke goroutines to see if our assumptions are correct.
Below is the code of a very simple web server in go (<a href="http://tour.golang.org/#56">found in the golang website</a>).</p>

<p>```go webserver.go</p>

<p>package main</p>

<p>import (</p>

<pre><code>"fmt"
"net/http"
</code></pre>

<p>)</p>

<p>type Hello struct{}</p>

<p>func (h Hello) ServeHTTP(</p>

<pre><code>w http.ResponseWriter,
r *http.Request) {
fmt.Fprint(w, "Hello!")
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>var h Hello
http.ListenAndServe("localhost:4000", h)
</code></pre>

<p>}
```</p>

<p>The (non surprising) result is the following:</p>

<p><code>``
a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion</code>({ mach_port_t ktid = <strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; </strong>mach_port_deallocate ((<em>_mach_task_self</em> + 0), ktid); ok; })&lsquo; failed.
Aborted</p>

<p>goroutine 1 [syscall]:
no stack trace available
```</p>

<p>Hmm. This failure was last caused by <code>time.Sleep</code>. So let&rsquo;s take a closer look into the code of the <code>ListenAndServe</code> function. The code for this function in the go runtime is this:</p>

<p>```go gcc/libgo/go/net/http/server.go</p>

<p>// ListenAndServe listens on the TCP network address srv.Addr and then
// calls Serve to handle requests on incoming connections.  If
// srv.Addr is blank, &ldquo;:http&rdquo; is used.
func (srv *Server) ListenAndServe() error {</p>

<pre><code>addr := srv.Addr
if addr == "" {
    addr = ":http"
}
l, e := net.Listen("tcp", addr)
if e != nil {
    return e
}
return srv.Serve(l)
</code></pre>

<p>}
```</p>

<p>This calls the function <a href="https://github.com/NlightNFotis/gcc/blob/master/libgo/go/net/http/server.go#L1255"><code>Serve</code></a>. The interesting part in this one is line 1271:</p>

<p>```go</p>

<p> time.Sleep(tempDelay)</p>

<p>```</p>

<p>It calls <code>time.Sleep</code> on accept failure. Which is known to pause go routines, and as a result be the ultimate cause for the result we are seeing.</p>

<h1>Final thoughts &ndash; Work for next week</h1>

<p>So pretty much everything that has anything to do with a goroutine is failing. Richard Braun on the #hurd suggested that since <strong>creation and destruction</strong> of threads is buggy in libpthread, maybe we should try a work around until a proper fix is in place.
Apart from that my mentor Thomas Schwinge suggested to make thread destruction in go&rsquo;s runtime a no-op to see if that makes any difference.
If it does that should mean that there is nothing wrong in the go runtime itself, rather, the offending code is in libpthread. This is also my very next course of action, which I shall report on very soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSOC: Week 5 report]]></title>
    <link href="http://NlightNFotis.github.io/blog/2013/07/24/gsoc-week-5-report/"/>
    <updated>2013-07-24T12:36:00+03:00</updated>
    <id>http://NlightNFotis.github.io/blog/2013/07/24/gsoc-week-5-report</id>
    <content type="html"><![CDATA[<h1>A clue!</h1>

<p><strong>So last week we were left with the compiler test logs and the build results logs that we had to go through to checkout what was the root cause of all these failures in the gccgo test results, and more importantly in the libgo tests.</strong> So I went through the gccgo logs in search for a clue about why this may have happened. Here is the list of all the failures I compiled from the logs:</p>

<p>```</p>

<p>spawn [open &hellip;]^M
doubleselect.x: ./pthread/pt-create.c:167: <strong>pthread_create_internal: Assertion `({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_s      elf_ + 0), ktid); ok; })&lsquo; failed.
FAIL: go.test/test/chan/doubleselect.go execution,  -O2 -g</p>

<p>==========================================================</p>

<p>spawn [open &hellip;]^M
nonblock.x: ./pthread/pt-create.c:167: <strong>pthread_create_internal: Assertion `({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_self_       + 0), ktid); ok; })&lsquo; failed.
FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g</p>

<p>==========================================================</p>

<p>Executing on host: /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../  -fno-diagnostics-show-caret -fdiagnostics-color=never  -I/root/gcc_new/gccbuild/i68      6-unknown-gnu0.3/./libgo  -fsplit-stack -c  -o split_stack376.o split_stack376.c    (timeout = 300)
spawn /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ -fno-diagnostics-show-caret -fdiagnostics-color=never -I/root/gcc_new/gccbuild/i686-unknown-gnu0.      3/./libgo -fsplit-stack -c -o split_stack376.o split_stack376.c<sup>M</sup>
cc1: error: &lsquo;-fsplit-stack&rsquo; currently only supported on GNU/Linux<sup>M</sup>
cc1: error: &lsquo;-fsplit-stack&rsquo; is not supported by this compiler configuration<sup>M</sup>
compiler exited with status 1
output is:
 cc1: error: &lsquo;-fsplit-stack&rsquo; currently only supported on GNU/Linux<sup>M</sup>
 cc1: error: &lsquo;-fsplit-stack&rsquo; is not supported by this compiler configuration<sup>M</sup></p>

<p>UNTESTED: go.test/test/chan/select2.go</p>

<p>==========================================================</p>

<p>Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open &hellip;]^M
select3.x: ./pthread/../sysdeps/generic/sem-timedwait.c:50: <strong>sem_timedwait_internal: Assertion `({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate       ((</strong>mach_task_self_ + 0), ktid); ok; })&lsquo; failed.
Aborted</p>

<p>FAIL: go.test/test/chan/select3.go execution,  -O2 -g</p>

<p>==========================================================</p>

<p>Executing on host: /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ /root/gcc_new/gcc/gcc/testsuite/go.test/test/chan/select5.go  -fno-diagnostics-show-      caret -fdiagnostics-color=never  -I/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo  -O  -w  -pedantic-errors  -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -L/root/gcc_new/gccbuild/i686-unknown-      gnu0.3/./libgo/.libs  -lm   -o select5.exe    (timeout = 300)
spawn /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ /root/gcc_new/gcc/gcc/testsuite/go.test/test/chan/select5.go -fno-diagnostics-show-caret -fdiagno      stics-color=never -I/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -O -w -pedantic-errors -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.lib      s -lm -o select5.exe<sup>M</sup>
PASS: go.test/test/chan/select5.go -O (test for excess errors)
FAIL: go.test/test/chan/select5.go execution</p>

<p>==========================================================</p>

<p>Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open &hellip;]^M
bug147.x: ./pthread/../sysdeps/generic/sem-timedwait.c:50: <strong>sem_timedwait_internal: Assertion `({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate       ((</strong>mach_task_self_ + 0), ktid); ok; })&lsquo; failed.
Aborted</p>

<p>FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g</p>

<p>=========================================================</p>

<p>Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open &hellip;]^M
BUG: bug347: cannot find caller
Aborted</p>

<p>FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g</p>

<p>========================================================</p>

<p>Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open &hellip;]^M
BUG: bug348: cannot find caller
panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x2 addr=0x0]</p>

<p>goroutine 1 [running]:
FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g</p>

<p>========================================================</p>

<p>Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open &hellip;]^M
mallocfin.x: ./pthread/pt-create.c:167: <strong>pthread_create_internal: Assertion `({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_self      _ + 0), ktid); ok; })&lsquo; failed.
FAIL: go.test/test/mallocfin.go execution,  -O2 -g</p>

<p>=======================================================</p>

<p>Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open &hellip;]^M
Aborted</p>

<p>FAIL: go.test/test/nil.go execution,  -O2 -g</p>

<p>======================================================</p>

<p>Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open &hellip;]^M
Aborted</p>

<p>FAIL: go.test/test/recover3.go execution,  -O2 -g</p>

<p>```</p>

<p><em>See a pattern there?</em> Well certainly I do. In several occasions, the root cause for the fail is this:</p>

<p>``` c Assertion fail</p>

<p>Assertion `({ mach_port_t ktid = <strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; </strong>mach_port_deallocate       ((<em>_mach_task_self</em> + 0), ktid); ok; })&lsquo; failed.
```</p>

<p>Hmm&hellip; That&rsquo;s interesting. Let us go through the libgo results too.</p>

<p>```</p>

<p>Test Run By root on Fri Jul 12 17:56:44 UTC 2013
Native configuration is i686-unknown-gnu0.3</p>

<pre><code>    === libgo tests ===
</code></pre>

<p>a.out: ./pthread/pt-create.c:167: <strong>pthread_create_internal: Assertion <code>({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })' failed.
../../../gcc/libgo/testsuite/gotest: line 486: 10005 Aborted                 ./a.out -test.short -test.timeout=${timeout}s "$@"
FAIL: bufio
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10005) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion</code>({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_self<em> + 0), ktid); ok; })&lsquo; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 10637 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &ldquo;$@&rdquo;
FAIL: bytes
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10637) &ndash; No such process
a.out: ./pthread/pt-create.c:167: <strong>pthread_create_internal: Assertion <code>({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })' failed.
../../../gcc/libgo/testsuite/gotest: line 486: 10757 Aborted                 ./a.out -test.short -test.timeout=${timeout}s "$@"
FAIL: errors
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10757) - No such process
a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion</code>({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_self</em> + 0), ktid); ok; })&rsquo; failed.
Aborted</p>

<p>goroutine 1 [syscall]:
no stack trace available
FAIL: expvar
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10886) &ndash; No such process
a.out: ./pthread/pt-create.c:167: <strong>pthread_create_internal: Assertion <code>({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })' failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11058 Aborted                 ./a.out -test.short -test.timeout=${timeout}s "$@"
FAIL: flag
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11058) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion</code>({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_self<em> + 0), ktid); ok; })&lsquo; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11475 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &ldquo;$@&rdquo;
FAIL: fmt
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11475) &ndash; No such process
a.out: ./pthread/pt-create.c:167: <strong>pthread_create_internal: Assertion <code>({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })' failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11584 Aborted                 ./a.out -test.short -test.timeout=${timeout}s "$@"
FAIL: html
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11584) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion</code>({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_self</em> + 0), ktid); ok; })&rsquo; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11747 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &ldquo;$@&rdquo;
FAIL: image
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11747) &ndash; No such process
a.out: ./pthread/pt-create.c:167: <strong>pthread_create_internal: Assertion <code>({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })' failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11999 Aborted                 ./a.out -test.short -test.timeout=${timeout}s "$@"
FAIL: io
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11999) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion</code>({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_self<em> + 0), ktid); ok; })&lsquo; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 12116 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &ldquo;$@&rdquo;
FAIL: log
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (12116) &ndash; No such process
a.out: ./pthread/pt-create.c:167: <strong>pthread_create_internal: Assertion <code>({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })' failed.
../../../gcc/libgo/testsuite/gotest: line 486: 13107 Aborted                 ./a.out -test.short -test.timeout=${timeout}s "$@"
FAIL: math
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (13107) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion</code>({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_self</em> + 0), ktid); ok; })&rsquo; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 13271 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &ldquo;$@&rdquo;
FAIL: mime
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (13271) &ndash; No such process
a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: <strong>sem_timedwait_internal: Assertion `({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_self_ + 0), ktid); ok; })&lsquo; failed.
Aborted</p>

<p>goroutine 1 [chan receive]:
a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: <strong>sem_timedwait_internal: Assertion <code>({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })' failed.
panic during panic
testing.RunTestsFAIL: net
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (14234) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion</code>({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_self<em> + 0), ktid); ok; })&lsquo; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 14699 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &ldquo;$@&rdquo;
FAIL: os
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (14699) &ndash; No such process
a.out: ./pthread/pt-create.c:167: <strong>pthread_create_internal: Assertion `({ mach_port_t ktid = </strong>mach_thread_self (); int ok = thread->kernel_thread == ktid; <strong>mach_port_deallocate ((</strong>mach_task_self</em> + 0), ktid); ok; })&rsquo; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 14860 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &ldquo;$@&rdquo;
FAIL: path
timed out in gotest</p>

<p>&hellip;</p>

<p>runtest completed at Fri Jul 12 18:09:07 UTC 2013
```</p>

<p>That&rsquo;s certainly even more interesting. In case you haven&rsquo;t noticed, it&rsquo;s the same assertion that caused the failures in gccgo test suite. Let us find the offending code, shall we?</p>

<p>``` c libpthread/pthread/pt-create.c</p>

<p>/* Set the new thread&rsquo;s signal mask and set the pending signals to</p>

<pre><code> empty.  POSIX says: "The signal mask shall be inherited from the
 creating thread.  The set of signals pending for the new thread
 shall be empty."  If the currnet thread is not a pthread then we
 just inherit the process' sigmask.  */
</code></pre>

<p>  if (__pthread_num_threads == 1)</p>

<pre><code>err = sigprocmask (0, 0, &amp;sigset);
</code></pre>

<p>  else</p>

<pre><code>err = __pthread_sigstate (_pthread_self (), 0, 0, &amp;sigset, 0);
</code></pre>

<p>  assert_perror (err);</p>

<p>```</p>

<p>This seems to be the code that the logs point to. But no sign of the assertion. After discussing this issue with my peers in #hurd, I was told that the code I was looking for (the failing assertion), is getting inlined via <code>_pthread_self ()</code> and is actually located in <code>libpthread/sysdeps/mach/hurd/pt-sysdep.h</code>.</p>

<p>``` c libpthread/sysdeps/mach/hurd/pt-sysdep.h</p>

<p>extern <strong>thread struct </strong>pthread *___pthread_self;</p>

<h1>define _pthread_self()                                            \</h1>

<pre><code>({                                                         \
  struct __pthread *thread;                                \
                                                           \
  assert (__pthread_threads);                              \
  thread = ___pthread_self;                                \
                                                           \
  assert (thread);                                         \
  assert (({ mach_port_t ktid = __mach_thread_self ();     \
                 int ok = thread-&gt;kernel_thread == ktid;       \
                 __mach_port_deallocate (__mach_task_self (), ktid);\
                 ok; }));                                      \
      thread;                                                  \
     })
</code></pre>

<p>```</p>

<p>So this is what I was looking for. Further discussing it in the weekly IRC meeting, braunr provided me with some more clues:</p>

<blockquote><p>08:38:15 braunr> nlightnfotis: did i answer that ?<br/>
08:38:24 nlightnfotis> braunr: which one?<br/>
08:38:30 nlightnfotis> hello btw :)<br/>
08:38:33 braunr> the problems you&rsquo;re seeing are the pthread resources leaks i&rsquo;ve been trying to fix lately<br/>
08:38:58 braunr> they&rsquo;re not only leaks<br/>
08:39:08 braunr> creation and destruction are buggy <br/>
08:39:37 nlightnfotis> I have read so in <a href="http://www.gnu.org/software/hurd/libpthread.html.">http://www.gnu.org/software/hurd/libpthread.html.</a> I believe it&rsquo;s under Thread&rsquo;s Death right?<br/>
08:40:15 braunr> nlightnfotis: yes but it&rsquo;s buggy<br/>
08:40:22 braunr> and the description doesn&rsquo;t describe the bugs<br/>
08:41:02 nlightnfotis> so we will either have to find a temporary workaround, or better yet work on a fix, right?<br/>
08:41:12 braunr> nlightnfotis: i also told you the work around<br/>
08:41:16 braunr> nlightnfotis: create a thread pool</p></blockquote>

<h1>Work for next week</h1>

<p>This leaves us with next week&rsquo;s work, which is to hack in libpthread&rsquo;s code to attempt to create a thread pool, so that we avoid some of the issues that are present now with the current implementation of the Hurd libpthread code.</p>

<p>It was also suggested by Samuel Thibault (youpi) that I should run the libgo tests by hand and see if I get some more clues, like stack traces. It sounds like a good idea to me, so that&rsquo;s something that I will look into too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSOC: Week 4 report]]></title>
    <link href="http://NlightNFotis.github.io/blog/2013/07/15/gsoc-week-4-report/"/>
    <updated>2013-07-15T11:43:00+03:00</updated>
    <id>http://NlightNFotis.github.io/blog/2013/07/15/gsoc-week-4-report</id>
    <content type="html"><![CDATA[<h1>Yeah baby! It builds!</h1>

<p><strong>The highlight of this week&rsquo;s progress was managing to successfully build
gccgo under the Hurd.</strong>
Not only did it compile successfully, it also run its tests, with the
results <a href="http://lists.gnu.org/archive/html/bug-hurd/2013-06/msg00117.html">matching the ones provided by my mentor Thomas Schwinge</a>.
This was a checkpoint in my summer of code project. Successful building of
the compiler meant that I am (happily) in the position to carry on with the
next part (and the main one) of my project, that is, to make sure that
the <strong>go library (libgo) also passes all its tests
and works without any major issues.</strong></p>

<h1>So where are we now?</h1>

<h2>gccgo</h2>

<p>Compiling gccgo on the Hurd was big. But we also had to see how it
compared to the build that was successful on Linux. The most effective
way to compare the two builds, is to check the test results of the two.</p>

<p>Taking a look at the gccgo results on the Hurd, I was delighted to find
that it passed most of its tests. There were few that were failing, but
for the most part, it did well. Below are the test results of gccgo on the Hurd:</p>

<p>```</p>

<pre><code> === go Summary ===
</code></pre>

<h1>of expected passes        5069</h1>

<h1>of unexpected failures    11</h1>

<h1>of expected failures      1</h1>

<h1>of untested testcases     6</h1>

<p>/root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo  version 4.9.0 20130606 (experimental) (GCC)</p>

<p>```</p>

<p>So it&rsquo;s passing 99% of its tests. That&rsquo;s cool. But it could help to take a look
at the tests that are failing, to get an idea of what the fails are, how critical they are, etc</p>

<p>```
nlightnfotis@earth:~/HurdVM/HurdFiles$ grep -v ^PASS: &lt; go.sum
Test Run By root on Thu Jul 11 10:33:34 2013
Native configuration is i686-unknown-gnu0.3</p>

<pre><code>    === go tests ===

    Schedule of variations:
        unix

        Running target unix
        Running /root/gcc_new/gcc/gcc/testsuite/go.dg/dg.exp ...
        Running /root/gcc_new/gcc/gcc/testsuite/go.go-torture/execute/execute.exp ...
        Running /root/gcc_new/gcc/gcc/testsuite/go.test/go-test.exp ...
        FAIL: go.test/test/chan/doubleselect.go execution,  -O2 -g 
        FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g 
        UNTESTED: go.test/test/chan/select2.go
        FAIL: go.test/test/chan/select3.go execution,  -O2 -g 
        FAIL: go.test/test/chan/select5.go execution
        UNTESTED: go.test/test/closure.go
        FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g 
        FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g 
        FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g 
        XFAIL: bug429.go  -O2 -g  execution test
        FAIL: go.test/test/goprint.go execution
        UNTESTED: go.test/test/goprint.go compare
        UNTESTED: go.test/test/init1.go
        FAIL: go.test/test/mallocfin.go execution,  -O2 -g 
        FAIL: go.test/test/nil.go execution,  -O2 -g 
        FAIL: go.test/test/recover3.go execution,  -O2 -g 
        UNTESTED: go.test/test/rotate.go
        UNTESTED: go.test/test/stack.go

                === go Summary ===
</code></pre>

<h1>of expected passes        5069</h1>

<h1>of unexpected failures    11</h1>

<h1>of expected failures      1</h1>

<h1>of untested testcases     6</h1>

<p>/root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo  version 4.9.0 20130606 (experimental) (GCC)
```</p>

<p>Hmm. So these are the failing tests. Before we go through them, it might be a good idea
to check the status of the gccgo tests on the Linux build too. Let&rsquo;s see.</p>

<p>```
nlightnfotis@earth:~$ grep -v ^PASS: &lt; linux_go.sum
Test Run By fotis on Mon Jul 15 10:28:38 2013
Native configuration is i686-pc-linux-gnu</p>

<pre><code>    === go tests ===

    Schedule of variations:
        unix

        Running target unix
        Running /home/fotis/Software/gcc/gcc/testsuite/go.dg/dg.exp ...
        Running /home/fotis/Software/gcc/gcc/testsuite/go.go-torture/execute/execute.exp ...
        Running /home/fotis/Software/gcc/gcc/testsuite/go.test/go-test.exp ...
        UNTESTED: go.test/test/closure.go
        XFAIL: bug429.go  -O2 -g  execution test
        UNTESTED: go.test/test/init1.go
        UNTESTED: go.test/test/rotate.go

                === go Summary ===
</code></pre>

<h1>of expected passes        5183</h1>

<h1>of expected failures      1</h1>

<h1>of untested testcases     3</h1>

<p>/home/fotis/Software/gcc_build/gcc/testsuite/go/../../gccgo  version 4.9.0 20130702 (experimental) (GCC)
```</p>

<p>So, it seems like there are less tests failing here. But wait a minute. Those tests that are failing.
They are the same as with the Hurd build. So I can assume that we are left with 4 less tests to check
regarding their failures (Go on Linux works without any issues,so I guess it would be safe to skip those tests at the moment).
That leaves us with these tests to check:</p>

<p><code>
FAIL: go.test/test/chan/doubleselect.go execution,  -O2 -g
FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g
UNTESTED: go.test/test/chan/select2.go
FAIL: go.test/test/chan/select3.go execution,  -O2 -g
FAIL: go.test/test/chan/select5.go execution
FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g
FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g
FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g
FAIL: go.test/test/goprint.go execution
UNTESTED: go.test/test/goprint.go compare
FAIL: go.test/test/mallocfin.go execution,  -O2 -g
FAIL: go.test/test/nil.go execution,  -O2 -g
FAIL: go.test/test/recover3.go execution,  -O2 -g
UNTESTED: go.test/test/stack.go
</code></p>

<p>Discussing this with my mentor <a href="https://plus.google.com/101468009864620818344">Thomas Schwinge</a> in IRC (#hurd)</p>

<p><code>
&lt;tschwinge&gt; For now, please ignore any failing tests that have »select« in their name -- that is, do file them, but do not spend a lot of time figuring out what might be wrong there.
&lt;tschwinge&gt; The Hurd's select implementation is a bit of a beast, and I don't want you -- at this time -- spend a lot of time on that.  We already know there are some deficiencies, so we should postpone that to later.
</code></p>

<p>So that leaves us with even less tests to check:</p>

<p><code>
FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g
FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g
FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g
FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g
FAIL: go.test/test/goprint.go execution
UNTESTED: go.test/test/goprint.go compare
FAIL: go.test/test/mallocfin.go execution,  -O2 -g
FAIL: go.test/test/nil.go execution,  -O2 -g
FAIL: go.test/test/recover3.go execution,  -O2 -g
UNTESTED: go.test/test/stack.go
</code></p>

<p>Nice. <strong>This narrowed down the list of errors that I have to go through to make sure that gccgo
works as well on the Hurd as it does on Linux.</strong></p>

<h2>libgo</h2>

<p>So, we talked about gccgo, but what about the runtime libraries (libgo)? They are also getting
tested when we run <code>make check-go</code>and seeing as they are a vital part
of enabling programs written on go to run on the Hurd, we ought
to take a look. (This was also the original goal of my project proposal).</p>

<p>So let us see what we have at the libgo.sum:</p>

<p>```
Test Run By root on Fri Jul 12 17:56:44 UTC 2013
Native configuration is i686-unknown-gnu0.3</p>

<pre><code>    === libgo tests ===

    Schedule of variations:
        unix

        Running target unix
        Running ../../../gcc/libgo/libgo.exp ...
        FAIL: bufio
        FAIL: bytes
        FAIL: errors
        FAIL: expvar
        FAIL: flag
        FAIL: fmt
        FAIL: html
        FAIL: image
        FAIL: io
        FAIL: log
        FAIL: math
        FAIL: mime
        FAIL: net
        FAIL: os
        FAIL: path
        FAIL: reflect
        FAIL: regexp
        FAIL: runtime
        FAIL: sort
        FAIL: strconv
        FAIL: strings
        FAIL: sync
        FAIL: syscall
        FAIL: time
        FAIL: unicode
        FAIL: archive/tar
        FAIL: archive/zip
        FAIL: compress/bzip2
        FAIL: compress/flate
        FAIL: compress/gzip
        FAIL: compress/lzw
        FAIL: compress/zlib
        FAIL: container/heap
        FAIL: container/list
        FAIL: container/ring
        FAIL: crypto/aes
        FAIL: crypto/cipher
        FAIL: crypto/des
        FAIL: crypto/dsa
        FAIL: crypto/ecdsa
        FAIL: crypto/elliptic
        FAIL: crypto/hmac
        FAIL: crypto/md5
        FAIL: crypto/rand
        FAIL: crypto/rc4
        FAIL: crypto/rsa
        FAIL: crypto/sha1
        FAIL: crypto/sha256
        FAIL: crypto/sha512
        FAIL: crypto/subtle
        FAIL: crypto/tls
        FAIL: crypto/x509
        FAIL: database/sql
        FAIL: database/sql/driver
        FAIL: debug/dwarf
        FAIL: debug/elf
        FAIL: debug/macho
        FAIL: debug/pe
        FAIL: encoding/ascii85
        FAIL: encoding/asn1
        FAIL: encoding/base32
        FAIL: encoding/base64
        FAIL: encoding/binary
        FAIL: encoding/csv
        FAIL: encoding/gob
        FAIL: encoding/hex
        FAIL: encoding/json
        FAIL: encoding/pem
        PASS: encoding/xml
        FAIL: exp/cookiejar
        FAIL: exp/ebnf
        FAIL: exp/html
        FAIL: exp/html/atom
        FAIL: exp/locale/collate
        FAIL: exp/locale/collate/build
        FAIL: exp/norm
        FAIL: exp/proxy
        FAIL: exp/terminal
        FAIL: exp/utf8string
        FAIL: html/template
        FAIL: go/ast
        FAIL: go/doc
        FAIL: go/format
        FAIL: go/parser
        FAIL: go/printer
        FAIL: go/scanner
        FAIL: go/token
        FAIL: go/types
        FAIL: hash/adler32
        FAIL: hash/crc32
        FAIL: hash/crc64
        FAIL: hash/fnv
        FAIL: image/color
        FAIL: image/draw
        FAIL: image/jpeg
        FAIL: image/png
        FAIL: index/suffixarray
        FAIL: io/ioutil
        FAIL: log/syslog
        FAIL: math/big
        FAIL: math/cmplx
        FAIL: math/rand
        FAIL: mime/multipart
        FAIL: net/http
        FAIL: net/http/cgi
        FAIL: net/http/fcgi
        FAIL: net/http/httptest
        FAIL: net/http/httputil
        FAIL: net/mail
        FAIL: net/rpc
        FAIL: net/smtp
        FAIL: net/textproto
        FAIL: net/url
        FAIL: net/rpc/jsonrpc
        FAIL: old/netchan
        FAIL: old/regexp
        FAIL: old/template
        FAIL: os/exec
        FAIL: os/signal
        FAIL: os/user
        FAIL: path/filepath
        FAIL: regexp/syntax
        FAIL: runtime/pprof
        FAIL: sync/atomic
        FAIL: text/scanner
        FAIL: text/tabwriter
        FAIL: text/template
        FAIL: text/template/parse
        FAIL: testing/quick
        FAIL: unicode/utf16
        FAIL: unicode/utf8

                === libgo Summary ===
</code></pre>

<h1>of expected passes        1</h1>

<h1>of unexpected failures    130</h1>

<p>/root/gcc_new/gccbuild/./gcc/gccgo version 4.9.0 20130606 (experimental) (GCC)
```</p>

<p><strong>Oh boy!</strong> Oh boy! Well, on second thoughts, this was not unexpected.
<strong>This was the core of my GSOC work</strong>. This is how it starts :)</p>

<p>Before this goes any further, maybe we should visit the Linux test results too.</p>

<p>```</p>

<p>Test Run By fotis on Τρι 02 Ιούλ 2013 09:20:20 μμ EEST
Native configuration is i686-pc-linux-gnu</p>

<pre><code>    === libgo tests ===

    Schedule of variations:
        unix

        Running target unix
        Running ../../../gcc/libgo/libgo.exp ...
        PASS: bufio
        PASS: bytes
        ...

                === libgo Summary ===
</code></pre>

<h1>of expected passes        131</h1>

<p>/home/fotis/Software/gcc_build/./gcc/gccgo version 4.9.0 20130702 (experimental) (GCC)
```</p>

<p>Wow. Considering the results from the Hurd, they really are <strong>not</strong> unexpected. <a href="http://darnassus.sceen.net/~hurd-web/open_issues/gccgo/">Remember
that <strong>getcontext, makecontext, setcontext and swapcontext</strong> are not working as expected.</a></p>

<p>And recalling from an email from Ian Lance Taylor (the GCCgo maintainer, and a member of the Go team)
early in the summer:</p>

<blockquote><p>Go does require switching stacks.  A port of Go that doesn&rsquo;t support
goroutines would be useless&mdash;nothing in the standard library would
work</p></blockquote>

<h1>Conclusion / Work for next week.</h1>

<p><strong>So now it comes down to work on implementing correctly the context switching functions.</strong>
Apart from that, going through the test results that fail from gccgo is also something that
is to be done, however I am not sure that it should be a first priority. I also have to go
through go.log to see if there any clues as to why the gccgo tests fail.</p>

<p>Having finally built gccgo on the Hurd, and <strong>more importantly still being on schedule,
(the original one, from my proposal) means that I can now concentrate on the core part of my
project proposal (and the most exciting one too)</strong>, that is proper implementation
of what is <em>blocking effective context switching, which
in its part is blocking goroutines, without which, the go library will not work properly.</em></p>
]]></content>
  </entry>
  
</feed>
