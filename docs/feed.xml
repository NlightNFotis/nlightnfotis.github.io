<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-GB">
  <generator uri="http://jekyllrb.com" version="4.2.2">Jekyll</generator>
  
  
  <link href="https://nlightnfotis.github.io/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://nlightnfotis.github.io/" rel="alternate" type="text/html" hreflang="en-GB" />
  <updated>2023-01-15T11:16:27+00:00</updated>
  <id>https://nlightnfotis.github.io//</id>

  
    <title type="html">Lambda reflections</title>
  

  
    <subtitle>Functional Programming, Proofs, Bioinformatics and more.</subtitle>
  

  
    <author>
        <name>Fotis Koutoulakis</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">A Year In Review: 2022</title>
      
      
      <link href="https://nlightnfotis.github.io/2023/01/14/year-in-review-2022/" rel="alternate" type="text/html" title="A Year In Review: 2022" />
      
      <published>2023-01-14T00:00:00+00:00</published>
      <updated>2023-01-14T00:00:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2023/01/14/year-in-review-2022</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2023/01/14/year-in-review-2022/">&lt;h2&gt;Progress Review&lt;/h2&gt;

&lt;p&gt;Another year has come to a close, and so this time I decided to try a new
experiment - I’ll author a public review of my year.&lt;/p&gt;

&lt;p&gt;The yearly review is not a new concept for me (if you recall from hints in previous
posts, I’m hugely into quantified self and various metrics and reflection processes).
But a public one (sharing where I am in real time) is new.&lt;/p&gt;

&lt;p&gt;The experimental side of it is based on the fact that by laying my progress bare,
I hope that I can connect with other people on a similar journey, or at the very
least provide a template for other people who may be inspired to set out on a similar
journey (I have been inspired by others in various subdomains in the past, and
hope to pay it forward this way).&lt;/p&gt;

&lt;p&gt;I will run through this in the same way that I go about my usual yearly reviews, enlisting
various accomplishments into various buckets that I call &lt;em&gt;“progress subdomains”&lt;/em&gt;,
which are various domains in which I want to broadly improve (and which align with
my long-term vision for myself).&lt;/p&gt;

&lt;p&gt;I will also be providing some background as we go through the various buckets,
to help contextualise both the aims and the activities surrounding these buckets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlights&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1409&lt;/strong&gt; total self improvement hours, new yearly record&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/user_challenges/31040356&quot;&gt;&lt;strong&gt;78&lt;/strong&gt; books read during the year&lt;/a&gt;,
new yearly record&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;4&lt;/strong&gt; new programming languages engaged with&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What went well&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Significant progress in self-improvement capacity, afforded by the greater focus
allowed by living alone for the first time in a while in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o2.Flutter&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;On the same note, managed to clock in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1409&lt;/code&gt; hours of self improvement,
against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1290&lt;/code&gt; hours in 2021, which was already a record year on its own.&lt;/li&gt;
  &lt;li&gt;Significant time spent on improving CS skills, while also improving rapidly
across Biology/Chemistry.&lt;/li&gt;
  &lt;li&gt;Uptake of musical capacity, spending significant time on practicing singing,
guitar, piano and learning music theory.&lt;/li&gt;
  &lt;li&gt;Reinitiation of my dancing training - this time through &lt;a href=&quot;https://www.steezy.co&quot;&gt;Steezy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Furnishing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o2.Flutter&lt;/code&gt; is 95% complete.&lt;/li&gt;
  &lt;li&gt;Improvements in financial posturing throughout the year.&lt;/li&gt;
  &lt;li&gt;Delivered above expectations at work, setting expectations for promotions/salary
increases in 2023.&lt;/li&gt;
  &lt;li&gt;Recommitted in Q1/22 to improve my Spanish knowledge, and managed to clock in
over 50 hours of study during the year.&lt;/li&gt;
  &lt;li&gt;Improved processes for managing my time, including running my personal life
in terms of sprints.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What didn’t go well&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Acquisition of R&amp;amp;G facility &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o2.Flutter&lt;/code&gt; had initially caused significant
financial strain, applying a lot of liquidity pressure in early 2022, and
acquiring significant debt load in attempt to rapidly furnish it.&lt;/li&gt;
  &lt;li&gt;Financial markets turmoil materialised after the closing of the acquisition
of the R&amp;amp;G facility, but this meant that while I was spared the brunt of the
market decline marking losses on my assets, I also didn’t go very far in terms
of net worth growth, as asset prices declined while I was committing more
money in the markets.&lt;/li&gt;
  &lt;li&gt;Most of my acquantainces leaving Oxford during the 2020 pandemic meant that
I now find myself with a significantly diminished (in terms of size) social circle
in Oxford. This hasn’t presented itself as a major challenge yet, and some
measures have been taken to ameliorate any future risks here, but I’m mindful of it.&lt;/li&gt;
  &lt;li&gt;I’m not a huge club person, but I appeared in one earlier this year, begrudgingly
brought by some newly acquired set of acquaintances. I was a &lt;em&gt;stick&lt;/em&gt; - unable
to move at all. This was &lt;em&gt;unacceptable&lt;/em&gt; for two reasons: 1) I spent 3 years doing
latin dancing very dilligently, and 2) I intend to become a pop singer in the
future and dancing is a huge part of stage presence.
    &lt;ul&gt;
      &lt;li&gt;(This was what prompted my getting into dancing again as highlighted in the
list above.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;In Greater Detail&lt;/h2&gt;

&lt;h2&gt;o2.Flutter&lt;/h2&gt;

&lt;p&gt;In late 2021, I closed on a transaction to acquire a new appartment in Oxford,
to use as my new base of operation (work from home, practicing music, studying, etc).&lt;/p&gt;

&lt;p&gt;Bases of operation are technically categorised as &lt;em&gt;Research &amp;amp; Growth Facilities&lt;/em&gt; by
me (because I’m a nerd, and because I like to mentally picture them as labs/facilities
for improvement rather than a place for being chillaxed and tardy), so this one has
been symbollically codenamed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o2.Flutter&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o2&lt;/code&gt; is a nod to this being the second place
in Oxford that I expect to spend quite some time in, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flutter&lt;/code&gt; is symbolising
that this is going to allow me to fly higher. :)&lt;/p&gt;

&lt;p&gt;After closing, I quickly flew to Greece for some administrative work there, which
meant that I moved in when I came back some time in early 2022.&lt;/p&gt;

&lt;p&gt;This was easily one of the best moves I’ve done in my life thus far, for a variety
of reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’m a bit unusual (in lack of a better word) in a lot of ways, which means
that it made it harder for me to live with others in a houseshare.
    &lt;ul&gt;
      &lt;li&gt;This had become such a big issue for me, as I was in my late 20s and living
with students in houseshares, who… have a different lifestyle. This means
that living with them as a working professional, especially one working from
home is untenable, to the point where I had an internal deadline of solving
the housing problem before I hit my 30 year birthday or I would leave Oxford
(and potentially England) for good.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The appartment is a new-built, with all the goodies these come with, and especially:
&lt;em&gt;soundproofing&lt;/em&gt;. This means that I can practice my music without bothering anyone.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I have a room dedicated to being the &lt;em&gt;home office&lt;/em&gt;. This is a huge part of what I
want from my R&amp;amp;G facilities going forward. It ended up being amazing in synergy
with the fact that both the company I work at and the industry at large are moving
towards a more permanent &lt;em&gt;Work From Home&lt;/em&gt; regime.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s also great in that compared to the work office, I can zone in and become focused
on a task at hand at a much more rapid pace, skyrocketing my productivity both
at work and at self-improvement endeavours, like reading for information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;It’s also great to have an enclosed space which I can shape up however I want,
and can apply my standards to. No more kitchen in a mess because someone else
cooked and couldn’t be arsed to clean up because he had to play some video games :)
    &lt;ul&gt;
      &lt;li&gt;This fact alone has contributed massively to my general lack of anger and
tranquility that I enjoy these days.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;And, perhaps most importantly, the lack of distractions/commuting means that
I can spend unreal amounts of time engaging with self-improvement activities
(practicing instruments, reading books, practicing programming, working out
at home, etc), that is further compounding my general level of happiness/direction/fulfilment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, buying a house, especially in Oxford, comes with a whole swath
of new challenges, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There’s a significant financial outlay in the beginning. Not only for the property
itself, but paying conveyancers, mortgage arrangement fees, taxes, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There’s also the problem of furnishing the place. It’s expensive. It’s even
worse if you have to furnish a new (i.e. empty) house against the backdrop
of a 10-year high inflationary spike, and severely disrupted supply chains
(most of furniture ended up being delivered with a significant delay).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To afford a place that’s close to my specification for an R&amp;amp;G facility, I had
to buy somewhere at the edges of Oxford, which means that the few times when
I have to commute, commuting takes much longer now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s also generally much more expensive having a house - I’m now financially
responsible for everything here (all bills, potential damage or substitution of
devices, etc), which is something you don’t have to concern yourself with
as much when renting.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, the biggest challenge is that owning the facility itself has increased
my outlay for housing costs by about 2x, but of course, for me personally, it
was worth it (and then some) if I take into account all of the new capacity
for self-improvement that it affords me.&lt;/p&gt;

&lt;h2&gt;Intellectual Progress&lt;/h2&gt;

&lt;p&gt;It’s hard to quantify my improvement in terms of intellectual prowess,
seeing as it doesn’t lend itself easily to any sort of quantification, at least
not one that is broad within different subdomains (I can’t say I became &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x %&lt;/code&gt;
better in Chemistry this year with accuracy).&lt;/p&gt;

&lt;p&gt;But what I can do (and what I actually do) is measure what I call &lt;em&gt;mini-achievements&lt;/em&gt;,
which are more or less what it sounds like: micro-checkpoints across the larger roadmap,
which show me that while I’m not there yet, I’m moving in the right direction. The
thinking behind this is that after accumulating a lot of those within a subdomain,
I should have enough obvious progress (say, if you’ve read a number of books in Chemistry,
in a focused and mindful way, over time your Chemistry knowledge is bound to accumulate).&lt;/p&gt;

&lt;h3&gt;Programming/CS&lt;/h3&gt;

&lt;p&gt;Let’s start with my primary subdomain of focus: &lt;strong&gt;Programming/CS&lt;/strong&gt;. This is because
I spend a relatively large amount of time reading/practicing/improving my skills in
Programming every year - well, it is how I make the majority of my living these days
in any case.&lt;/p&gt;

&lt;p&gt;(I lump Programming/CS in the same bucket, not because they are the same, but because
they fall within the same self-improvement bucket for me, so I’m studying both interchangeably
enough that I can consider them one thing).&lt;/p&gt;

&lt;p&gt;In 2022, I spent about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;347&lt;/code&gt; hours studying CS, representing about 25% of the total
time spent self-improving in 2022. In that time, I did the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Engaged with four new languages during the year, &lt;em&gt;Ruby&lt;/em&gt;, &lt;em&gt;Clojure&lt;/em&gt;, &lt;em&gt;Haskell&lt;/em&gt; and &lt;em&gt;Rust&lt;/em&gt;.
    &lt;ul&gt;
      &lt;li&gt;Parts of this work immediately paid off - I engaged with a relatively big
piece of work in Rust at work, which was to build to expose a Rust-based
API for CBMC. The first PR is at &lt;a href=&quot;https://github.com/diffblue/cbmc/pull/7410&quot;&gt;cbmc#7410&lt;/a&gt;.
        &lt;ul&gt;
          &lt;li&gt;I’m especially proud of my work in this project - the code represents my early
understanding of Rust, which I’m bound to look back over time and cringe, but
it was FFI work (i.e. very hard to debug) in a language that I had a cursory
understanding of, delivered in a very tight deadline (less than two sprints).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Improved my understanding of testing, diving deeper into &lt;em&gt;TDD&lt;/em&gt; and &lt;em&gt;Property-based testing&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Improved my understanding of &lt;em&gt;functional-design&lt;/em&gt; and &lt;em&gt;object-oriented design&lt;/em&gt;,
picking up on a couple of software-engineering and software-architecture books.&lt;/li&gt;
  &lt;li&gt;Worked on a few compilers/interpreters written in a variety of languages
(Go, F# and C spring to mind).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Chemistry/Biology&lt;/h3&gt;

&lt;p&gt;My long term aspirations is to found a biotech company. To that end, in 2022
I took big action towards advancing my scientific understanding of &lt;strong&gt;Biology&lt;/strong&gt;.
That was accompanied by a lot of time spent studying &lt;strong&gt;Chemistry&lt;/strong&gt; as well - the
fields seem to have a similar relationship to each other as do Computer Science
and Maths.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;2022&lt;/em&gt; I spent about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;166&lt;/code&gt; hours studying Biology and Chemistry (about 12% of
total self-improvement time) and in that time I:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/05/12/reflections-on-learning-how-to-grow-almost-anything/&quot;&gt;Attended a synthetic biology course by MIT&lt;/a&gt;,
which forced me to read and pick up a lot on molecular biology/chemistry at an
accelerated timeframe.
    &lt;ul&gt;
      &lt;li&gt;In the course’s final project, I focused on immunology, which is another subfield
of biology I ended up being fascinated of. Expect to hear more on this from me.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This was accompanied by a lot of hours spent on Khan Academy’s Chemistry/Biology
courses, as well as on Youtube, watching educational videos such as the ones by
the &lt;a href=&quot;https://www.youtube.com/@AmoebaSisters&quot;&gt;Amoeba Sisters&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;As an aside, up until last year, I underestimated the value of Youtube, having
it associated with music/gamers/memes/lolcats in my mind, thinking it to be worthless
for any serious pursuit.&lt;/p&gt;

        &lt;p&gt;Turns out I was wrong, and there’s some serious content creators there that
make your life significantly easier as you try to wrap yourself around some
complicated concepts. I wish I had discovered that earlier, though there’s only
myself to blame in this case.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Economics/Investing&lt;/h3&gt;

&lt;p&gt;I started self-studying &lt;strong&gt;Economics&lt;/strong&gt; and investing when I first moved to England,
some 5 years ago. I started studying it at that point because I felt like my
future job aspirations (Biotech founder) couldn’t be fulfilled without at least
a rudimentary understanding of economics, as I felt of a company as an entity
not existing within a vaccuum, but as something existing within a larger context,
the economy.&lt;/p&gt;

&lt;p&gt;Years later, while I definitely feel that it’s true that a company is tied
to a macroeconomic context (much like Closures in programming are bound to the
enclosing environment), I’m not sure how much of an economics science understanding
a founder actually needs - but it turned out great for me personally, because I
found the way of thinking that economics promotes to have great synergy with my
CS/engineering education, along with how I like to think naturally.&lt;/p&gt;

&lt;p&gt;At this point, I feel like my understanding of Economics is very robust (I would
like to think that I’m approaching, if I haven’t surpassed, the understanding of
a Economics undergraduate).&lt;/p&gt;

&lt;p&gt;Despite this, I continue reading books and articles (which I haven’t been dilligent
in tracking, to be honest) in an effort to make my Economics mental models be
more robust.&lt;/p&gt;

&lt;p&gt;Of course, it’s hard to study Economics without being at least made aware of
a sister field, &lt;strong&gt;Investing&lt;/strong&gt;. This is my second love, in par with Economics. Because
of their close relationship, and how I utilise my knowledge within these fields
in my life right now, I consider them to fall within the same bucket.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Got a number of books read on Investing/Economics this year.&lt;/li&gt;
  &lt;li&gt;Read an innumerable amount of articles on various media forms (papers, blog posts, etc).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Spanish&lt;/h3&gt;

&lt;p&gt;Part of my self-improvement regime demands that I learn new languages, for a
number of reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They help me become a more cultured and sophisticated person,&lt;/li&gt;
  &lt;li&gt;They build me into a more round and multifaceted person instead of being
a one-trick-pony.&lt;/li&gt;
  &lt;li&gt;Being able to speak multiple languages is an emblem of prowess in the self-improvement
circles - compared to other more superficial things, like say, wealth, noone can gift
you a foreign language. You have to put in the work to learn it. Hundreds of hours of it.
This (to me and others) commands a lot of respect, and generates a lot of confidence
and self respect.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I had started with Spanish some years ago, primarily because my native tongue is Greek
and Spanish is very close to it, both from a phoneme (people mistake me for a Spaniard
when I do speak the little that I speak) and from a grammar standpoint.&lt;/p&gt;

&lt;p&gt;This past year I committed to take it further, and I started learning Spanish again sometime
in Q1/22, and took the habit across all of 2022, spending a total of about 57 hours total
(about 4% of total) learning in a variety of ways (primarily through &lt;a href=&quot;https://www.duolingo.com/profile/FotisKoutoulakis&quot;&gt;Duolingo&lt;/a&gt;,
but also using books and going to language exchange meetups.)&lt;/p&gt;

&lt;h3&gt;Mathematics/Philosophy&lt;/h3&gt;

&lt;p&gt;These two don’t fall within the same bucket for me from a self-improvement standpoint,
but I list them this way here because I’m at a point where I’m studying these purely
from an intellectual standpoint (I don’t do philosophy in any professional capacity,
and I appear to know enough Maths to get by professionally - though I’m always keen
to learn more.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In both of these areas, many books/papers/exercises were read/done.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Music&lt;/h2&gt;

&lt;p&gt;I keep no secret that one of my “side quests” in life is developing my musical
capabilities to the point where I could pursue a career as a professional musician.&lt;/p&gt;

&lt;p&gt;This was a dream of mine ever since I was a teenager, and even though I was
taking singing lessons in the past, I never looked at music seriously enough
as a pursuit.&lt;/p&gt;

&lt;p&gt;That was, until about 2020 and the beginning of the pandemic, when I bought
myself a small space piano just as the initial lockdowns were announced in
the U.K.&lt;/p&gt;

&lt;p&gt;Ever since I have been spending a significant amount of time in developing
my music skills every year (about 20% of total), but in 2022 and going forward,
I want more time spent so that improvement is coming at an accelerated pace.&lt;/p&gt;

&lt;p&gt;Highlights for 2022 include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Establishment of more consistent practice habits for guitar and singing.&lt;/li&gt;
  &lt;li&gt;Continuation of my piano practice.&lt;/li&gt;
  &lt;li&gt;Deeper diving into music theory and a small initial foray into composition.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Fitness&lt;/h2&gt;

&lt;p&gt;In terms of &lt;strong&gt;Fitness&lt;/strong&gt;, 2022 was an about average year. No significant weight
swings, with my mass being in the range of 63-64kg, and I managed to keep a
relatively lean physique, of about 13-10% body fat ratio throughout the year
(with a kilo gain between some holiday periods, when I let myself loose for
a week or two).&lt;/p&gt;

&lt;p&gt;In terms of the average day, both my diet and my fitness regime can be characterised
as &lt;em&gt;robust&lt;/em&gt;, or at least &lt;em&gt;adequate&lt;/em&gt; for my long term vision. Despite this,
however, a small effort had been put in enhancing my understanding and knowledge
around sports science and nutrition, with an aim of bringing a small improvement
on a going forward basis.&lt;/p&gt;

&lt;p&gt;Given that my regime is robust as it stands, any improvements are not directly
observable, not at this point at least.&lt;/p&gt;

&lt;h2&gt;Financial posture&lt;/h2&gt;

&lt;p&gt;I opened 2022 having just closed (at the end of Dec 2021) a significant transaction
to acquire R&amp;amp;G &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flutter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While this allowed for a number of benefits (as I have outlined in previous paragraphs),
it also had an unfortunate side effect of requiring massive capital outlays (at least
for my finances) and depleting liquidity sources, getting me to experience significant
cash crunches in early 2022.&lt;/p&gt;

&lt;p&gt;Thankfully those subsided over time, as I adjusted to the new cash outflow regime, and
my cash flows improved due to a variety of reasons (raises at work, U.K government energy
subsidy-support, etc).&lt;/p&gt;

&lt;p&gt;However, I also had to finance some furniture which ended up requiring significant percentage
of my cash flows into servicing debt in 2022. This has now subsided somewhat, primarilly
because the brunt of it has been paid, but there’s still some long term debt that’s not
completely of my books yet, and probably won’t be for the next 2-3 years.&lt;/p&gt;

&lt;p&gt;I will also remiss not to mention that I did actually observe the inflationary spike eating
a bit into my discretionary income, around the summer time and onwards, which added some
further pressure.&lt;/p&gt;

&lt;p&gt;In terms of other portfolios I had, despite having liquidated the majority of my holdings
to acquire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flutter&lt;/code&gt;, there was still exposure to the market conditions from some portfolios
that I can’t touch (say Workplace Pension, etc) and some illiquid portfolios (private holdings
through Crowdcube for instance), I was still a bit affected over the year in terms of total
net worth, which for the year remained flat (under most reasonable assumptions/mark to model).&lt;/p&gt;

&lt;p&gt;This was a bit disappointing, as my finances are a relatively chunky picture of my life, and
one that I’m personally very proud of, but it would be naive not to expect some down years,
and to be completely honest, I have to be thankful that it remained this way and didn’t experience
significant losses.&lt;/p&gt;

&lt;p&gt;On the plus side, the lack of progress on a financial front was counterbalanced by my
progress in other areas, so there was no psychological impact on me as well.&lt;/p&gt;

&lt;p&gt;2022 was a colourful year as far as my financial posturing is concerned, with the following
highlights&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Got depleted liquidity sources to be back up to a level considered adequate.&lt;/li&gt;
  &lt;li&gt;Got to the point where I can start outlaying some cash for investments again.&lt;/li&gt;
  &lt;li&gt;Started contributing more (%-wise) of my income to pension accounts.&lt;/li&gt;
  &lt;li&gt;Started directing future investments into cash-flow producing assets, with
an aim to medium/long term have a dividend portfolio.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This has been a long one, and I probably have to cut it short somewhere around here,
to preserve the interest of any reader and not bore them with details about my life.&lt;/p&gt;

&lt;p&gt;All in all, I would call 2022 a fairly productive year, despite some of the headwinds
observed in some of the progress subdomains.&lt;/p&gt;

&lt;p&gt;I will probably author another post laying out my aims for the year ahead.&lt;/p&gt;

&lt;p&gt;For now, so long, and wish both you and me a most productive/successful 2023.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="year-in-review" />
      

      
        <summary type="html">Progress Review Another year has come to a close, and so this time I decided to try a new experiment - I’ll author a public review of my year. The yearly review is not a new concept for me (if you recall from hints in previous posts, I’m hugely into quantified self and various metrics and reflection processes). But a public one (sharing where I am in real time) is new. The experimental side of it is based on the fact that by laying my progress bare, I hope that I can connect with other people on a similar journey, or at the very least provide a template for other people who may be inspired to set out on a similar journey (I have been inspired by others in various subdomains in the past, and hope to pay it forward this way). I will run through this in the same way that I go about my usual yearly reviews, enlisting various accomplishments into various buckets that I call “progress subdomains”, which are various domains in which I want to broadly improve (and which align with my long-term vision for myself). I will also be providing some background as we go through the various buckets, to help contextualise both the aims and the activities surrounding these buckets. Highlights 1409 total self improvement hours, new yearly record 78 books read during the year, new yearly record 4 new programming languages engaged with What went well Significant progress in self-improvement capacity, afforded by the greater focus allowed by living alone for the first time in a while in o2.Flutter. On the same note, managed to clock in 1409 hours of self improvement, against 1290 hours in 2021, which was already a record year on its own. Significant time spent on improving CS skills, while also improving rapidly across Biology/Chemistry. Uptake of musical capacity, spending significant time on practicing singing, guitar, piano and learning music theory. Reinitiation of my dancing training - this time through Steezy Furnishing o2.Flutter is 95% complete. Improvements in financial posturing throughout the year. Delivered above expectations at work, setting expectations for promotions/salary increases in 2023. Recommitted in Q1/22 to improve my Spanish knowledge, and managed to clock in over 50 hours of study during the year. Improved processes for managing my time, including running my personal life in terms of sprints. What didn’t go well Acquisition of R&amp;amp;G facility o2.Flutter had initially caused significant financial strain, applying a lot of liquidity pressure in early 2022, and acquiring significant debt load in attempt to rapidly furnish it. Financial markets turmoil materialised after the closing of the acquisition of the R&amp;amp;G facility, but this meant that while I was spared the brunt of the market decline marking losses on my assets, I also didn’t go very far in terms of net worth growth, as asset prices declined while I was committing more money in the markets. Most of my acquantainces leaving Oxford during the 2020 pandemic meant that I now find myself with a significantly diminished (in terms of size) social circle in Oxford. This hasn’t presented itself as a major challenge yet, and some measures have been taken to ameliorate any future risks here, but I’m mindful of it. I’m not a huge club person, but I appeared in one earlier this year, begrudgingly brought by some newly acquired set of acquaintances. I was a stick - unable to move at all. This was unacceptable for two reasons: 1) I spent 3 years doing latin dancing very dilligently, and 2) I intend to become a pop singer in the future and dancing is a huge part of stage presence. (This was what prompted my getting into dancing again as highlighted in the list above.) In Greater Detail o2.Flutter In late 2021, I closed on a transaction to acquire a new appartment in Oxford, to use as my new base of operation (work from home, practicing music, studying, etc). Bases of operation are technically categorised as Research &amp;amp; Growth Facilities by me (because I’m a nerd, and because I like to mentally picture them as labs/facilities for improvement rather than a place for being chillaxed and tardy), so this one has been symbollically codenamed o2.Flutter. o2 is a nod to this being the second place in Oxford that I expect to spend quite some time in, and Flutter is symbolising that this is going to allow me to fly higher. :) After closing, I quickly flew to Greece for some administrative work there, which meant that I moved in when I came back some time in early 2022. This was easily one of the best moves I’ve done in my life thus far, for a variety of reasons: I’m a bit unusual (in lack of a better word) in a lot of ways, which means that it made it harder for me to live with others in a houseshare. This had become such a big issue for me, as I was in my late 20s and living with students in houseshares, who… have a different lifestyle. This means that living with them as a working professional, especially one working from home is untenable, to the point where I had an internal deadline of solving the housing problem before I hit my 30 year birthday or I would leave Oxford (and potentially England) for good. The appartment is a new-built, with all the goodies these come with, and especially: soundproofing. This means that I can practice my music without bothering anyone. I have a room dedicated to being the home office. This is a huge part of what I want from my R&amp;amp;G facilities going forward. It ended up being amazing in synergy with the fact that both the company I work at and the industry at large are moving towards a more permanent Work From Home regime. It’s also great in that compared to the work office, I can zone in and become focused on a task at hand at a much more rapid pace, skyrocketing my productivity both at work and at self-improvement endeavours, like reading for information. It’s also great to have an enclosed space which I can shape up however I want, and can apply my standards to. No more kitchen in a mess because someone else cooked and couldn’t be arsed to clean up because he had to play some video games :) This fact alone has contributed massively to my general lack of anger and tranquility that I enjoy these days. And, perhaps most importantly, the lack of distractions/commuting means that I can spend unreal amounts of time engaging with self-improvement activities (practicing instruments, reading books, practicing programming, working out at home, etc), that is further compounding my general level of happiness/direction/fulfilment. Of course, buying a house, especially in Oxford, comes with a whole swath of new challenges, including: There’s a significant financial outlay in the beginning. Not only for the property itself, but paying conveyancers, mortgage arrangement fees, taxes, etc. There’s also the problem of furnishing the place. It’s expensive. It’s even worse if you have to furnish a new (i.e. empty) house against the backdrop of a 10-year high inflationary spike, and severely disrupted supply chains (most of furniture ended up being delivered with a significant delay). To afford a place that’s close to my specification for an R&amp;amp;G facility, I had to buy somewhere at the edges of Oxford, which means that the few times when I have to commute, commuting takes much longer now. It’s also generally much more expensive having a house - I’m now financially responsible for everything here (all bills, potential damage or substitution of devices, etc), which is something you don’t have to concern yourself with as much when renting. Overall, the biggest challenge is that owning the facility itself has increased my outlay for housing costs by about 2x, but of course, for me personally, it was worth it (and then some) if I take into account all of the new capacity for self-improvement that it affords me. Intellectual Progress It’s hard to quantify my improvement in terms of intellectual prowess, seeing as it doesn’t lend itself easily to any sort of quantification, at least not one that is broad within different subdomains (I can’t say I became x % better in Chemistry this year with accuracy). But what I can do (and what I actually do) is measure what I call mini-achievements, which are more or less what it sounds like: micro-checkpoints across the larger roadmap, which show me that while I’m not there yet, I’m moving in the right direction. The thinking behind this is that after accumulating a lot of those within a subdomain, I should have enough obvious progress (say, if you’ve read a number of books in Chemistry, in a focused and mindful way, over time your Chemistry knowledge is bound to accumulate). Programming/CS Let’s start with my primary subdomain of focus: Programming/CS. This is because I spend a relatively large amount of time reading/practicing/improving my skills in Programming every year - well, it is how I make the majority of my living these days in any case. (I lump Programming/CS in the same bucket, not because they are the same, but because they fall within the same self-improvement bucket for me, so I’m studying both interchangeably enough that I can consider them one thing). In 2022, I spent about 347 hours studying CS, representing about 25% of the total time spent self-improving in 2022. In that time, I did the following: Engaged with four new languages during the year, Ruby, Clojure, Haskell and Rust. Parts of this work immediately paid off - I engaged with a relatively big piece of work in Rust at work, which was to build to expose a Rust-based API for CBMC. The first PR is at cbmc#7410. I’m especially proud of my work in this project - the code represents my early understanding of Rust, which I’m bound to look back over time and cringe, but it was FFI work (i.e. very hard to debug) in a language that I had a cursory understanding of, delivered in a very tight deadline (less than two sprints). Improved my understanding of testing, diving deeper into TDD and Property-based testing. Improved my understanding of functional-design and object-oriented design, picking up on a couple of software-engineering and software-architecture books. Worked on a few compilers/interpreters written in a variety of languages (Go, F# and C spring to mind). Chemistry/Biology My long term aspirations is to found a biotech company. To that end, in 2022 I took big action towards advancing my scientific understanding of Biology. That was accompanied by a lot of time spent studying Chemistry as well - the fields seem to have a similar relationship to each other as do Computer Science and Maths. In 2022 I spent about 166 hours studying Biology and Chemistry (about 12% of total self-improvement time) and in that time I: Attended a synthetic biology course by MIT, which forced me to read and pick up a lot on molecular biology/chemistry at an accelerated timeframe. In the course’s final project, I focused on immunology, which is another subfield of biology I ended up being fascinated of. Expect to hear more on this from me. This was accompanied by a lot of hours spent on Khan Academy’s Chemistry/Biology courses, as well as on Youtube, watching educational videos such as the ones by the Amoeba Sisters. As an aside, up until last year, I underestimated the value of Youtube, having it associated with music/gamers/memes/lolcats in my mind, thinking it to be worthless for any serious pursuit. Turns out I was wrong, and there’s some serious content creators there that make your life significantly easier as you try to wrap yourself around some complicated concepts. I wish I had discovered that earlier, though there’s only myself to blame in this case. Economics/Investing I started self-studying Economics and investing when I first moved to England, some 5 years ago. I started studying it at that point because I felt like my future job aspirations (Biotech founder) couldn’t be fulfilled without at least a rudimentary understanding of economics, as I felt of a company as an entity not existing within a vaccuum, but as something existing within a larger context, the economy. Years later, while I definitely feel that it’s true that a company is tied to a macroeconomic context (much like Closures in programming are bound to the enclosing environment), I’m not sure how much of an economics science understanding a founder actually needs - but it turned out great for me personally, because I found the way of thinking that economics promotes to have great synergy with my CS/engineering education, along with how I like to think naturally. At this point, I feel like my understanding of Economics is very robust (I would like to think that I’m approaching, if I haven’t surpassed, the understanding of a Economics undergraduate). Despite this, I continue reading books and articles (which I haven’t been dilligent in tracking, to be honest) in an effort to make my Economics mental models be more robust. Of course, it’s hard to study Economics without being at least made aware of a sister field, Investing. This is my second love, in par with Economics. Because of their close relationship, and how I utilise my knowledge within these fields in my life right now, I consider them to fall within the same bucket. Got a number of books read on Investing/Economics this year. Read an innumerable amount of articles on various media forms (papers, blog posts, etc). Spanish Part of my self-improvement regime demands that I learn new languages, for a number of reasons: They help me become a more cultured and sophisticated person, They build me into a more round and multifaceted person instead of being a one-trick-pony. Being able to speak multiple languages is an emblem of prowess in the self-improvement circles - compared to other more superficial things, like say, wealth, noone can gift you a foreign language. You have to put in the work to learn it. Hundreds of hours of it. This (to me and others) commands a lot of respect, and generates a lot of confidence and self respect. I had started with Spanish some years ago, primarily because my native tongue is Greek and Spanish is very close to it, both from a phoneme (people mistake me for a Spaniard when I do speak the little that I speak) and from a grammar standpoint. This past year I committed to take it further, and I started learning Spanish again sometime in Q1/22, and took the habit across all of 2022, spending a total of about 57 hours total (about 4% of total) learning in a variety of ways (primarily through Duolingo, but also using books and going to language exchange meetups.) Mathematics/Philosophy These two don’t fall within the same bucket for me from a self-improvement standpoint, but I list them this way here because I’m at a point where I’m studying these purely from an intellectual standpoint (I don’t do philosophy in any professional capacity, and I appear to know enough Maths to get by professionally - though I’m always keen to learn more.) In both of these areas, many books/papers/exercises were read/done. Music I keep no secret that one of my “side quests” in life is developing my musical capabilities to the point where I could pursue a career as a professional musician. This was a dream of mine ever since I was a teenager, and even though I was taking singing lessons in the past, I never looked at music seriously enough as a pursuit. That was, until about 2020 and the beginning of the pandemic, when I bought myself a small space piano just as the initial lockdowns were announced in the U.K. Ever since I have been spending a significant amount of time in developing my music skills every year (about 20% of total), but in 2022 and going forward, I want more time spent so that improvement is coming at an accelerated pace. Highlights for 2022 include: Establishment of more consistent practice habits for guitar and singing. Continuation of my piano practice. Deeper diving into music theory and a small initial foray into composition. Fitness In terms of Fitness, 2022 was an about average year. No significant weight swings, with my mass being in the range of 63-64kg, and I managed to keep a relatively lean physique, of about 13-10% body fat ratio throughout the year (with a kilo gain between some holiday periods, when I let myself loose for a week or two). In terms of the average day, both my diet and my fitness regime can be characterised as robust, or at least adequate for my long term vision. Despite this, however, a small effort had been put in enhancing my understanding and knowledge around sports science and nutrition, with an aim of bringing a small improvement on a going forward basis. Given that my regime is robust as it stands, any improvements are not directly observable, not at this point at least. Financial posture I opened 2022 having just closed (at the end of Dec 2021) a significant transaction to acquire R&amp;amp;G Flutter. While this allowed for a number of benefits (as I have outlined in previous paragraphs), it also had an unfortunate side effect of requiring massive capital outlays (at least for my finances) and depleting liquidity sources, getting me to experience significant cash crunches in early 2022. Thankfully those subsided over time, as I adjusted to the new cash outflow regime, and my cash flows improved due to a variety of reasons (raises at work, U.K government energy subsidy-support, etc). However, I also had to finance some furniture which ended up requiring significant percentage of my cash flows into servicing debt in 2022. This has now subsided somewhat, primarilly because the brunt of it has been paid, but there’s still some long term debt that’s not completely of my books yet, and probably won’t be for the next 2-3 years. I will also remiss not to mention that I did actually observe the inflationary spike eating a bit into my discretionary income, around the summer time and onwards, which added some further pressure. In terms of other portfolios I had, despite having liquidated the majority of my holdings to acquire Flutter, there was still exposure to the market conditions from some portfolios that I can’t touch (say Workplace Pension, etc) and some illiquid portfolios (private holdings through Crowdcube for instance), I was still a bit affected over the year in terms of total net worth, which for the year remained flat (under most reasonable assumptions/mark to model). This was a bit disappointing, as my finances are a relatively chunky picture of my life, and one that I’m personally very proud of, but it would be naive not to expect some down years, and to be completely honest, I have to be thankful that it remained this way and didn’t experience significant losses. On the plus side, the lack of progress on a financial front was counterbalanced by my progress in other areas, so there was no psychological impact on me as well. 2022 was a colourful year as far as my financial posturing is concerned, with the following highlights Got depleted liquidity sources to be back up to a level considered adequate. Got to the point where I can start outlaying some cash for investments again. Started contributing more (%-wise) of my income to pension accounts. Started directing future investments into cash-flow producing assets, with an aim to medium/long term have a dividend portfolio. Conclusion This has been a long one, and I probably have to cut it short somewhere around here, to preserve the interest of any reader and not bore them with details about my life. All in all, I would call 2022 a fairly productive year, despite some of the headwinds observed in some of the progress subdomains. I will probably author another post laying out my aims for the year ahead. For now, so long, and wish both you and me a most productive/successful 2023.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">A Couple of Mental Models to Help Us Tackle Software Complexity</title>
      
      
      <link href="https://nlightnfotis.github.io/2022/06/12/couple-of-mental-models-software-complexity/" rel="alternate" type="text/html" title="A Couple of Mental Models to Help Us Tackle Software Complexity" />
      
      <published>2022-06-12T00:00:00+00:00</published>
      <updated>2022-06-12T00:00:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2022/06/12/couple-of-mental-models-software-complexity</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2022/06/12/couple-of-mental-models-software-complexity/">&lt;p&gt;Have you ever started designing your software while doing your best to keep the design
clean and simple, and still came up with a tangled mess? Read on for a small number of
mental models that might help you avoid this next time.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Everything’s in your head: A small introduction to Mental Models&lt;/h2&gt;

&lt;p&gt;Excited yet? Me too.&lt;/p&gt;

&lt;p&gt;But before we go on further with our discussion, let me introduce an appropriate definition
for &lt;em&gt;Mental Models&lt;/em&gt;, just to make sure that we are all in the same page.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mental models&lt;/em&gt;, as their name suggests, are abstract mental representations of a wide variety of
topics. On a daily basis, we use mental models for everything: how we understand certain
events that happen around us, how we expect a certain object or the environment to respond
in our interactions with it, and a lot of other things.&lt;/p&gt;

&lt;p&gt;They were first introduced by Charlie Munger (of Berkshire Hathaway) fame in a talk he
gave named &lt;a href=&quot;https://fs.blog/great-talks/a-lesson-on-worldly-wisdom/&quot;&gt;A Lesson on Elementary Worldly Wisdom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more reading on Mental Models, I refer you to the excellent guide by &lt;a href=&quot;https://fs.blog/mental-models/#what_are_mental_models&quot;&gt;Farnam Street&lt;/a&gt;,
which played a large part in popularising the idea of mental models (and familiarising me
with many of the ideas).&lt;/p&gt;

&lt;h3&gt;Mental models and programming&lt;/h3&gt;

&lt;p&gt;In programming (and computer science, more generally) mental models are everywhere.
Sometimes they are explicit (for instance, &lt;a href=&quot;https://en.wikipedia.org/wiki/Model_of_computation&quot;&gt;&lt;em&gt;Models of Computation&lt;/em&gt;&lt;/a&gt;
are abstract representations of how humans or machines can perform a computation).
Other times, less so.&lt;/p&gt;

&lt;p&gt;As an example, your knowledge of your favourite programming language is really a
just a model of it. Think of Python - you don’t really &lt;em&gt;know&lt;/em&gt; Python.&lt;/p&gt;

&lt;p&gt;Now, I can already picture you recoiling in disbelief. “How is that possible?”,
you ask. There’s something in your head that allows you to write programs
in Python, so my claim looks ridiculous upon surface examination.&lt;/p&gt;

&lt;p&gt;Not so fast - I didn’t finish 😁&lt;/p&gt;

&lt;p&gt;You don’t &lt;em&gt;know&lt;/em&gt; Python - but what you do have in your head are two (partially?)
complete mental models of Python: a mental model of its syntax, and a mental
model of its semantics. You may also have mental models of the behaviour of
certain Python tools. You might also be very familiar with a number of different
libraries (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt;), at which point you may have a very robust mental
model of its behaviour or the internal mechanisms that drive that behaviour.
You get the point.&lt;/p&gt;

&lt;h2&gt;Our first model: The Function as an (Invisible) Machine&lt;/h2&gt;

&lt;p&gt;In the two most well established models of computation the smallest unit of code
organisation is the &lt;strong&gt;function&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We software engineers deal with the abstract - we design software (write functions),
but for the most part, we see the end result of the computation they perform and
not much more. You can think of a function as an ethereal object (I stole this analogy
from &lt;a href=&quot;https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-9.html&quot;&gt;&lt;em&gt;Structure and Interpretation of Computer Programs&lt;/em&gt;&lt;/a&gt;,
where the authors compare it to an “abstract being that inhabit computers”).&lt;/p&gt;

&lt;p&gt;If we take the previous analogy, and ground it a bit into the more concrete idea
space, we can think of the function as the ethereal equivalent of &lt;em&gt;a machine&lt;/em&gt;. It’s
really the digital equivalent of the machines other engineers are dealing with:
our machines have some &lt;em&gt;inputs&lt;/em&gt; and are comprised of a different number of &lt;em&gt;components&lt;/em&gt;,
the interplay of which produces &lt;em&gt;outputs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;(This view aligns very well with ideas from the field of &lt;em&gt;Software Engineering&lt;/em&gt; as well.)&lt;/p&gt;

&lt;p&gt;If we admit that the analogy holds, then we are met with some pretty interesting implications.
For example, our ethereal machines share the following properties with concrete machines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complexity,&lt;/li&gt;
  &lt;li&gt;Failure modes,&lt;/li&gt;
  &lt;li&gt;Interfaces,&lt;/li&gt;
  &lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Simple machines - Complex Machines&lt;/h3&gt;

&lt;p&gt;I’m going to stray away from computers for a moment so that I can make a point.&lt;/p&gt;

&lt;p&gt;Think of a simple machine, say a &lt;em&gt;Bicycle&lt;/em&gt;. A bicycle has some components (say,
it has a frame, tires, pedals, a handlebar, etc.) and performs a function,
namely, getting you from point A to point B.&lt;/p&gt;

&lt;p&gt;There are other machines that are functionally equivalent from a high-level
standpoint, for example a &lt;em&gt;motocross bike&lt;/em&gt;. These machines however are lot more
complex: they possess a greater number of components and features a greater number
of interactions between these components.&lt;/p&gt;

&lt;p&gt;(Now, of course, the &lt;em&gt;motocross bike&lt;/em&gt; offers functionality not present on the
&lt;em&gt;bicycle&lt;/em&gt;, but that is beside the point I’m trying to make here.)&lt;/p&gt;

&lt;p&gt;It should not be that much of a logical leap that the more complex machine
(with many more components and interactions) has more failure points than
the simpler machine. Not only that, but in the case of the simpler machine,
it takes less knowledge and effort to fix any failures.&lt;/p&gt;

&lt;p&gt;Let’s hold that thought for a bit while we have a look at the second mental
model I wanted to talk about and go on to see how these two interplay with
each other.&lt;/p&gt;

&lt;h2&gt;Bounded Rationality&lt;/h2&gt;

&lt;p&gt;Enough talk about the machines - let’s now have a look at the human side of all this:
we are all affected by a cognitive bias known as &lt;em&gt;Bounded Rationality&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bounded rationality&lt;/em&gt; is effectively a £10 word for describing the phenomenon of
some cognitive limitations, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the lack of perfect information,&lt;/li&gt;
  &lt;li&gt;the limited capacity of our &lt;a href=&quot;https://www.simplypsychology.org/short-term-memory.html&quot;&gt;short term memory&lt;/a&gt;,&lt;/li&gt;
  &lt;li&gt;the collapse of long-winded reasoning processes under a time limit or an informational
overload,&lt;/li&gt;
  &lt;li&gt;the interplay between other cognitive biases, etc,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;negatively affecting our decision making process. The way the do that is by shifting
our decision making priority to be that of &lt;em&gt;satisficing&lt;/em&gt; (aiming for just an adequate
outcome) instead of &lt;em&gt;optimising&lt;/em&gt; (aiming for an optimal outcome).&lt;/p&gt;

&lt;p&gt;This means that instead of going for the best solution in the current context,
we just go with the first one that seemingly satisfies the constraints that are
obvious to us at the moment.&lt;/p&gt;

&lt;p&gt;You will see bounded rationality being discussed in different contexts. It is, however,
especially prevalent in behavioural economics (the field of study combining economics
and psychology), and cognitive science. The concept is more general, though, and is
relevant in any context that entails decision making.&lt;/p&gt;

&lt;p&gt;When it comes to us, for the purposes of this article, we care about how bounded
rationality affects us when we design software, and this is what we’re going to
be focusing on from now on onwards.&lt;/p&gt;

&lt;h3&gt;Bounded Rationality and Software Design&lt;/h3&gt;

&lt;p&gt;At this point, an astute reader should be able to see where I am going with this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A function should be as simple as possible so that we can avoid the pitfalls
associated with cognitive limitations on our end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may have seen software design guidelines before that look like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Limit the number of parameters a function accepts to less than 5”&lt;/li&gt;
  &lt;li&gt;“Do not use global variables”&lt;/li&gt;
  &lt;li&gt;“Use preconditions and postconditions”&lt;/li&gt;
  &lt;li&gt;“Obey the &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Law of Demeter&lt;/a&gt;”&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these, from a high level standpoint, aim to narrow down the &lt;em&gt;size of
the set&lt;/em&gt; of components and interactions of our function - our (invisible) machine.&lt;/p&gt;

&lt;p&gt;Indeed, programming languages today include a number of features (static manifest typing,
lexical scope, etc) that limit the input, range of states and behaviour that our code
can find itself in.&lt;/p&gt;

&lt;p&gt;This has a number of benefits relating to software correctness (as the compiler
enforces these constraints) but the biggest one is probably that it frees up
our mental capacity by making the function simpler. A smaller design space for
that function means less things that can cause us to throw our hands up and start
&lt;em&gt;satisficing&lt;/em&gt;, and also less things that can go wrong or need fixing when we inevitably
make a mistake.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope that my small essay convinced you about the need to make functions as small
as possible (but not smaller 😁 ).&lt;/p&gt;

&lt;p&gt;If you want a TL/DR of the whole article, it boils down to this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The simpler your software design, the less likely your cognitive limitations are
going to negatively affect it.&lt;/p&gt;
&lt;/blockquote&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="mental-models" />
      
        <category term="software-design" />
      

      
        <summary type="html">Have you ever started designing your software while doing your best to keep the design clean and simple, and still came up with a tangled mess? Read on for a small number of mental models that might help you avoid this next time. Everything’s in your head: A small introduction to Mental Models Excited yet? Me too. But before we go on further with our discussion, let me introduce an appropriate definition for Mental Models, just to make sure that we are all in the same page. Mental models, as their name suggests, are abstract mental representations of a wide variety of topics. On a daily basis, we use mental models for everything: how we understand certain events that happen around us, how we expect a certain object or the environment to respond in our interactions with it, and a lot of other things. They were first introduced by Charlie Munger (of Berkshire Hathaway) fame in a talk he gave named A Lesson on Elementary Worldly Wisdom. For more reading on Mental Models, I refer you to the excellent guide by Farnam Street, which played a large part in popularising the idea of mental models (and familiarising me with many of the ideas). Mental models and programming In programming (and computer science, more generally) mental models are everywhere. Sometimes they are explicit (for instance, Models of Computation are abstract representations of how humans or machines can perform a computation). Other times, less so. As an example, your knowledge of your favourite programming language is really a just a model of it. Think of Python - you don’t really know Python. Now, I can already picture you recoiling in disbelief. “How is that possible?”, you ask. There’s something in your head that allows you to write programs in Python, so my claim looks ridiculous upon surface examination. Not so fast - I didn’t finish 😁 You don’t know Python - but what you do have in your head are two (partially?) complete mental models of Python: a mental model of its syntax, and a mental model of its semantics. You may also have mental models of the behaviour of certain Python tools. You might also be very familiar with a number of different libraries (e.g. requests), at which point you may have a very robust mental model of its behaviour or the internal mechanisms that drive that behaviour. You get the point. Our first model: The Function as an (Invisible) Machine In the two most well established models of computation the smallest unit of code organisation is the function. We software engineers deal with the abstract - we design software (write functions), but for the most part, we see the end result of the computation they perform and not much more. You can think of a function as an ethereal object (I stole this analogy from Structure and Interpretation of Computer Programs, where the authors compare it to an “abstract being that inhabit computers”). If we take the previous analogy, and ground it a bit into the more concrete idea space, we can think of the function as the ethereal equivalent of a machine. It’s really the digital equivalent of the machines other engineers are dealing with: our machines have some inputs and are comprised of a different number of components, the interplay of which produces outputs. (This view aligns very well with ideas from the field of Software Engineering as well.) If we admit that the analogy holds, then we are met with some pretty interesting implications. For example, our ethereal machines share the following properties with concrete machines: Complexity, Failure modes, Interfaces, Etc. Simple machines - Complex Machines I’m going to stray away from computers for a moment so that I can make a point. Think of a simple machine, say a Bicycle. A bicycle has some components (say, it has a frame, tires, pedals, a handlebar, etc.) and performs a function, namely, getting you from point A to point B. There are other machines that are functionally equivalent from a high-level standpoint, for example a motocross bike. These machines however are lot more complex: they possess a greater number of components and features a greater number of interactions between these components. (Now, of course, the motocross bike offers functionality not present on the bicycle, but that is beside the point I’m trying to make here.) It should not be that much of a logical leap that the more complex machine (with many more components and interactions) has more failure points than the simpler machine. Not only that, but in the case of the simpler machine, it takes less knowledge and effort to fix any failures. Let’s hold that thought for a bit while we have a look at the second mental model I wanted to talk about and go on to see how these two interplay with each other. Bounded Rationality Enough talk about the machines - let’s now have a look at the human side of all this: we are all affected by a cognitive bias known as Bounded Rationality. Bounded rationality is effectively a £10 word for describing the phenomenon of some cognitive limitations, such as: the lack of perfect information, the limited capacity of our short term memory, the collapse of long-winded reasoning processes under a time limit or an informational overload, the interplay between other cognitive biases, etc, negatively affecting our decision making process. The way the do that is by shifting our decision making priority to be that of satisficing (aiming for just an adequate outcome) instead of optimising (aiming for an optimal outcome). This means that instead of going for the best solution in the current context, we just go with the first one that seemingly satisfies the constraints that are obvious to us at the moment. You will see bounded rationality being discussed in different contexts. It is, however, especially prevalent in behavioural economics (the field of study combining economics and psychology), and cognitive science. The concept is more general, though, and is relevant in any context that entails decision making. When it comes to us, for the purposes of this article, we care about how bounded rationality affects us when we design software, and this is what we’re going to be focusing on from now on onwards. Bounded Rationality and Software Design At this point, an astute reader should be able to see where I am going with this: A function should be as simple as possible so that we can avoid the pitfalls associated with cognitive limitations on our end. You may have seen software design guidelines before that look like this: “Limit the number of parameters a function accepts to less than 5” “Do not use global variables” “Use preconditions and postconditions” “Obey the Law of Demeter” … All of these, from a high level standpoint, aim to narrow down the size of the set of components and interactions of our function - our (invisible) machine. Indeed, programming languages today include a number of features (static manifest typing, lexical scope, etc) that limit the input, range of states and behaviour that our code can find itself in. This has a number of benefits relating to software correctness (as the compiler enforces these constraints) but the biggest one is probably that it frees up our mental capacity by making the function simpler. A smaller design space for that function means less things that can cause us to throw our hands up and start satisficing, and also less things that can go wrong or need fixing when we inevitably make a mistake. Conclusion I hope that my small essay convinced you about the need to make functions as small as possible (but not smaller 😁 ). If you want a TL/DR of the whole article, it boils down to this: The simpler your software design, the less likely your cognitive limitations are going to negatively affect it.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Three (plus one) Different Versions of map in Haskell</title>
      
      
      <link href="https://nlightnfotis.github.io/2022/06/02/three-versions-of-map/" rel="alternate" type="text/html" title="Three (plus one) Different Versions of map in Haskell" />
      
      <published>2022-06-02T00:00:00+00:00</published>
      <updated>2022-06-02T00:00:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2022/06/02/three-versions-of-map</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2022/06/02/three-versions-of-map/">&lt;p&gt;If you are here, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; requires no introduction. You have seen it.
You have used it. Many times. You have even implemented it before. But did you
know that there are more than one ways to implement the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Of all the archetypal higher-order functions that I know, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; is the function
that I hold dearest in my heart. That’s because it marked a very pleasant memory
when I finished &lt;em&gt;The Little Schemer&lt;/em&gt; (for the first time, back in 2016) and I found
out that &lt;a href=&quot;https://gist.github.com/NlightNFotis/b662a0368b5eea68ebfde1e4e4fb9787&quot;&gt;I grokked the concept enough to be able to write it on my own&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a quick explainer, for the sake of completeness, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; is a function that takes
two arguments, a function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn&lt;/code&gt; and a list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lat&lt;/code&gt;, and produces a new list with the
elements being the result of the application of the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn&lt;/code&gt; to the elements
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lat&lt;/code&gt; (in mathematical writing, this would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;∀x ∈ lat, fn(x)&lt;/code&gt; - that is, for
all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; that belong to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lat&lt;/code&gt; we take the result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn&lt;/code&gt; applied to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn(x)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I always knew of the (&lt;em&gt;classic&lt;/em&gt;?) way to define that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scheme&lt;/code&gt; (or more generally,
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lisp&lt;/code&gt;), which I had seen also being used in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OCaml&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SML&lt;/code&gt;, which looks like this:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cond&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;null?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;else&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is, a recursive function definition, that does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the input list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lat&lt;/code&gt; is empty, it returns the empty list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; (we use that as the
base for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cons&lt;/code&gt;structing a list of values), otherwise&lt;/li&gt;
  &lt;li&gt;It returns the list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cons&lt;/code&gt;tructed from the application of the function to the first
element of the list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(fn (car lat))&lt;/code&gt; and the result of the recursive call on
the remaining list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(map fn (cdr lat))&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In OCaml, the same function would probably be defined using pattern matching, but
the pattern is the same:&lt;/p&gt;

&lt;div class=&quot;language-ocaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Recently though, I started reading Graham Hutton’s excellent &lt;a href=&quot;https://www.cs.nott.ac.uk/~pszgmh/pih.html&quot;&gt;Programming in Haskell&lt;/a&gt;,
as a preparation for some more advanced material I wanted to read that required Haskell
knowledge.&lt;/p&gt;

&lt;p&gt;In that book, I was delighted to find not one, not two, but &lt;strong&gt;three&lt;/strong&gt; different ways of
defining the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; in Haskell.&lt;/p&gt;

&lt;p&gt;Let’s have a look at the first two ways of defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; in Haskell, both defined in
chapter 7 of the book.&lt;/p&gt;

&lt;h2&gt;The classical recursive definition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first definition is the one that is closest to what we described above for
both Scheme and OCaml. It’s the (structural) recursive definition using pattern
matching against two patterns:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The empty list in the first pattern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;, which as before returns the empty list,
and&lt;/li&gt;
  &lt;li&gt;A pattern of a list with at least one element, which we immediately de-structure
into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tail&lt;/code&gt; component in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(x:xs)&lt;/code&gt;. When matched, it will build a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cons&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;) of the result of the function application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f x&lt;/code&gt; and the result
of the recursive call of the remaining list (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map f xs&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This definition is basically the exact equivalent of the OCaml definition above,
with the only notable difference being the explicit function signature given:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This tells us that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; function takes two arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A polymorphic function that maps elements of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; to type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(a -&amp;gt; b)&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;A list of elements of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[a]&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and as a result produces a list of elements of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[b]&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;(The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; above are called &lt;em&gt;type variables&lt;/em&gt;, and are implicitly &lt;em&gt;universally
quantified&lt;/em&gt;, i.e. they read as “for all elements of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;”).&lt;/p&gt;

&lt;p&gt;So far, so classic.&lt;/p&gt;

&lt;p&gt;Nothing out of the ordinary here.&lt;/p&gt;

&lt;h2&gt;Let the show start: The list comprehension definition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Later on in the book, we come across this definition:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wow!&lt;/p&gt;

&lt;p&gt;This one packs a punch in terms of conciseness, but I find it very elegant
and very expressive at the same time.&lt;/p&gt;

&lt;p&gt;This definition is based in the syntax for &lt;em&gt;list comprehensions&lt;/em&gt; in Haskell.&lt;/p&gt;

&lt;p&gt;List comprehensions are a concise and convenient way to define new lists
by manipulating elements of other lists. As an example, consider the following:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is read as make a list of “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; squared, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; drawn from (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt;) the list
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, 2, 3, 4, 5]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Taking this into account, and back to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; function definition, our comprehension
there:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;reads as “make a list of the results of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f x&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; is drawn from the list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xs&lt;/code&gt;”.&lt;/p&gt;

&lt;p&gt;Beautiful.&lt;/p&gt;

&lt;h2&gt;Roll the carpet for Mr. Fold: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foldr&lt;/code&gt; definition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;One of the coolest things the book opened my eyes to was the fact that we can
use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt; in a generative fashion.&lt;/p&gt;

&lt;p&gt;I was well aware of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt; from both Racket and OCaml before, but I always thought
of that in terms of a generalisation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; - it never occured to me that
I can use the accumulating function to yield a value in a generative recursion
fashion, like a new list 🤯&lt;/p&gt;

&lt;p&gt;(Embarassingly, it now looks kind of obvious, and related to ideas I’ve been exposed
to in the past - this one is related to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collector functions&lt;/code&gt; idea that the &lt;a href=&quot;https://mitpress.mit.edu/books/little-schemer-fourth-edition&quot;&gt;Little
Schemer&lt;/a&gt; uses in chapter 8).&lt;/p&gt;

&lt;p&gt;Back to our definition.&lt;/p&gt;

&lt;p&gt;This one is not given by the book - in fact, it’s left for the reader to define as one
of the exercises. This is what I came up with:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This definition is the one that left me most stunned and amazed with the generalising
power of a fold.&lt;/p&gt;

&lt;p&gt;What this definition tells us is that we define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; as a right fold (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foldr&lt;/code&gt;)
of a lambda that takes two arguments, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xs&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;returns&lt;/code&gt; the cons of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f x&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xs&lt;/code&gt;. The last value we pass to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foldr&lt;/code&gt; is the empty list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;, which is the
value that is used as the base case.&lt;/p&gt;

&lt;p&gt;In order to understand what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foldr&lt;/code&gt; does, I find the following visual from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;Wikipedia&lt;/a&gt; to be
very helpful:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/3e/Right-fold-transformation.png&quot; alt=&quot;foldr visualisation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To understand the above visualisation, you need to understand that a list in Haskell
(and most functional programming languages for that matter), is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cons&lt;/code&gt; of various
values and the empty list. I.e. you can think of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, 2, 3, 4, 5]&lt;/code&gt; as
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 : (2 : (3 : (4 : (5 : []))))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With that in mind, what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foldr&lt;/code&gt; function does is that replaces the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cons&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;)
operator with the function argument supplied to it, and &lt;em&gt;reduces&lt;/em&gt; it all (&lt;em&gt;folds the
list&lt;/em&gt;) into a single value.&lt;/p&gt;

&lt;p&gt;(It also replaces the base case empty list value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; with the value of the last
argument supplied to it. In our case, we are passing the empty list (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;) again,
which we are going to use as a base to build a new list of values on top of.)&lt;/p&gt;

&lt;p&gt;And here’s the trick - because the (anonymous) function we passed to it is building
a new list (by applying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cons&lt;/code&gt; operator again), what we end up is a new list instead
of just a single value!&lt;/p&gt;

&lt;p&gt;In our case, this means that if we had the list:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;after the application of the anonymous function we would have a new list, equivalent to&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;🤯&lt;/p&gt;

&lt;h3&gt;Bonus round: a monadic definition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Okay, this is a bit of a cheat because this is basically our first definition, except
that the function and the return type are monadic:&lt;/p&gt;

&lt;div class=&quot;language-hs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mapM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mapM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mapM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is using the &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/do_notation&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do&lt;/code&gt; notation to define a sequence of actions&lt;/a&gt;,
but the actions themselves have a near 1-1 correspondence to our original map implementation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First we assign the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; to the result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f x&lt;/code&gt;, then&lt;/li&gt;
  &lt;li&gt;We assign the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ys&lt;/code&gt; to the result of the recursive call on the
of the list (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mapM f xs&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;And the return the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cons&lt;/code&gt; of the two values &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(y : ys)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How is this definition useful?&lt;/p&gt;

&lt;p&gt;You may have observed that the return type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m [b]&lt;/code&gt; - a monadic list of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Consider the following: we want a function that converts a string into a list only
if all of the string characters correspond to a digit, or fail gracefully otherwise.&lt;/p&gt;

&lt;p&gt;One way to do that is to write a function to convert a single character into a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maybe Int&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isDigit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digitToInt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this definition, we can now use our function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mapM&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;123a&quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I enjoyed writing this post quite a bit.&lt;/p&gt;

&lt;p&gt;It’s a very humbling experience to be visiting books and seeing that ideas that you considered
to be elementary and rather surface-level are a lot more nuanced once you start digging deeper
into them.&lt;/p&gt;

&lt;p&gt;It’s something I need to keep top of mind as I go forward as well.&lt;/p&gt;

&lt;p&gt;This post also highlights one of the nice things of going for breadth of knowledge: exposure
to a wider set of ideas. Had I only stayed in the Racket/OCaml realm, I probably wouldn’t have
been exposed to this range of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; implementations, for the reason that these languages don’t
offer some of the language features that enable them, like list comprehensions.&lt;/p&gt;

&lt;p&gt;All in all, happy I went down this path, and looking forward to what’s next.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="fp" />
      
        <category term="haskell" />
      

      
        <summary type="html">If you are here, then map requires no introduction. You have seen it. You have used it. Many times. You have even implemented it before. But did you know that there are more than one ways to implement the function map? Of all the archetypal higher-order functions that I know, map is the function that I hold dearest in my heart. That’s because it marked a very pleasant memory when I finished The Little Schemer (for the first time, back in 2016) and I found out that I grokked the concept enough to be able to write it on my own. As a quick explainer, for the sake of completeness, map is a function that takes two arguments, a function fn and a list lat, and produces a new list with the elements being the result of the application of the function fn to the elements of lat (in mathematical writing, this would be ∀x ∈ lat, fn(x) - that is, for all x that belong to lat we take the result of fn applied to x, fn(x)). I always knew of the (classic?) way to define that in Scheme (or more generally, in Lisp), which I had seen also being used in OCaml/SML, which looks like this: (define (map fn lat) (cond ((null? lat) &apos;()) (else (cons (fn (car lat)) (map fn (cdr lat)))))) That is, a recursive function definition, that does the following: If the input list lat is empty, it returns the empty list () (we use that as the base for consstructing a list of values), otherwise It returns the list constructed from the application of the function to the first element of the list (fn (car lat)) and the result of the recursive call on the remaining list (map fn (cdr lat)). In OCaml, the same function would probably be defined using pattern matching, but the pattern is the same: let rec map fn lat = match lat with | [] -&amp;gt; [] | h::t -&amp;gt; (fn h)::(map fn t) Recently though, I started reading Graham Hutton’s excellent Programming in Haskell, as a preparation for some more advanced material I wanted to read that required Haskell knowledge. In that book, I was delighted to find not one, not two, but three different ways of defining the function map in Haskell. Let’s have a look at the first two ways of defining map in Haskell, both defined in chapter 7 of the book. The classical recursive definition of map map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b] map f [] = [] map f (x:xs) = f x : map f xs The first definition is the one that is closest to what we described above for both Scheme and OCaml. It’s the (structural) recursive definition using pattern matching against two patterns: The empty list in the first pattern [], which as before returns the empty list, and A pattern of a list with at least one element, which we immediately de-structure into a head and tail component in (x:xs). When matched, it will build a cons (:) of the result of the function application f x and the result of the recursive call of the remaining list (map f xs). This definition is basically the exact equivalent of the OCaml definition above, with the only notable difference being the explicit function signature given: map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b] This tells us that the map function takes two arguments: A polymorphic function that maps elements of type a to type b (a -&amp;gt; b), A list of elements of type a ([a]) and as a result produces a list of elements of type b ([b]). (The a and b above are called type variables, and are implicitly universally quantified, i.e. they read as “for all elements of type a”). So far, so classic. Nothing out of the ordinary here. Let the show start: The list comprehension definition of map Later on in the book, we come across this definition: map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b] map f xs = [f x | x &amp;lt;- xs] Wow! This one packs a punch in terms of conciseness, but I find it very elegant and very expressive at the same time. This definition is based in the syntax for list comprehensions in Haskell. List comprehensions are a concise and convenient way to define new lists by manipulating elements of other lists. As an example, consider the following: &amp;gt; [x^2 | x &amp;lt;- [1, 2, 3, 4, 5]] [1, 4, 9, 16, 25] This is read as make a list of “x squared, with x drawn from (|) the list [1, 2, 3, 4, 5]. Taking this into account, and back to our map function definition, our comprehension there: map f xs = [f x | x &amp;lt;- xs] reads as “make a list of the results of f x, where x is drawn from the list xs”. Beautiful. Roll the carpet for Mr. Fold: The foldr definition of map One of the coolest things the book opened my eyes to was the fact that we can use a fold in a generative fashion. I was well aware of fold from both Racket and OCaml before, but I always thought of that in terms of a generalisation of reduce - it never occured to me that I can use the accumulating function to yield a value in a generative recursion fashion, like a new list 🤯 (Embarassingly, it now looks kind of obvious, and related to ideas I’ve been exposed to in the past - this one is related to the collector functions idea that the Little Schemer uses in chapter 8). Back to our definition. This one is not given by the book - in fact, it’s left for the reader to define as one of the exercises. This is what I came up with: map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b] map f = foldr (\ x xs -&amp;gt; f x : xs) [] This definition is the one that left me most stunned and amazed with the generalising power of a fold. What this definition tells us is that we define map as a right fold (foldr) of a lambda that takes two arguments, x and xs, and returns the cons of f x and xs. The last value we pass to the foldr is the empty list [], which is the value that is used as the base case. In order to understand what the foldr does, I find the following visual from Wikipedia to be very helpful: To understand the above visualisation, you need to understand that a list in Haskell (and most functional programming languages for that matter), is a cons of various values and the empty list. I.e. you can think of [1, 2, 3, 4, 5] as 1 : (2 : (3 : (4 : (5 : [])))). With that in mind, what the foldr function does is that replaces the cons (:) operator with the function argument supplied to it, and reduces it all (folds the list) into a single value. (It also replaces the base case empty list value [] with the value of the last argument supplied to it. In our case, we are passing the empty list ([]) again, which we are going to use as a base to build a new list of values on top of.) And here’s the trick - because the (anonymous) function we passed to it is building a new list (by applying the cons operator again), what we end up is a new list instead of just a single value! In our case, this means that if we had the list: 1 : (2 : (3 : (4 : (5 : [])))) after the application of the anonymous function we would have a new list, equivalent to f 1 : (f 2 : (f 3 : (f 4 : (f 5 : [])))) 🤯 Bonus round: a monadic definition of map Okay, this is a bit of a cheat because this is basically our first definition, except that the function and the return type are monadic: mapM :: Monad m =&amp;gt; (a -&amp;gt; m b) -&amp;gt; [a] -&amp;gt; m [b] mapM f [] = return [] mapM f (x:xs) = do y &amp;lt;- f x ys &amp;lt;- mapM f xs return (y : ys) This is using the do notation to define a sequence of actions, but the actions themselves have a near 1-1 correspondence to our original map implementation: First we assign the name y to the result of f x, then We assign the name ys to the result of the recursive call on the of the list (mapM f xs) And the return the cons of the two values (y : ys) How is this definition useful? You may have observed that the return type is m [b] - a monadic list of type b. Consider the following: we want a function that converts a string into a list only if all of the string characters correspond to a digit, or fail gracefully otherwise. One way to do that is to write a function to convert a single character into a Maybe Int: conv :: Char -&amp;gt; Maybe Int conv c | isDigit c = Just (digitToInt c) | otherwise = Nothing With this definition, we can now use our function mapM like this: &amp;gt; mapM conv &quot;1234&quot; Just [1, 2, 3, 4] &amp;gt; mapM conv &quot;123a&quot; Nothing Conclusion I enjoyed writing this post quite a bit. It’s a very humbling experience to be visiting books and seeing that ideas that you considered to be elementary and rather surface-level are a lot more nuanced once you start digging deeper into them. It’s something I need to keep top of mind as I go forward as well. This post also highlights one of the nice things of going for breadth of knowledge: exposure to a wider set of ideas. Had I only stayed in the Racket/OCaml realm, I probably wouldn’t have been exposed to this range of map implementations, for the reason that these languages don’t offer some of the language features that enable them, like list comprehensions. All in all, happy I went down this path, and looking forward to what’s next.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Reflections on Learning “How to Grow (Almost) Anything”</title>
      
      
      <link href="https://nlightnfotis.github.io/2022/05/12/reflections-on-learning-how-to-grow-almost-anything/" rel="alternate" type="text/html" title="Reflections on Learning &quot;How to Grow (Almost) Anything&quot;" />
      
      <published>2022-05-12T00:00:00+00:00</published>
      <updated>2022-05-12T00:00:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2022/05/12/reflections-on-learning-how-to-grow-almost-anything</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2022/05/12/reflections-on-learning-how-to-grow-almost-anything/">&lt;p&gt;Wow, what a journey this has been!&lt;/p&gt;

&lt;p&gt;Yesterday, Wednesday 11th of May, was the final project presentations for committed
listeners in MIT’s synthetic biology course,
&lt;a href=&quot;https://htgaa2022.notion.site/htgaa2022/HTGAA-2022-d39e5560ad83483ab87d415f085b60c6&quot;&gt;How To Grow (Almost) Anything&lt;/a&gt;,
class of 2022.&lt;/p&gt;

&lt;p&gt;When I started the course, sometime in the end of January, I had no idea what a blast
this would be (nor did I have any idea of how much pressure this would apply on me, but
hey, I survived this, and then some 😁 ).&lt;/p&gt;

&lt;p&gt;I credit this class with taking me from rudimentary biology knowledge to a fairly solid
understanding of molecular biology and immunology, all in about 3-4 months.&lt;/p&gt;

&lt;p&gt;As you can probably imagine, this was… intense.&lt;/p&gt;

&lt;p&gt;But before I dive more into the experience and what I learnt in this course, let me
give some background into the course and the context of my participation.&lt;/p&gt;

&lt;h2&gt;Some background&lt;/h2&gt;

&lt;p&gt;Anyone who knows me is aware of my awe at the potential of synthetic biology. There’s
no doubt in my mind that it’s going to be the next exponential growth sector after
the computer industry. The field itself is fairly nascent, but it’s going to pick
up the pace in the next 5-10 years. And although I believe that all its subdomains
hold massive potential, I’m especially keen on synthetic biology applications in
human therapeutics.&lt;/p&gt;

&lt;p&gt;Now, I keep it no secret that I want to found a synthetic biology company in the
(hopefully, not so distant) future.&lt;/p&gt;

&lt;p&gt;Given that, you may guess that in general I was observant of any opportunities
to dig a bit deeper into the field.&lt;/p&gt;

&lt;p&gt;With that in mind (along with a hefty bit of luck - fate? 😁 ), I came across a
tweet by the organiser of the course, &lt;a href=&quot;https://twitter.com/davidsunkong&quot;&gt;David Kong&lt;/a&gt;,
advertising the course, along with the fact that this year it would admit a small
cohort of students who want to attend remotely.&lt;/p&gt;

&lt;p&gt;Wasting no time, I shot an email towards David, and was surprised when I got an
email a couple days later admitting me to the course, and sharing zoom links for
the course’s first lecture.&lt;/p&gt;

&lt;h2&gt;The Attendance Experience&lt;/h2&gt;

&lt;p&gt;The course was setup in a set of two classes per week:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;one three-hour lecture, in which the first hour was spent reviewing homework
from last week, and the next two hours had different presenters give presentations
on various topics in synthetic biology, and&lt;/li&gt;
  &lt;li&gt;a two-hour class the next day, that included a recitation session - which was
previewing next week’s homework - along with a homework review for online listeners.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To my surprise, there was a relatively high number of online students participating
(~ 45, IIRC - about 3 times the number of MIT students physically attending), but
only about a third of the online students made it through to the end.&lt;/p&gt;

&lt;p&gt;Attendance was taken every lecture, for both online listeners and the students
physically present at MIT. We were also expected to do all the exercises for
the week - with the TAs ensuring that this was the case.&lt;/p&gt;

&lt;p&gt;In the middle of the course’s duration, we also had a handful of hands-on workshops
(of which we had to attend some), aptly named the &lt;em&gt;Festival of Growing&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;The Lectures&lt;/h2&gt;

&lt;p&gt;The course was setup around a number of themes (therapeutics, biofabrication/biomaterials,
DNA/RNA editing, microfluidics, etc), and every week we had two (sometimes three)
different presenters (which ranged from university professors to company CEOs) present
on the topic at hand.&lt;/p&gt;

&lt;p&gt;The first couple of weeks were focused on teaching the foundations of molecular biology
(but in a very, &lt;em&gt;very&lt;/em&gt; accelerated timeframe), and then the following weeks assumed
competence in molecular biology and built on top of that in terms of presenting the
state of the art in applications in various domains.&lt;/p&gt;

&lt;p&gt;It’s probably worth noting that the course attracted people from a wide variety
of backgrounds - you could find architects, designers, computer scientists, chemists,
etc. As you can imagine, a lot of these people didn’t have a background in biology
(or had a very shallow one, myself included), and the intensity of the ramp up of
the first few weeks might have contributed to the dropouts.&lt;/p&gt;

&lt;p&gt;For the MIT/Harvard students, most of these lectures were also followed by a lab
component. For online listeners, we would partially follow along those processes
(given the lack of wet lab access for some of us), or, at other times, we would
be given substitute exercises that involved using online tools (such as &lt;a href=&quot;https://www.benchling.com/&quot;&gt;Benchling&lt;/a&gt;
to simulate the in-vitro experiments in-silico.&lt;/p&gt;

&lt;h2&gt;The &lt;em&gt;Festival of Growing&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Sometime around the half of the semester, we had a pause in the online lectures
for a couple of weeks in favour of attending various workshops. Those workshops
were structured around a number of different themes. Examples of those were growing
mycelium at home, or performing DNA sequencing using a nanopore device.&lt;/p&gt;

&lt;p&gt;From these workshops, some of them were on-premise and some of them were online.
We did manage to watch one of the on-premise workshops (the nanopore sequencing one)
via a TA streaming the workshop, which was nice. In retrospect, this would be
a good idea for all of the on-premise workshops - maybe that will happen from
next year onwards?&lt;/p&gt;

&lt;p&gt;For both online and MIT/Harvard students, we had to attend at least 1 of the workshops
(attendance was taken), with no upper limit on how many you could attend.&lt;/p&gt;

&lt;p&gt;I think the Festival of Growing was a nice little fragment of the course’s structure,
and it also contributed in making the course feel a lot more dynamic in nature
(compared to an alternative, hypothetical course consisting only of lectures).&lt;/p&gt;

&lt;h2&gt;The Final Project&lt;/h2&gt;

&lt;p&gt;A relatively big part of the course (and the main focus of the last two weeks)
was the the preparation of the final project. It had been made clear from the
start that this was an integral part of the course, and that everyone who stuck
to the end (either online listener or on-premise student) would have to
present one.&lt;/p&gt;

&lt;p&gt;We had a lot of leeway in terms of the project that we would choose to do -
though you were &lt;em&gt;strongly encouraged&lt;/em&gt; to pick a project topic that fell within
the experience/knowledge range of available TAs. For the on-premise students,
the idea is that the project would include a lab component but for online students
this was considered optional (given that only some people had access to a lab),
but we still had to present on a topic that was considered feasible (if speculative),
and the expectation was that the project would be fairly well-researched.&lt;/p&gt;

&lt;p&gt;For each one of us doing a final project, we would be assigned a mentor (a
TA or industry professional) who would end up as an endpoint for answering
questions/providing guidance on our project.&lt;/p&gt;

&lt;h2&gt;My Own Experience&lt;/h2&gt;

&lt;p&gt;I have to start with the fact that I enjoyed all of the course, and that
I’m grateful to MIT/the organisers for admitting us online listeners to the
course.&lt;/p&gt;

&lt;p&gt;Having said that, the first couple of weeks were very hard - it required
&lt;strong&gt;a lot&lt;/strong&gt; of outside studying (we’re talking several textbooks worth of
reading) to catch up to the required knowledge. If you have to juggle a
job as well, and you’re not a full-time student, that can definitely feel
pretty overwhelming at times.&lt;/p&gt;

&lt;p&gt;(By the way, this is coming from someone who already commits 3-4 hours of
study on a daily basis, if that helps underline the above paragraph - though
to be fair, I think that a lot of the pressure was coming from the tight
weekly deadlines for exercises.)&lt;/p&gt;

&lt;p&gt;I recall that at one point during the first two weeks I felt the presenters
were speaking something other than English. 😓 The nice thing is that persistence
does pay of, however, and by the end, you are also capable of fluently conversing
with everyone else in this weird little dialect of English.&lt;/p&gt;

&lt;p&gt;The festival of growing was also very nice, but, personally, I was a little bit
miffed by the fact that the workshop I was most looking forward to (metabolic
simulation in Python) got cancelled without any explanation a day before it
was to be presented.&lt;/p&gt;

&lt;p&gt;For me the most enjoyable part of the course was the final project because
by that point I already knew enough to be able to do some competent background
research on the project.&lt;/p&gt;

&lt;h2&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;In this final bit, I want to say that I wholeheartedly recommend this course
to anyone who is keen on synthetic biology, if only to see some of the people
on the forefront of the domain discuss the possibilities and what they are
currently exploring.&lt;/p&gt;

&lt;p&gt;I also have a feeling that David and his course are going to be a future kingmaker
of synthetic biology 😉 You would hear very often during the presentations (person
X, CEO of Y, and alumni of HTGAA few years ago). I think this trend is going to
continue for many more years to come.&lt;/p&gt;

&lt;p&gt;Again many thanks to the organisers (&lt;strong&gt;David&lt;/strong&gt; in particular), the lecturers, TAs,
and everyone else who contributed to this course.&lt;/p&gt;

&lt;p&gt;Special thanks from my end to the following people as well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Jessica Weber&lt;/strong&gt;, for entertaining a barrage of questions I posed during
one of the lectures.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Karolina Sulich&lt;/strong&gt;, for providing some early assistance during my project,
and for introducing me to Amy Holt,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Amy Holt&lt;/strong&gt;, who provided me with specific answers to some immunology related
questions I had, with regard to my final project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find my course notes, exercises, and final project at my course notes
&lt;a href=&quot;https://www.notion.so/HTGAA-2022-a43e0f0b56a444f29aea3a94a388c7bf&quot;&gt;Notion page&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="synbio" />
      
        <category term="course" />
      
        <category term="mooc" />
      

      
        <summary type="html">Wow, what a journey this has been! Yesterday, Wednesday 11th of May, was the final project presentations for committed listeners in MIT’s synthetic biology course, How To Grow (Almost) Anything, class of 2022. When I started the course, sometime in the end of January, I had no idea what a blast this would be (nor did I have any idea of how much pressure this would apply on me, but hey, I survived this, and then some 😁 ). I credit this class with taking me from rudimentary biology knowledge to a fairly solid understanding of molecular biology and immunology, all in about 3-4 months. As you can probably imagine, this was… intense. But before I dive more into the experience and what I learnt in this course, let me give some background into the course and the context of my participation. Some background Anyone who knows me is aware of my awe at the potential of synthetic biology. There’s no doubt in my mind that it’s going to be the next exponential growth sector after the computer industry. The field itself is fairly nascent, but it’s going to pick up the pace in the next 5-10 years. And although I believe that all its subdomains hold massive potential, I’m especially keen on synthetic biology applications in human therapeutics. Now, I keep it no secret that I want to found a synthetic biology company in the (hopefully, not so distant) future. Given that, you may guess that in general I was observant of any opportunities to dig a bit deeper into the field. With that in mind (along with a hefty bit of luck - fate? 😁 ), I came across a tweet by the organiser of the course, David Kong, advertising the course, along with the fact that this year it would admit a small cohort of students who want to attend remotely. Wasting no time, I shot an email towards David, and was surprised when I got an email a couple days later admitting me to the course, and sharing zoom links for the course’s first lecture. The Attendance Experience The course was setup in a set of two classes per week: one three-hour lecture, in which the first hour was spent reviewing homework from last week, and the next two hours had different presenters give presentations on various topics in synthetic biology, and a two-hour class the next day, that included a recitation session - which was previewing next week’s homework - along with a homework review for online listeners. To my surprise, there was a relatively high number of online students participating (~ 45, IIRC - about 3 times the number of MIT students physically attending), but only about a third of the online students made it through to the end. Attendance was taken every lecture, for both online listeners and the students physically present at MIT. We were also expected to do all the exercises for the week - with the TAs ensuring that this was the case. In the middle of the course’s duration, we also had a handful of hands-on workshops (of which we had to attend some), aptly named the Festival of Growing. The Lectures The course was setup around a number of themes (therapeutics, biofabrication/biomaterials, DNA/RNA editing, microfluidics, etc), and every week we had two (sometimes three) different presenters (which ranged from university professors to company CEOs) present on the topic at hand. The first couple of weeks were focused on teaching the foundations of molecular biology (but in a very, very accelerated timeframe), and then the following weeks assumed competence in molecular biology and built on top of that in terms of presenting the state of the art in applications in various domains. It’s probably worth noting that the course attracted people from a wide variety of backgrounds - you could find architects, designers, computer scientists, chemists, etc. As you can imagine, a lot of these people didn’t have a background in biology (or had a very shallow one, myself included), and the intensity of the ramp up of the first few weeks might have contributed to the dropouts. For the MIT/Harvard students, most of these lectures were also followed by a lab component. For online listeners, we would partially follow along those processes (given the lack of wet lab access for some of us), or, at other times, we would be given substitute exercises that involved using online tools (such as Benchling to simulate the in-vitro experiments in-silico. The Festival of Growing Sometime around the half of the semester, we had a pause in the online lectures for a couple of weeks in favour of attending various workshops. Those workshops were structured around a number of different themes. Examples of those were growing mycelium at home, or performing DNA sequencing using a nanopore device. From these workshops, some of them were on-premise and some of them were online. We did manage to watch one of the on-premise workshops (the nanopore sequencing one) via a TA streaming the workshop, which was nice. In retrospect, this would be a good idea for all of the on-premise workshops - maybe that will happen from next year onwards? For both online and MIT/Harvard students, we had to attend at least 1 of the workshops (attendance was taken), with no upper limit on how many you could attend. I think the Festival of Growing was a nice little fragment of the course’s structure, and it also contributed in making the course feel a lot more dynamic in nature (compared to an alternative, hypothetical course consisting only of lectures). The Final Project A relatively big part of the course (and the main focus of the last two weeks) was the the preparation of the final project. It had been made clear from the start that this was an integral part of the course, and that everyone who stuck to the end (either online listener or on-premise student) would have to present one. We had a lot of leeway in terms of the project that we would choose to do - though you were strongly encouraged to pick a project topic that fell within the experience/knowledge range of available TAs. For the on-premise students, the idea is that the project would include a lab component but for online students this was considered optional (given that only some people had access to a lab), but we still had to present on a topic that was considered feasible (if speculative), and the expectation was that the project would be fairly well-researched. For each one of us doing a final project, we would be assigned a mentor (a TA or industry professional) who would end up as an endpoint for answering questions/providing guidance on our project. My Own Experience I have to start with the fact that I enjoyed all of the course, and that I’m grateful to MIT/the organisers for admitting us online listeners to the course. Having said that, the first couple of weeks were very hard - it required a lot of outside studying (we’re talking several textbooks worth of reading) to catch up to the required knowledge. If you have to juggle a job as well, and you’re not a full-time student, that can definitely feel pretty overwhelming at times. (By the way, this is coming from someone who already commits 3-4 hours of study on a daily basis, if that helps underline the above paragraph - though to be fair, I think that a lot of the pressure was coming from the tight weekly deadlines for exercises.) I recall that at one point during the first two weeks I felt the presenters were speaking something other than English. 😓 The nice thing is that persistence does pay of, however, and by the end, you are also capable of fluently conversing with everyone else in this weird little dialect of English. The festival of growing was also very nice, but, personally, I was a little bit miffed by the fact that the workshop I was most looking forward to (metabolic simulation in Python) got cancelled without any explanation a day before it was to be presented. For me the most enjoyable part of the course was the final project because by that point I already knew enough to be able to do some competent background research on the project. In Conclusion In this final bit, I want to say that I wholeheartedly recommend this course to anyone who is keen on synthetic biology, if only to see some of the people on the forefront of the domain discuss the possibilities and what they are currently exploring. I also have a feeling that David and his course are going to be a future kingmaker of synthetic biology 😉 You would hear very often during the presentations (person X, CEO of Y, and alumni of HTGAA few years ago). I think this trend is going to continue for many more years to come. Again many thanks to the organisers (David in particular), the lecturers, TAs, and everyone else who contributed to this course. Special thanks from my end to the following people as well: Jessica Weber, for entertaining a barrage of questions I posed during one of the lectures. Karolina Sulich, for providing some early assistance during my project, and for introducing me to Amy Holt, Amy Holt, who provided me with specific answers to some immunology related questions I had, with regard to my final project. You can find my course notes, exercises, and final project at my course notes Notion page.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Nucleotide Counting the TDD Way - A Bioinformatics Stronghold Story</title>
      
      
      <link href="https://nlightnfotis.github.io/2022/03/28/bioinformatics-stronghold-nucleotide-counting/" rel="alternate" type="text/html" title="Nucleotide Counting the TDD Way - A Bioinformatics Stronghold Story" />
      
      <published>2022-03-28T18:04:00+00:00</published>
      <updated>2022-03-28T18:04:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2022/03/28/bioinformatics-stronghold-nucleotide-counting</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2022/03/28/bioinformatics-stronghold-nucleotide-counting/">&lt;p&gt;A few days ago, I was going through my code archives and came across my old solutions
of the &lt;a href=&quot;https://rosalind.info/problems/list-view/&quot;&gt;Bioinformatics Stronghold&lt;/a&gt; by
&lt;a href=&quot;https://rosalind.info/problems/locations/&quot;&gt;Project Rosalind&lt;/a&gt;. For those of you who
don’t know, &lt;em&gt;Project Rosalind&lt;/em&gt; is one of those problem-based skill development exercises,
akin to &lt;a href=&quot;https://projecteuler.net&quot;&gt;Project Euler&lt;/a&gt; but aimed at nascent bioinformaticians.&lt;/p&gt;

&lt;p&gt;Coincidentally, I finished a &lt;a href=&quot;https://www.goodreads.com/book/show/33527186-test-driven-development-in-ruby&quot;&gt;book on Test-Driven Development (TDD) in Ruby&lt;/a&gt;
around the same time. I particularly enjoyed TDD the way it was presented in
the book, and I was looking for some problems to apply it to and the Stronghold
Project is the perfect lab space for me to apply those new ideas (because of
its relatively simple from an algorithmic perspective problems).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;My initial foray into the Stronghold project was in an attempt at comparative solutions,
wherein I attempted the exercises in a number of different programming languages
(Python, Go, OCaml, Racket, etc.) while observing any differences in the style I
chose, refactoring them, benchmarking them, and all around having some good fun
with those 😄&lt;/p&gt;

&lt;p&gt;One thing I’m embarrassed to admit about that first attempt though, is that while
my solutions worked (or so I can conveniently recall), they didn’t contain any
reproducible documentation of their satisfying of the requirements of the
exercise - there were no assertions, no tests, nothing. 😅 I can only attribute it
to my enthusiasm in getting each solution done to move on to the next one.&lt;/p&gt;

&lt;p&gt;Bad me.&lt;/p&gt;

&lt;p&gt;I’m now revisiting these exercises to atone for my insolence. I’m going to go through
the exercises again, but this time I’m going to be approaching them in a TDD/BDD style.&lt;/p&gt;

&lt;p&gt;But before I move on to actual code, what on Earth is TDD (and its cousin, BDD)? We
already saw that &lt;em&gt;TDD&lt;/em&gt; stands for &lt;em&gt;Test-Driven Development&lt;/em&gt;. By that, we mean a
programming approach that encourages writing tests for the feature code &lt;strong&gt;before&lt;/strong&gt;
the actual feature code is written, so that the tests guide the design of the code
itself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Behaviour-Driven Development&lt;/em&gt; (BDD for short), is a sister approach to TDD, but for
the purposes of this article, BDD is the approach of &lt;em&gt;writing the tests in a way
that they reflect prose specification of the behaviour of the module&lt;/em&gt; under test.&lt;/p&gt;

&lt;p&gt;Okay, are you ready now? Let’s roll.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’m going to start with the &lt;a href=&quot;https://rosalind.info/problems/dna/&quot;&gt;first exercise&lt;/a&gt;,
which is about counting nucleotides in a DNA strand, which is given as an input of
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Now, if you visit the problem page, you will see that it also gives us a sample
dataset, along with the expected output for that.&lt;/p&gt;

&lt;p&gt;(You may have noticed that the above sentence is just a particularly verbose way
of describing a &lt;em&gt;test case&lt;/em&gt;. 😉 )&lt;/p&gt;

&lt;p&gt;Our implementation language for this exercise is going to be Ruby, for two reasons.&lt;/p&gt;

&lt;p&gt;1) I started learning Ruby recently and I’ve been enjoying it a lot, and
2) Ruby comes with excellent built-in support for testing in the form of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Minitest&lt;/code&gt;
   library.&lt;/p&gt;

&lt;p&gt;Let’s quickly make a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counting_nucleotides.rb&lt;/code&gt;, and add an empty test
specification:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;minitest/autorun&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;nucleotide counting function&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point it’s worth having a pause to think about our test cases before we move
forward.&lt;/p&gt;

&lt;p&gt;We already have been given a sample input, as we mentioned above, that we could use
as our test case. The problem, however, with that particular input is that it describes
the functionality of the module when it’s finished.&lt;/p&gt;

&lt;p&gt;That’s probably a bit &lt;em&gt;too&lt;/em&gt; elaborate for us to use now that we start designing our
function.&lt;/p&gt;

&lt;p&gt;We probably want something much simpler - indeed, this is what TDD as an approach
is advocating. What might be simpler for us?&lt;/p&gt;

&lt;p&gt;What about a strand with a very small length? Say, 8 bases long?&lt;/p&gt;

&lt;p&gt;Sounds like it &lt;em&gt;should&lt;/em&gt; work.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;minitest/autorun&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;nucleotide counting function&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;returns a count of 2 2 2 2 for strand &quot;ATCGATCG&quot;&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;ATCGATCG&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;2 2 2 2&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks good for a first test. Let’s run it and see what happens.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby counting_nucleotides.rb
Run options: &lt;span class=&quot;nt&quot;&gt;--seed&lt;/span&gt; 64068

&lt;span class=&quot;c&quot;&gt;# Running:&lt;/span&gt;

E

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000265s, 3773.5860 runs/s, 0.0000 assertions/s.

  1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Error:
nucleotide counting &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#test_0001_returns a count of 2 2 2 2 for strand &quot;ATCGATCG&quot;:&lt;/span&gt;
NoMethodError: undefined method &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;count_nucleotides&lt;span class=&quot;s1&quot;&gt;&apos; for #&amp;lt;#&amp;lt;Class:0x000000015e831da0&amp;gt;:0x000000015b940028&amp;gt;
    counting_nucleotides.rb:8:in `block (2 levels) in &amp;lt;main&amp;gt;&apos;&lt;/span&gt;

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ahh, it complains that we “forgot” to define our function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count_nucleotides&lt;/code&gt;.
Easy to fix, let’s add a function called that, taking in one parameter, but
with an empty body.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;minitest/autorun&apos;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;nucleotide counting function&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;returns a count of 2 2 2 2 for strand &quot;ATCGATCG&quot;&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;ATCGATCG&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;2 2 2 2&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice, let’s run it again, and see what we get.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby counting_nucleotides.rb
Run options: &lt;span class=&quot;nt&quot;&gt;--seed&lt;/span&gt; 20901

&lt;span class=&quot;c&quot;&gt;# Running:&lt;/span&gt;

F

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000287s, 3484.3209 runs/s, 3484.3209 assertions/s.

  1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Failure:
nucleotide counting &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#test_0001_returns a count of 2 2 2 2 for strand &quot;ATCGATCG&quot; [counting_nucleotides.rb:12]:&lt;/span&gt;
Expected: &lt;span class=&quot;s2&quot;&gt;&quot;2 2 2 2&quot;&lt;/span&gt;
  Actual: nil

1 runs, 1 assertions, 1 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, this seems a bit more intriguing. Now it doesn’t come back to us with an &lt;strong&gt;error&lt;/strong&gt;.
Rather, it comes back with a &lt;strong&gt;failure&lt;/strong&gt;, indicating that the test got executed,
but the expected and the actual results differ. In our case, we asserted in our test
that we expect the result to be a string with the contents &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;2 2 2 2&quot;&lt;/code&gt; in exactly
that form (spaces and everything), but we got back &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; from the actual execution.&lt;/p&gt;

&lt;p&gt;The reason for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; in particular is that ruby is an &lt;em&gt;expression-based language&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In an expression-based language every program fragment is an &lt;em&gt;expression&lt;/em&gt;, meaning
that it will return a value upon execution of that program fragment (we call that,
in more technical terms, &lt;em&gt;expression evaluation&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;A function, thus, is also an expression, and will upon evaluation return the value
of the last expression in its body. For a function with an empty body, there are no
such expressions, so a default of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; is returned.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Right, so we run our test, and got back &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; for a return value. This is our clue
that our test is executing the function as we expect, but our function is not yet
implemented (does not contain a function body). Let’s crack on with that.&lt;/p&gt;

&lt;p&gt;In Ruby, there’s a very convenient method defined on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; type whose job
is to count the presence of particular subsequences (substrings in our case).&lt;/p&gt;

&lt;p&gt;To no one’s suprise, it’s called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s use that to count the number of nucleotides and return that in a string format.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;C&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;G&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;T&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s run our test again.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby counting_nucleotides.rb
Run options: &lt;span class=&quot;nt&quot;&gt;--seed&lt;/span&gt; 3996

&lt;span class=&quot;c&quot;&gt;# Running:&lt;/span&gt;

F

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000411s, 2433.0901 runs/s, 2433.0901 assertions/s.

  1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Failure:
nucleotide counting &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#test_0001_returns a count of 2 2 2 2 for strand &quot;ATCGATCG&quot; [counting_nucleotides.rb:13]:&lt;/span&gt;
Expected: &lt;span class=&quot;s2&quot;&gt;&quot;2 2 2 2&quot;&lt;/span&gt;
  Actual: 8

1 runs, 1 assertions, 1 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whoops!&lt;/p&gt;

&lt;p&gt;That looks like it found the number of substrings correctly. However, because
of a programming mistake, it looks like it added all the occurences together,
instead of presenting them in a formatted string.&lt;/p&gt;

&lt;p&gt;Let’s do that in the easiest way that comes to mind - using string concatenation
and casting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;integer&lt;/code&gt; representing the count back to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;, while also
adding some spaces (so that we get closer to the expected output):&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;C&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;G&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;T&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see what happens now…&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby counting_nucleotides.rb
Run options: &lt;span class=&quot;nt&quot;&gt;--seed&lt;/span&gt; 37259

&lt;span class=&quot;c&quot;&gt;# Running:&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000321s, 3115.2648 runs/s, 3115.2648 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It worked! I mean, our code &lt;del&gt;is a bit atrocious&lt;/del&gt; could be better, but here
we have our first version of it working. 🎉&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now that we have our first unit test passing, let’s think a bit more about
the test cases we want.&lt;/p&gt;

&lt;p&gt;We want at least a representative sample of each of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Positive cases,&lt;/li&gt;
  &lt;li&gt;Negative cases,&lt;/li&gt;
  &lt;li&gt;Degenerate cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Positive cases&lt;/em&gt; are cases in which we exercise the &lt;em&gt;happy path&lt;/em&gt; - the code path we
were most anticipating when we were designing our code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Negative cases&lt;/em&gt; are cases in which we divert away from the happy path, and
try to exercise error conditions, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Degenerate cases&lt;/em&gt; are cases in which we test around boundary conditions, such as
empty lists, strings, etc, to see if our function can handle these cases.&lt;/p&gt;

&lt;p&gt;We already have a test for a positive case, so right now, it might make more sense
for us to test against a negative case. So what would be a negative case for us?&lt;/p&gt;

&lt;p&gt;We are being passed a strand in as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;. Given that a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; can have a
lot more characters than just the four representing nucleobases, what happens if we
have a string that has characters that don’t represent a nucleotide base? What happens
if we have something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATCGW&lt;/code&gt; for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strand&lt;/code&gt;? Let’s see.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;throws an exception if a non-base encoding character is found in the strand&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;ATCGW&apos;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;assert_raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s run it to see what happened this time.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby counting_nucleotides.rb
Run options: &lt;span class=&quot;nt&quot;&gt;--seed&lt;/span&gt; 54524

&lt;span class=&quot;c&quot;&gt;# Running:&lt;/span&gt;

.F

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000506s, 3952.5692 runs/s, 3952.5692 assertions/s.

  1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Failure:
nucleotide counting &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#test_0002_throws an exception if a non-base encoding character is found in the strand [counting_nucleotides.rb:19]:&lt;/span&gt;
ArgumentError expected but nothing was raised.

2 runs, 2 assertions, 1 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;😱&lt;/p&gt;

&lt;p&gt;Yikes! We were expecting an exception to be raised, but none was raised.
That means that our code had no issue handling the invalid string. Let’s fix that.&lt;/p&gt;

&lt;p&gt;Let’s fix that the simplest way we can: by defining a list of illegal characters
for the strand string and seeing if they are present in the string.&lt;/p&gt;

&lt;p&gt;That gets us with the following version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count_nucleotides&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;illegal_chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;BDEFHIJKLNOPQRSUVWXYZ&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;illegal_chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Illegal character in strand &apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;C&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;G&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;T&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see where we stand now:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby counting_nucleotides.rb
Run options: &lt;span class=&quot;nt&quot;&gt;--seed&lt;/span&gt; 25460

&lt;span class=&quot;c&quot;&gt;# Running:&lt;/span&gt;

..

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000348s, 5747.1265 runs/s, 5747.1265 assertions/s.

2 runs, 2 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice. That works, so now both our positive case and our negative test cases pass.&lt;/p&gt;

&lt;p&gt;The only downside is that we are left with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counting_nucleotides&lt;/code&gt; function that
looks a bit hard to read - not to mention a bit wasteful, too.&lt;/p&gt;

&lt;p&gt;(Aside: It loops through the string a lot more times than it needs to, as it loops
once per every illegal character it’s looking for, and then once for every character
it’s searching the count for.)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;At this point, it’s worth to pause, and reflect on where we are in the process so far.&lt;/p&gt;

&lt;p&gt;TDD is a loop of the following 3 steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write a &lt;em&gt;failing test&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Make the test &lt;em&gt;pass&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Refactor&lt;/em&gt; the implementation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(Refactoring is the reorganisation of the code with the aim of improving it with
regard to some metric, say, robustness, readability, performance, etc)&lt;/p&gt;

&lt;p&gt;Up until this point, we have been focusing on the first two steps, but did none
of the third one.&lt;/p&gt;

&lt;p&gt;We usually refactor once we get some of our implementation done, and &lt;strong&gt;all our
tests are passing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In other words, now is as good time as any to refactor our code.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s have a look at our feature code, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count_nucleotides&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;What if, instead of looping so many times, we looped just once, and collected
both counts and watched out for any illegal character at the same time?&lt;/p&gt;

&lt;p&gt;That does sound like it should improve our performance, now, doesn’t it?&lt;/p&gt;

&lt;p&gt;Let’s go ahead and do this, and see what happens.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;T&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;C&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;G&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Invalid character in strand &apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_a&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_c&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks simpler to me. Does it work, though?&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby counting_nucleotides.rb
Run options: &lt;span class=&quot;nt&quot;&gt;--seed&lt;/span&gt; 48449

&lt;span class=&quot;c&quot;&gt;# Running:&lt;/span&gt;

..

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000378s, 5291.0053 runs/s, 5291.0053 assertions/s.

2 runs, 2 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It does.&lt;/p&gt;

&lt;p&gt;And just like this, we saw the massive benefit of having automated tests for this:
we did some pretty significant &lt;em&gt;structural changes&lt;/em&gt; to our function under test,
but even so, we are confident that its observable behaviour remains unchanged
given our tests and their coverage.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now that we have both the positive and negative tests, can we write a test for
the degenerate case?&lt;/p&gt;

&lt;p&gt;Turns out we can.&lt;/p&gt;

&lt;p&gt;A degenerate case for us would be an &lt;strong&gt;empty string&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;), given that we anticipate
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strand&lt;/code&gt; to exist (signified by a non-empty string).&lt;/p&gt;

&lt;p&gt;Before we go ahead and write our test case, let’s have a bit of a think around
the behaviour of our function in the case of an empty string. Should it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Return a count of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0 0 0 0&lt;/code&gt;, or&lt;/li&gt;
  &lt;li&gt;Raise an exception?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Usually, in situations like this, a decision like this already forms part of
our specification - but in our case, though, the exercise contains no indication
as to what is considered canonical, so we can choose either.&lt;/p&gt;

&lt;p&gt;Let’s go with expecting a count of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0 0 0 0&lt;/code&gt; for this one (there don’t appear to
be any significant benefits whichever one we choose).&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;returns a count of 0 0 0 0 for a strand with zero bases (empty string)&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;0 0 0 0&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s check our function’s behaviour:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby counting_nucleotides.rb
Run options: &lt;span class=&quot;nt&quot;&gt;--seed&lt;/span&gt; 33926

&lt;span class=&quot;c&quot;&gt;# Running:&lt;/span&gt;

...

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000378s, 7936.5079 runs/s, 7936.5079 assertions/s.

3 runs, 3 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Very nice.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Are we done, now?&lt;/p&gt;

&lt;p&gt;Not so fast.&lt;/p&gt;

&lt;p&gt;There’s a requirement in our specification that we have ignored so far:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given: A DNA string s of length &lt;em&gt;at most 1000 nt&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Emphasis mine.)&lt;/p&gt;

&lt;p&gt;Let’s quickly add a test case with an invalid length (&amp;gt; 1000 nucleotides) to see
how our code behaves with against this requirement:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;throws an exception if a strand is more than 1000nt long&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1005&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert_raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby counting_nucleotides.rb
Run options: &lt;span class=&quot;nt&quot;&gt;--seed&lt;/span&gt; 15834

&lt;span class=&quot;c&quot;&gt;# Running:&lt;/span&gt;

...F

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000579s, 6908.4628 runs/s, 6908.4628 assertions/s.

  1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Failure:
nucleotide counting &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#test_0004_throws an exception if a strand is more than 1000nt long [counting_nucleotides.rb:52]:&lt;/span&gt;
ArgumentError expected but nothing was raised.

4 runs, 4 assertions, 1 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The test fails, as we were anticipating an exception but none was raised.&lt;/p&gt;

&lt;p&gt;Let’s change our function to factor in this new requirement.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;A strand of at most 1000nt is expected&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;T&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;C&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;G&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Invalid character in strand &apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_a&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_c&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see how our test does now:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby counting_nucleotides.rb
Run options: &lt;span class=&quot;nt&quot;&gt;--seed&lt;/span&gt; 14091

&lt;span class=&quot;c&quot;&gt;# Running:&lt;/span&gt;

....

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000355s, 11267.6056 runs/s, 11267.6056 assertions/s.

4 runs, 4 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Very nice. Everything passes now.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Before we wrap this up, let’s make one final addition to our test case.&lt;/p&gt;

&lt;p&gt;Do you remember how I mentioned that the exercise specification describes
a test case already?&lt;/p&gt;

&lt;p&gt;We can incorporate this into our test cases. As a matter of fact, we can
substitute this one for the simpler positive case we had.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;returns a count of 20 12 17 21 for the specification strand&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;20 12 17 21&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see how we fare against the story test case (the one given to us in
the specification).&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby counting_nucleotides.rb
Run options: &lt;span class=&quot;nt&quot;&gt;--seed&lt;/span&gt; 17159

&lt;span class=&quot;c&quot;&gt;# Running:&lt;/span&gt;

.....

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000428s, 11682.2430 runs/s, 11682.2430 assertions/s.

5 runs, 5 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks like everything works as expected. 🎉&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Before I wrap up, I would be remiss if I did not mention that this particular
approach of designing code (&lt;em&gt;Test-Driven Development&lt;/em&gt;) works very well when we
know the expected output of our code (say, when we know a lot about the domain,
or when our specification allows for examples that demonstrate expected input
and output).&lt;/p&gt;

&lt;p&gt;It doesn’t work as great, however, when we don’t know what the output is (say,
for instance, when we do exploratory programming, as in the case of exploring
an API that’s given to us).&lt;/p&gt;

&lt;p&gt;The complete code for this small exercise is listed below:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;minitest/autorun&apos;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## IMPLEMENTATION CODE&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count_g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;A strand of at most 1000nt is expected&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;T&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;C&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;G&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count_g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Invalid character in strand &apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_a&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_c&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;## TEST CODE&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;nucleotide counting function&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Positive case&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;returns a count of 20 12 17 21 for the specification strand&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;20 12 17 21&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Negative cases&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;throws an exception if a non-base encoding character is found in the strand&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;ATCGW&apos;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;assert_raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;throws an exception if a strand is more than 1000nt long&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1005&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert_raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Degenerate cases&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;returns a count of 0 0 0 0 for a strand with zero bases (empty string)&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;0 0 0 0&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_nucleotides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nucleotide_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="ruby" />
      
        <category term="bioinformatics" />
      
        <category term="tdd" />
      

      
        <summary type="html">A few days ago, I was going through my code archives and came across my old solutions of the Bioinformatics Stronghold by Project Rosalind. For those of you who don’t know, Project Rosalind is one of those problem-based skill development exercises, akin to Project Euler but aimed at nascent bioinformaticians. Coincidentally, I finished a book on Test-Driven Development (TDD) in Ruby around the same time. I particularly enjoyed TDD the way it was presented in the book, and I was looking for some problems to apply it to and the Stronghold Project is the perfect lab space for me to apply those new ideas (because of its relatively simple from an algorithmic perspective problems). My initial foray into the Stronghold project was in an attempt at comparative solutions, wherein I attempted the exercises in a number of different programming languages (Python, Go, OCaml, Racket, etc.) while observing any differences in the style I chose, refactoring them, benchmarking them, and all around having some good fun with those 😄 One thing I’m embarrassed to admit about that first attempt though, is that while my solutions worked (or so I can conveniently recall), they didn’t contain any reproducible documentation of their satisfying of the requirements of the exercise - there were no assertions, no tests, nothing. 😅 I can only attribute it to my enthusiasm in getting each solution done to move on to the next one. Bad me. I’m now revisiting these exercises to atone for my insolence. I’m going to go through the exercises again, but this time I’m going to be approaching them in a TDD/BDD style. But before I move on to actual code, what on Earth is TDD (and its cousin, BDD)? We already saw that TDD stands for Test-Driven Development. By that, we mean a programming approach that encourages writing tests for the feature code before the actual feature code is written, so that the tests guide the design of the code itself. Behaviour-Driven Development (BDD for short), is a sister approach to TDD, but for the purposes of this article, BDD is the approach of writing the tests in a way that they reflect prose specification of the behaviour of the module under test. Okay, are you ready now? Let’s roll. I’m going to start with the first exercise, which is about counting nucleotides in a DNA strand, which is given as an input of a string type. Now, if you visit the problem page, you will see that it also gives us a sample dataset, along with the expected output for that. (You may have noticed that the above sentence is just a particularly verbose way of describing a test case. 😉 ) Our implementation language for this exercise is going to be Ruby, for two reasons. 1) I started learning Ruby recently and I’ve been enjoying it a lot, and 2) Ruby comes with excellent built-in support for testing in the form of the Minitest library. Let’s quickly make a file called counting_nucleotides.rb, and add an empty test specification: require &apos;minitest/autorun&apos; describe &apos;nucleotide counting function&apos; do end At this point it’s worth having a pause to think about our test cases before we move forward. We already have been given a sample input, as we mentioned above, that we could use as our test case. The problem, however, with that particular input is that it describes the functionality of the module when it’s finished. That’s probably a bit too elaborate for us to use now that we start designing our function. We probably want something much simpler - indeed, this is what TDD as an approach is advocating. What might be simpler for us? What about a strand with a very small length? Say, 8 bases long? Sounds like it should work. require &apos;minitest/autorun&apos; describe &apos;nucleotide counting function&apos; do it &apos;returns a count of 2 2 2 2 for strand &quot;ATCGATCG&quot;&apos; do strand = &apos;ATCGATCG&apos; nucleotide_count = &apos;2 2 2 2&apos; result = count_nucleotides(strand) assert_equal nucleotide_count, result end end Looks good for a first test. Let’s run it and see what happens. $ ruby counting_nucleotides.rb Run options: --seed 64068 # Running: E Finished in 0.000265s, 3773.5860 runs/s, 0.0000 assertions/s. 1) Error: nucleotide counting function#test_0001_returns a count of 2 2 2 2 for strand &quot;ATCGATCG&quot;: NoMethodError: undefined method `count_nucleotides&apos; for #&amp;lt;#&amp;lt;Class:0x000000015e831da0&amp;gt;:0x000000015b940028&amp;gt; counting_nucleotides.rb:8:in `block (2 levels) in &amp;lt;main&amp;gt;&apos; 1 runs, 0 assertions, 0 failures, 1 errors, 0 skips Ahh, it complains that we “forgot” to define our function count_nucleotides. Easy to fix, let’s add a function called that, taking in one parameter, but with an empty body. require &apos;minitest/autorun&apos; def count_nucleotides(strand) end describe &apos;nucleotide counting function&apos; do it &apos;returns a count of 2 2 2 2 for strand &quot;ATCGATCG&quot;&apos; do strand = &apos;ATCGATCG&apos; nucleotide_count = &apos;2 2 2 2&apos; result = count_nucleotides(strand) assert_equal nucleotide_count, result end end Nice, let’s run it again, and see what we get. $ ruby counting_nucleotides.rb Run options: --seed 20901 # Running: F Finished in 0.000287s, 3484.3209 runs/s, 3484.3209 assertions/s. 1) Failure: nucleotide counting function#test_0001_returns a count of 2 2 2 2 for strand &quot;ATCGATCG&quot; [counting_nucleotides.rb:12]: Expected: &quot;2 2 2 2&quot; Actual: nil 1 runs, 1 assertions, 1 failures, 0 errors, 0 skips Okay, this seems a bit more intriguing. Now it doesn’t come back to us with an error. Rather, it comes back with a failure, indicating that the test got executed, but the expected and the actual results differ. In our case, we asserted in our test that we expect the result to be a string with the contents &quot;2 2 2 2&quot; in exactly that form (spaces and everything), but we got back nil from the actual execution. The reason for the nil in particular is that ruby is an expression-based language. In an expression-based language every program fragment is an expression, meaning that it will return a value upon execution of that program fragment (we call that, in more technical terms, expression evaluation). A function, thus, is also an expression, and will upon evaluation return the value of the last expression in its body. For a function with an empty body, there are no such expressions, so a default of nil is returned. Right, so we run our test, and got back nil for a return value. This is our clue that our test is executing the function as we expect, but our function is not yet implemented (does not contain a function body). Let’s crack on with that. In Ruby, there’s a very convenient method defined on the String type whose job is to count the presence of particular subsequences (substrings in our case). To no one’s suprise, it’s called count. Let’s use that to count the number of nucleotides and return that in a string format. def count_nucleotides(strand) strand.count(&apos;A&apos;) + strand.count(&apos;C&apos;) + strand.count(&apos;G&apos;) + strand.count(&apos;T&apos;) end Let’s run our test again. $ ruby counting_nucleotides.rb Run options: --seed 3996 # Running: F Finished in 0.000411s, 2433.0901 runs/s, 2433.0901 assertions/s. 1) Failure: nucleotide counting function#test_0001_returns a count of 2 2 2 2 for strand &quot;ATCGATCG&quot; [counting_nucleotides.rb:13]: Expected: &quot;2 2 2 2&quot; Actual: 8 1 runs, 1 assertions, 1 failures, 0 errors, 0 skips Whoops! That looks like it found the number of substrings correctly. However, because of a programming mistake, it looks like it added all the occurences together, instead of presenting them in a formatted string. Let’s do that in the easiest way that comes to mind - using string concatenation and casting the integer representing the count back to a string, while also adding some spaces (so that we get closer to the expected output): def count_nucleotides(strand) strand.count(&apos;A&apos;).to_s + &quot; &quot; + strand.count(&apos;C&apos;).to_s + &quot; &quot; + strand.count(&apos;G&apos;).to_s + &quot; &quot; + strand.count(&apos;T&apos;).to_s end Let’s see what happens now… $ ruby counting_nucleotides.rb Run options: --seed 37259 # Running: . Finished in 0.000321s, 3115.2648 runs/s, 3115.2648 assertions/s. 1 runs, 1 assertions, 0 failures, 0 errors, 0 skips It worked! I mean, our code is a bit atrocious could be better, but here we have our first version of it working. 🎉 Now that we have our first unit test passing, let’s think a bit more about the test cases we want. We want at least a representative sample of each of the following: Positive cases, Negative cases, Degenerate cases. Positive cases are cases in which we exercise the happy path - the code path we were most anticipating when we were designing our code. Negative cases are cases in which we divert away from the happy path, and try to exercise error conditions, etc. Degenerate cases are cases in which we test around boundary conditions, such as empty lists, strings, etc, to see if our function can handle these cases. We already have a test for a positive case, so right now, it might make more sense for us to test against a negative case. So what would be a negative case for us? We are being passed a strand in as a string. Given that a string can have a lot more characters than just the four representing nucleobases, what happens if we have a string that has characters that don’t represent a nucleotide base? What happens if we have something like ATCGW for a strand? Let’s see. it &apos;throws an exception if a non-base encoding character is found in the strand&apos; do strand = &apos;ATCGW&apos; assert_raises(ArgumentError) { count_nucleotides(strand) } end Let’s run it to see what happened this time. $ ruby counting_nucleotides.rb Run options: --seed 54524 # Running: .F Finished in 0.000506s, 3952.5692 runs/s, 3952.5692 assertions/s. 1) Failure: nucleotide counting function#test_0002_throws an exception if a non-base encoding character is found in the strand [counting_nucleotides.rb:19]: ArgumentError expected but nothing was raised. 2 runs, 2 assertions, 1 failures, 0 errors, 0 skips 😱 Yikes! We were expecting an exception to be raised, but none was raised. That means that our code had no issue handling the invalid string. Let’s fix that. Let’s fix that the simplest way we can: by defining a list of illegal characters for the strand string and seeing if they are present in the string. That gets us with the following version of count_nucleotides: def count_nucleotides(strand) illegal_chars = &apos;BDEFHIJKLNOPQRSUVWXYZ&apos; illegal_chars.split(&apos;&apos;).each do |char| if strand.include?(char) then raise ArgumentError.new(&apos;Illegal character in strand &apos; + char) end end strand.count(&apos;A&apos;).to_s + &quot; &quot; + strand.count(&apos;C&apos;).to_s + &quot; &quot; + strand.count(&apos;G&apos;).to_s + &quot; &quot; + strand.count(&apos;T&apos;).to_s end Let’s see where we stand now: $ ruby counting_nucleotides.rb Run options: --seed 25460 # Running: .. Finished in 0.000348s, 5747.1265 runs/s, 5747.1265 assertions/s. 2 runs, 2 assertions, 0 failures, 0 errors, 0 skips Nice. That works, so now both our positive case and our negative test cases pass. The only downside is that we are left with a counting_nucleotides function that looks a bit hard to read - not to mention a bit wasteful, too. (Aside: It loops through the string a lot more times than it needs to, as it loops once per every illegal character it’s looking for, and then once for every character it’s searching the count for.) At this point, it’s worth to pause, and reflect on where we are in the process so far. TDD is a loop of the following 3 steps: Write a failing test. Make the test pass. Refactor the implementation. (Refactoring is the reorganisation of the code with the aim of improving it with regard to some metric, say, robustness, readability, performance, etc) Up until this point, we have been focusing on the first two steps, but did none of the third one. We usually refactor once we get some of our implementation done, and all our tests are passing. In other words, now is as good time as any to refactor our code. Let’s have a look at our feature code, the count_nucleotides function. What if, instead of looping so many times, we looped just once, and collected both counts and watched out for any illegal character at the same time? That does sound like it should improve our performance, now, doesn’t it? Let’s go ahead and do this, and see what happens. def count_nucleotides(strand) count_a = 0 count_t = 0 count_c = 0 count_g = 0 strand.split(&apos;&apos;).each do |base| if base == &apos;A&apos; then count_a += 1 elsif base == &apos;T&apos; then count_t += 1 elsif base == &apos;C&apos; then count_c += 1 elsif base == &apos;G&apos; then count_g += 1 else raise ArgumentError.new(&apos;Invalid character in strand &apos; + base) end end &quot;#{count_a} #{count_t} #{count_c} #{count_g}&quot; end Looks simpler to me. Does it work, though? $ ruby counting_nucleotides.rb Run options: --seed 48449 # Running: .. Finished in 0.000378s, 5291.0053 runs/s, 5291.0053 assertions/s. 2 runs, 2 assertions, 0 failures, 0 errors, 0 skips It does. And just like this, we saw the massive benefit of having automated tests for this: we did some pretty significant structural changes to our function under test, but even so, we are confident that its observable behaviour remains unchanged given our tests and their coverage. Now that we have both the positive and negative tests, can we write a test for the degenerate case? Turns out we can. A degenerate case for us would be an empty string (&quot;&quot;), given that we anticipate the strand to exist (signified by a non-empty string). Before we go ahead and write our test case, let’s have a bit of a think around the behaviour of our function in the case of an empty string. Should it: Return a count of 0 0 0 0, or Raise an exception? Usually, in situations like this, a decision like this already forms part of our specification - but in our case, though, the exercise contains no indication as to what is considered canonical, so we can choose either. Let’s go with expecting a count of 0 0 0 0 for this one (there don’t appear to be any significant benefits whichever one we choose). it &apos;returns a count of 0 0 0 0 for a strand with zero bases (empty string)&apos; do strand = &apos;&apos; nucleotide_count = &apos;0 0 0 0&apos; result = count_nucleotides(strand) assert_equal nucleotide_count, result end Let’s check our function’s behaviour: $ ruby counting_nucleotides.rb Run options: --seed 33926 # Running: ... Finished in 0.000378s, 7936.5079 runs/s, 7936.5079 assertions/s. 3 runs, 3 assertions, 0 failures, 0 errors, 0 skips Very nice. Are we done, now? Not so fast. There’s a requirement in our specification that we have ignored so far: Given: A DNA string s of length at most 1000 nt. (Emphasis mine.) Let’s quickly add a test case with an invalid length (&amp;gt; 1000 nucleotides) to see how our code behaves with against this requirement: it &apos;throws an exception if a strand is more than 1000nt long&apos; do strand = &apos;A&apos; * 1005 assert_raises(ArgumentError) { count_nucleotides(strand) } end $ ruby counting_nucleotides.rb Run options: --seed 15834 # Running: ...F Finished in 0.000579s, 6908.4628 runs/s, 6908.4628 assertions/s. 1) Failure: nucleotide counting function#test_0004_throws an exception if a strand is more than 1000nt long [counting_nucleotides.rb:52]: ArgumentError expected but nothing was raised. 4 runs, 4 assertions, 1 failures, 0 errors, 0 skips The test fails, as we were anticipating an exception but none was raised. Let’s change our function to factor in this new requirement. def count_nucleotides(strand) count_a = 0 count_t = 0 count_c = 0 count_g = 0 if strand.length &amp;gt; 1000 then raise ArgumentError.new(&apos;A strand of at most 1000nt is expected&apos;) end strand.split(&apos;&apos;).each do |base| if base == &apos;A&apos; then count_a += 1 elsif base == &apos;T&apos; then count_t += 1 elsif base == &apos;C&apos; then count_c += 1 elsif base == &apos;G&apos; then count_g += 1 else raise ArgumentError.new(&apos;Invalid character in strand &apos; + base) end end &quot;#{count_a} #{count_t} #{count_c} #{count_g}&quot; end Let’s see how our test does now: $ ruby counting_nucleotides.rb Run options: --seed 14091 # Running: .... Finished in 0.000355s, 11267.6056 runs/s, 11267.6056 assertions/s. 4 runs, 4 assertions, 0 failures, 0 errors, 0 skips Very nice. Everything passes now. Before we wrap this up, let’s make one final addition to our test case. Do you remember how I mentioned that the exercise specification describes a test case already? We can incorporate this into our test cases. As a matter of fact, we can substitute this one for the simpler positive case we had. it &apos;returns a count of 20 12 17 21 for the specification strand&apos; do strand = &apos;AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC&apos; nucleotide_count = &apos;20 12 17 21&apos; result = count_nucleotides(strand) assert_equal nucleotide_count, result end Let’s see how we fare against the story test case (the one given to us in the specification). $ ruby counting_nucleotides.rb Run options: --seed 17159 # Running: ..... Finished in 0.000428s, 11682.2430 runs/s, 11682.2430 assertions/s. 5 runs, 5 assertions, 0 failures, 0 errors, 0 skips Looks like everything works as expected. 🎉 Before I wrap up, I would be remiss if I did not mention that this particular approach of designing code (Test-Driven Development) works very well when we know the expected output of our code (say, when we know a lot about the domain, or when our specification allows for examples that demonstrate expected input and output). It doesn’t work as great, however, when we don’t know what the output is (say, for instance, when we do exploratory programming, as in the case of exploring an API that’s given to us). The complete code for this small exercise is listed below: require &apos;minitest/autorun&apos; ## IMPLEMENTATION CODE def count_nucleotides(strand) count_a = 0 count_t = 0 count_c = 0 count_g = 0 if strand.length &amp;gt; 1000 then raise ArgumentError.new(&apos;A strand of at most 1000nt is expected&apos;) end strand.split(&apos;&apos;).each do |base| if base == &apos;A&apos; then count_a += 1 elsif base == &apos;T&apos; then count_t += 1 elsif base == &apos;C&apos; then count_c += 1 elsif base == &apos;G&apos; then count_g += 1 else raise ArgumentError.new(&apos;Invalid character in strand &apos; + base) end end &quot;#{count_a} #{count_c} #{count_g} #{count_t}&quot; end ## TEST CODE describe &apos;nucleotide counting function&apos; do # Positive case it &apos;returns a count of 20 12 17 21 for the specification strand&apos; do strand = &apos;AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC&apos; nucleotide_count = &apos;20 12 17 21&apos; result = count_nucleotides(strand) assert_equal nucleotide_count, result end # Negative cases it &apos;throws an exception if a non-base encoding character is found in the strand&apos; do strand = &apos;ATCGW&apos; assert_raises(ArgumentError) { count_nucleotides(strand) } end it &apos;throws an exception if a strand is more than 1000nt long&apos; do strand = &apos;A&apos; * 1005 assert_raises(ArgumentError) { count_nucleotides(strand) } end # Degenerate cases it &apos;returns a count of 0 0 0 0 for a strand with zero bases (empty string)&apos; do strand = &apos;&apos; nucleotide_count = &apos;0 0 0 0&apos; result = count_nucleotides(strand) assert_equal nucleotide_count, result end end</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Distro forking 101: How do you fork a Linux distro?</title>
      
      
      <link href="https://nlightnfotis.github.io/2014/07/09/distro-forking-101/" rel="alternate" type="text/html" title="Distro forking 101: How do you fork a Linux distro?" />
      
      <published>2014-07-09T15:04:00+00:00</published>
      <updated>2014-07-09T15:04:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2014/07/09/distro-forking-101</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2014/07/09/distro-forking-101/">&lt;h1&gt;Defining the GNU/Linux distribution&lt;/h1&gt;

&lt;p&gt;If you are here, we can safely assume that you already know what a &lt;strong&gt;GNU/Linux software
distribution&lt;/strong&gt; is, but for completion’s sake, let’s just define so we all have the same context.&lt;/p&gt;

&lt;p&gt;A GNU/Linux distribution is a collection of system and application software, packaged together
by the distribution’s developers, so that they are distributed in a nicely integrated bundle, ready
to be used by users and developers alike. Software typically included in such a distribution
ranges from a compiler toolchain, to the C library, to filesystem utilities to text editors.&lt;/p&gt;

&lt;p&gt;As you can imagine, from the existence of several different GNU/Linux distributions, there are 
multiple ways that you could possibly combine all these different applications and their respective
configurations, not to mention that you could include even more specialised software, depending
on the target audience of the distribution (such as multimedia software for a distribution like 
&lt;a href=&quot;http://ubuntustudio.org/&quot;&gt;Ubuntu Studio&lt;/a&gt; or penetration testing tools for a distribution such as
&lt;a href=&quot;http://www.kali.org/&quot;&gt;Kali Linux&lt;/a&gt;)&lt;/p&gt;

&lt;h1&gt;The “f” word&lt;/h1&gt;

&lt;p&gt;But even with such a great number of different software collections and their respective configurations
there still may not be one that appeals to your specific needs. That’s ok though, as you can still
customize each and every distribution to your specific liking. Extensive customization is known to
create a &lt;em&gt;differentiation point&lt;/em&gt; known as a &lt;strong&gt;potential forking point&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Forking is a term that has been known to carry negative connotations. &lt;a href=&quot;http://en.wikipedia.org/wiki/Fork_%28software_development%29&quot;&gt;As wikipedia puts it&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the term often implies not merely a development branch, but a split in the developer community
a form of schism.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Historically, it has also been used as a leverage to coerce a project’s developers 
into merging code into their master branches
that they didn’t originally want to, or otherwise take a decision that they wouldn’t have taken
if not under the pressure of a &lt;em&gt;“fork”&lt;/em&gt;. But why is it so?&lt;/p&gt;

&lt;p&gt;You see, traditionally, forking a project meant a couple of things: For starters, there were now
two, identical projects, competing in the same solution space. 
Those two projects had different development hours and 
features or bug fixes going into them, and eventually, one of the two ended up being obsolete.
Apart from that forking also created an atmosphere of intense competition among the two projects.&lt;/p&gt;

&lt;p&gt;However, in 2014, and the advent of the distributed version control systems such as &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt; 
and &lt;a href=&quot;http://mercurial.selenic.com/&quot;&gt;mercurial&lt;/a&gt; and of the social coding websites such as &lt;a href=&quot;http://www.github.com&quot;&gt;Github&lt;/a&gt; and &lt;a href=&quot;http://www.bitbucket.org&quot;&gt;Bitbucket&lt;/a&gt;, the term is finally taking
on a more lax meaning, as just another code repository that may or may not enjoy major 
(or even minor, for that matter) development.&lt;/p&gt;

&lt;h2&gt;Forking a GNU/Linux distribution&lt;/h2&gt;

&lt;p&gt;So, up until now we have discussed what a GNU/Linux distribution is, and what a fork is. 
However, we haven’t discussed yet what it means to fork a GNU/Linux distribution.&lt;/p&gt;

&lt;p&gt;You see, what differentiates each distro from the other ones, apart from the software collection 
that they contain, is the way in which they provide (and deploy) that software. Yes, we are talking about software packages and their respective package managers. Distributions from the Debian
(.deb) family are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dpkg&lt;/code&gt; along with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synaptic&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aptitude&lt;/code&gt; or some other higher level
tool. RPM (.rpm) based distributions may use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpm&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dnf&lt;/code&gt; or  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zypper&lt;/code&gt; or another higher level tool. 
Other distributions, not based on the aforementioned may choose to roll their own configuration
of packages and package managers, with Arch Linux using its own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pacman&lt;/code&gt;, Sabayon uses its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entropy&lt;/code&gt;
package manager, etc.&lt;/p&gt;

&lt;p&gt;Now, naturally, if you want to customize an application to your liking, you have many ways in which
you could do that. One of them is downloading the tarball from the upstream’s website or ftp 
server, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./configure&lt;/code&gt; it and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make install&lt;/code&gt; it. But if you do start customizing
lots of applications this way, it can become tedious and unwieldy too soon. After all, what did
that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make install&lt;/code&gt; install exactly? Will the new update replace those files? What were your
configuration options? Did they replace the files the package manager installed?&lt;/p&gt;

&lt;p&gt;In this case, it really pays off to learn &lt;strong&gt;packaging&lt;/strong&gt; software for your distribution of choice.
What this means is to learn the format of packages your distribution’s package manager accepts
as well as how you could produce them. This way, instead of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/code&gt; 
cycle, you just have beautiful software packages, that you can control more tightly, you can 
update more easily and you can also distribute them to your friends if you so desire. As an added
bonus, now the package manager also knows about those files, and you can install, remove
or update them much more easily. What’s not to like?&lt;/p&gt;

&lt;p&gt;After you have created some custom packages, you may also wish to create a repository
to contain them and update straight from that. &lt;strong&gt;Congratulations, you have created your custom
distribution, and a potential fork.&lt;/strong&gt; While you are at it, if you really want to fork the distribution,
you could as well take the distribution’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base&lt;/code&gt; packages, customize them, rebuild them, and then
distribute them. &lt;strong&gt;Congratulations again, now you have your true GNU/Linux distribution fork&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;That seems easy. More specifically?&lt;/h1&gt;

&lt;p&gt;Yes of course. Let’s take a look at how you might want to go about forking some well known
GNU/Linux distribution.&lt;/p&gt;

&lt;h2&gt;Debian&lt;/h2&gt;

&lt;p&gt;In Debian, your usual procedure if you wish to customize a package is the below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, you make sure you have the essential building software installed. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-get install build-essential devscripts debhelper&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then you need to download the package’s build dependencies. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-get build-dep $package_name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now it’s time to download it’s sources, via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-get source $package_name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Proceed with customizing it to your liking (update it, patch the sources, etc)&lt;/li&gt;
  &lt;li&gt;Now it’s time to rebuild it. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debuild -us -uc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming all went fine, you should now have an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$package_name.deb&lt;/code&gt; file in your current 
directory ready to be installed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dpkg -i $package_name.deb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please take note that the above is not an extensive treatise into debian packaging by any means.
If you want to build custom debian packages, here are some links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.debian.org/IntroDebianPackaging&quot;&gt;Debian wiki: intro to Debian packaging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://people.connexer.com/~roberto/howtos/debcustomize&quot;&gt;Roberto C Sanchez: Debian package customization how to&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.debian.org/HowToPackageForDebian&quot;&gt;Debian wiki: How to package for Debian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you have your custom packages, it’s time to build a repository to contain them. There 
are many tools you can use to do that, including the official debian package archiving tool
known as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dak&lt;/code&gt;, but if you want a personal repository without too much hassle, it’s better if you
use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reprepro&lt;/code&gt;. I won’t go to full length on that here, &lt;a href=&quot;http://www.debian-administration.org/article/286/Setting_up_your_own_APT_repository_with_upload_support&quot;&gt;but instead I will lead you to a very
good guide to do so if you so desire&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Fedora&lt;/h2&gt;

&lt;p&gt;Building packages for fedora is a procedure similar to the debian one. Fedora however is more
convenient in one aspect: &lt;a href=&quot;http://download.fedoraproject.org/pub/fedora/linux/releases/20/Fedora/source/iso/Fedora-20-source-DVD.iso&quot;&gt;It allows you to download a DVD image with all the sources in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rpm&lt;/code&gt; form
ready for you to customize and rebuild to your tastes.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from that, the usual procedure is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SRPM&lt;/code&gt; (source RPM) via any means. You could do that using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yumdownloader&lt;/code&gt; utility, likewise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yumdownloader $package_name&lt;/code&gt;. To use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yumdownloader&lt;/code&gt;, you need
to have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum-utils&lt;/code&gt; installed.&lt;/li&gt;
  &lt;li&gt;After you have downloaded the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SRPM&lt;/code&gt;, next you have to unpack it: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpm -i $package_name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Next up, you customize the package to your liking (patch the sources, etc)&lt;/li&gt;
  &lt;li&gt;Finally, you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPECS&lt;/code&gt; folder, and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpmbuild -ba $package.spec&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again the above mentioned steps may not be 100% correct. If you want to go down this route,
see the following links for more information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.centos.org/HowTos/RebuildSRPM&quot;&gt;Centos wiki: Rebuild SRPM how-to&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cyberciti.biz/faq/yum-download-source-packages-from-rhn/&quot;&gt;cyberciti: yum Download all Source Packages from RedHat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bradthemad.org/tech/notes/patching_rpms.php&quot;&gt;bradthemad.org: How to patch and rebuild an RPM package&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rpm.org/max-rpm/ch-rpm-build.html&quot;&gt;rpm.org: Chapter 11. Building packages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fedoraproject.org/wiki/How_to_create_an_RPM_package&quot;&gt;Fedora wiki: How to create an RPM package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next up, is the repository creation step.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To create a yum repository, you need to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum install createrepo&lt;/code&gt;. 
After that you need to create a directory to use as the repository, likewise
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir /var/ftp/repo/Fedora/19/{SRPMS, i386,x86_64)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;After that you move your i386 packages to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/ftp/repo/Fedora/19/i386&lt;/code&gt;, and the rest
of the packages to their respective folders.&lt;/li&gt;
  &lt;li&gt;Next step is adding a configuration file to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/yum.repos.d/&lt;/code&gt; that describes your repository
to yum.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, not definitive, and for more information, take a look at these links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/sec-Yum_Repository.html&quot;&gt;Redhat: Creating a yum repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.techrepublic.com/blog/linux-and-open-source/create-your-own-yum-repository&quot;&gt;techrepublic: Creating your own yum repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.fedoraproject.org/en-US/Fedora/14/html/Deployment_Guide/sec-Creating_a_Yum_Repository.html&quot;&gt;Fedora documentation: Creating a yum repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Arch Linux&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.archlinux.org/&quot;&gt;Arch Linux&lt;/a&gt;, at least in comparison to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.deb&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rpm&lt;/code&gt; package
distribution families is very easy to customize to your liking. That’s to be expected though
as Arch Linux is a distribution that sells itself of the customization capabilities it offers to its user.&lt;/p&gt;

&lt;p&gt;In essence, if you want to customize a package, the general process is this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download Arch tarball that contains the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PKGBUILD&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;untar the tarball&lt;/li&gt;
  &lt;li&gt;(Optional) download the upstream tarball referenced in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PKGBUILD&lt;/code&gt;, and modify it
 to your liking&lt;/li&gt;
  &lt;li&gt;run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;makepkg&lt;/code&gt; in the folder containing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PKGBUILD&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;install (using pacman) the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xz&lt;/code&gt; file produced after the whole process is finished.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to download the official {core | extra | community} packages, you need to run as root
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abs&lt;/code&gt;. This will create a directory tree that contains the files required for building any package 
in the official repositories.&lt;/p&gt;

&lt;p&gt;Next up, you can create a custom local repository with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo-add&lt;/code&gt; tool, and then proceeding
with editing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/pacman.conf&lt;/code&gt; and adding an entry for your repository there. For more information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://arch-stable.blogspot.gr/2012/02/make-your-own-local-repo-for-arch-linux.html&quot;&gt;arch-stable: make your own local repo for arch linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/makepkg&quot;&gt;arch wiki: makepkg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Pacman_tips&quot;&gt;arch wiki: pacman tips&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Arch_Build_System&quot;&gt;arch wiki: Arch Build System&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Pacman#Repositories&quot;&gt;arch wiki: Pacman#Repositories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;To fork or not to fork?&lt;/h1&gt;

&lt;p&gt;Well, that’s not an easy question to answer. My opinion is that it’s extremely educational to
do a &lt;strong&gt;&lt;em&gt;soft&lt;/em&gt;&lt;/strong&gt; fork, clone the distribution’s core repository, and for some time maintain your own
distribution based on it, that is, update and customize all the repositories. Do that for some months,
then go back to using your distribution of choice now that you are enlightened with how it works
under the hood. The reason this is very educational is that it will teach you the ins and outs of
your distribution, teach you about &lt;strong&gt;all&lt;/strong&gt; the software in it, how it integrates, what its role is.
It will teach you packaging which is a tremendously undervalued skill, as you can customize
your experience to your liking, and it will make you appreciate the effort going into maintaining
the distribution.&lt;/p&gt;

&lt;p&gt;As for doing a &lt;strong&gt;hard&lt;/strong&gt; fork, that is creating your own distribution, that you commit to maintaining
it for a long time, my opinion is that it’s simply not worth it. Maintaining a distribution, be it
by yourself, or with your friends, is a tremendous amount of work, that’s not worth it unless
you have other goals you want to achieve by that. If all you want to do is to customize your 
distribution of choice to your liking, then go ahead, learn packaging for it, customize-package
the applications you want, then create your own repo - but always track the upstream. Diverging
too much from the upstream is not worth the hassle, as you will end up spending more time
maintaining than using the distribution in the end.&lt;/p&gt;

&lt;h2&gt;tl;dr:&lt;/h2&gt;

&lt;p&gt;If you want to do a small scale, private fork in order to see what’s under the hood of your Linux
distro; by all means go ahead.&lt;/p&gt;

&lt;p&gt;If you want to do a large scale, public fork, then take your time to calculate the effort, if it’s worth it,
and if you could just help the upstream distribution implement the features you want.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="linux" />
      
        <category term="distro" />
      
        <category term="fork" />
      
        <category term="debian" />
      
        <category term="arch" />
      
        <category term="fedora" />
      

      
        <summary type="html">Defining the GNU/Linux distribution If you are here, we can safely assume that you already know what a GNU/Linux software distribution is, but for completion’s sake, let’s just define so we all have the same context. A GNU/Linux distribution is a collection of system and application software, packaged together by the distribution’s developers, so that they are distributed in a nicely integrated bundle, ready to be used by users and developers alike. Software typically included in such a distribution ranges from a compiler toolchain, to the C library, to filesystem utilities to text editors. As you can imagine, from the existence of several different GNU/Linux distributions, there are multiple ways that you could possibly combine all these different applications and their respective configurations, not to mention that you could include even more specialised software, depending on the target audience of the distribution (such as multimedia software for a distribution like Ubuntu Studio or penetration testing tools for a distribution such as Kali Linux) The “f” word But even with such a great number of different software collections and their respective configurations there still may not be one that appeals to your specific needs. That’s ok though, as you can still customize each and every distribution to your specific liking. Extensive customization is known to create a differentiation point known as a potential forking point. Forking is a term that has been known to carry negative connotations. As wikipedia puts it, the term often implies not merely a development branch, but a split in the developer community a form of schism. Historically, it has also been used as a leverage to coerce a project’s developers into merging code into their master branches that they didn’t originally want to, or otherwise take a decision that they wouldn’t have taken if not under the pressure of a “fork”. But why is it so? You see, traditionally, forking a project meant a couple of things: For starters, there were now two, identical projects, competing in the same solution space. Those two projects had different development hours and features or bug fixes going into them, and eventually, one of the two ended up being obsolete. Apart from that forking also created an atmosphere of intense competition among the two projects. However, in 2014, and the advent of the distributed version control systems such as git and mercurial and of the social coding websites such as Github and Bitbucket, the term is finally taking on a more lax meaning, as just another code repository that may or may not enjoy major (or even minor, for that matter) development. Forking a GNU/Linux distribution So, up until now we have discussed what a GNU/Linux distribution is, and what a fork is. However, we haven’t discussed yet what it means to fork a GNU/Linux distribution. You see, what differentiates each distro from the other ones, apart from the software collection that they contain, is the way in which they provide (and deploy) that software. Yes, we are talking about software packages and their respective package managers. Distributions from the Debian (.deb) family are using dpkg along with apt or synaptic or aptitude or some other higher level tool. RPM (.rpm) based distributions may use rpm with yum or dnf or zypper or another higher level tool. Other distributions, not based on the aforementioned may choose to roll their own configuration of packages and package managers, with Arch Linux using its own pacman, Sabayon uses its entropy package manager, etc. Now, naturally, if you want to customize an application to your liking, you have many ways in which you could do that. One of them is downloading the tarball from the upstream’s website or ftp server, ./configure it and then make and make install it. But if you do start customizing lots of applications this way, it can become tedious and unwieldy too soon. After all, what did that make install install exactly? Will the new update replace those files? What were your configuration options? Did they replace the files the package manager installed? In this case, it really pays off to learn packaging software for your distribution of choice. What this means is to learn the format of packages your distribution’s package manager accepts as well as how you could produce them. This way, instead of the ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install cycle, you just have beautiful software packages, that you can control more tightly, you can update more easily and you can also distribute them to your friends if you so desire. As an added bonus, now the package manager also knows about those files, and you can install, remove or update them much more easily. What’s not to like? After you have created some custom packages, you may also wish to create a repository to contain them and update straight from that. Congratulations, you have created your custom distribution, and a potential fork. While you are at it, if you really want to fork the distribution, you could as well take the distribution’s base packages, customize them, rebuild them, and then distribute them. Congratulations again, now you have your true GNU/Linux distribution fork. That seems easy. More specifically? Yes of course. Let’s take a look at how you might want to go about forking some well known GNU/Linux distribution. Debian In Debian, your usual procedure if you wish to customize a package is the below: First, you make sure you have the essential building software installed. apt-get install build-essential devscripts debhelper Then you need to download the package’s build dependencies. apt-get build-dep $package_name Now it’s time to download it’s sources, via apt-get source $package_name Proceed with customizing it to your liking (update it, patch the sources, etc) Now it’s time to rebuild it. debuild -us -uc Assuming all went fine, you should now have an $package_name.deb file in your current directory ready to be installed with dpkg -i $package_name.deb. Please take note that the above is not an extensive treatise into debian packaging by any means. If you want to build custom debian packages, here are some links: Debian wiki: intro to Debian packaging Roberto C Sanchez: Debian package customization how to Debian wiki: How to package for Debian Now that you have your custom packages, it’s time to build a repository to contain them. There are many tools you can use to do that, including the official debian package archiving tool known as dak, but if you want a personal repository without too much hassle, it’s better if you use reprepro. I won’t go to full length on that here, but instead I will lead you to a very good guide to do so if you so desire Fedora Building packages for fedora is a procedure similar to the debian one. Fedora however is more convenient in one aspect: It allows you to download a DVD image with all the sources in .rpm form ready for you to customize and rebuild to your tastes. Apart from that, the usual procedure is the following: Download the SRPM (source RPM) via any means. You could do that using the yumdownloader utility, likewise yumdownloader $package_name. To use yumdownloader, you need to have yum-utils installed. After you have downloaded the SRPM, next you have to unpack it: rpm -i $package_name Next up, you customize the package to your liking (patch the sources, etc) Finally, you cd to the SPECS folder, and then rpmbuild -ba $package.spec Again the above mentioned steps may not be 100% correct. If you want to go down this route, see the following links for more information: Centos wiki: Rebuild SRPM how-to cyberciti: yum Download all Source Packages from RedHat bradthemad.org: How to patch and rebuild an RPM package rpm.org: Chapter 11. Building packages Fedora wiki: How to create an RPM package Next up, is the repository creation step. To create a yum repository, you need to yum install createrepo. After that you need to create a directory to use as the repository, likewise mkdir /var/ftp/repo/Fedora/19/{SRPMS, i386,x86_64). After that you move your i386 packages to /var/ftp/repo/Fedora/19/i386, and the rest of the packages to their respective folders. Next step is adding a configuration file to /etc/yum.repos.d/ that describes your repository to yum. Again, not definitive, and for more information, take a look at these links: Redhat: Creating a yum repository techrepublic: Creating your own yum repository Fedora documentation: Creating a yum repository Arch Linux Arch Linux, at least in comparison to .deb and .rpm package distribution families is very easy to customize to your liking. That’s to be expected though as Arch Linux is a distribution that sells itself of the customization capabilities it offers to its user. In essence, if you want to customize a package, the general process is this: Download Arch tarball that contains the PKGBUILD file untar the tarball (Optional) download the upstream tarball referenced in the PKGBUILD, and modify it to your liking run makepkg in the folder containing the PKGBUILD install (using pacman) the .xz file produced after the whole process is finished. In order to download the official {core | extra | community} packages, you need to run as root abs. This will create a directory tree that contains the files required for building any package in the official repositories. Next up, you can create a custom local repository with the repo-add tool, and then proceeding with editing /etc/pacman.conf and adding an entry for your repository there. For more information: arch-stable: make your own local repo for arch linux arch wiki: makepkg arch wiki: pacman tips arch wiki: Arch Build System arch wiki: Pacman#Repositories To fork or not to fork? Well, that’s not an easy question to answer. My opinion is that it’s extremely educational to do a soft fork, clone the distribution’s core repository, and for some time maintain your own distribution based on it, that is, update and customize all the repositories. Do that for some months, then go back to using your distribution of choice now that you are enlightened with how it works under the hood. The reason this is very educational is that it will teach you the ins and outs of your distribution, teach you about all the software in it, how it integrates, what its role is. It will teach you packaging which is a tremendously undervalued skill, as you can customize your experience to your liking, and it will make you appreciate the effort going into maintaining the distribution. As for doing a hard fork, that is creating your own distribution, that you commit to maintaining it for a long time, my opinion is that it’s simply not worth it. Maintaining a distribution, be it by yourself, or with your friends, is a tremendous amount of work, that’s not worth it unless you have other goals you want to achieve by that. If all you want to do is to customize your distribution of choice to your liking, then go ahead, learn packaging for it, customize-package the applications you want, then create your own repo - but always track the upstream. Diverging too much from the upstream is not worth the hassle, as you will end up spending more time maintaining than using the distribution in the end. tl;dr: If you want to do a small scale, private fork in order to see what’s under the hood of your Linux distro; by all means go ahead. If you want to do a large scale, public fork, then take your time to calculate the effort, if it’s worth it, and if you could just help the upstream distribution implement the features you want.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">How the Compiler, the Library and the Kernel work - Part 3</title>
      
      
      <link href="https://nlightnfotis.github.io/2014/06/20/how-the-compiler/" rel="alternate" type="text/html" title="How the Compiler, the Library and the Kernel work - Part 3" />
      
      <published>2014-06-20T20:49:00+00:00</published>
      <updated>2014-06-20T20:49:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2014/06/20/how-the-compiler</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2014/06/20/how-the-compiler/">&lt;p&gt;In the last part of this series, we talked about the compiler’s composition, including the assembler
and the linker. We showed what happens when the compiler runs, and what’s the output
of translation software such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;as&lt;/code&gt; etc. In this final part of the series, we are going
to talk about the C library, how our programs interface with it, and how it interfaces with 
the kernel.&lt;/p&gt;

&lt;h1&gt;The C Standard Library&lt;/h1&gt;

&lt;p&gt;The C Standard Library is pretty much a part of every UNIX like operating system. It’s basically
a collection of code, including functions, macros, type definitions etc, in order to provide facilities
such as string handling (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string.h&lt;/code&gt;), mathematical computations (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;math.h&lt;/code&gt;), input and output
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdio.h&lt;/code&gt;), etc.&lt;/p&gt;

&lt;p&gt;GNU/Linux operating systems are generally using the &lt;a href=&quot;http://www.gnu.org/software/libc/libc.html&quot;&gt;GNU C Library implementation(GLIBC)&lt;/a&gt;,
but it’s common to find other C libraries being used (especially in embedded systems) such as 
&lt;a href=&quot;http://www.uclibc.org&quot;&gt;uClibC&lt;/a&gt;, &lt;a href=&quot;http://sources.redhat.com/newlib&quot;&gt;newlib&lt;/a&gt;, or in the case
of Android/Linux systems &lt;a href=&quot;https://android.googlesource.com/platform/bionic.git&quot;&gt;Bionic&lt;/a&gt;.
BSD style operating systems usually have their own implementation of a C library.&lt;/p&gt;

&lt;h2&gt;So, how does one “use” the C Standard Library?&lt;/h2&gt;

&lt;p&gt;So, now that we are acquainted with the C Library, how do you make use of it, you ask? The answer is:
&lt;strong&gt;automagically&lt;/strong&gt; :). Hold on right there; that’s not exactly a hyperbole. You see, when you
write a basic C program, you usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include &amp;lt;some_header.h&amp;gt;&lt;/code&gt; and then continue with
using the code declared in that header. We have explained in the previous part of this series
that when we use a function, say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf()&lt;/code&gt;, in reality it’s the linker that does the hard work 
and allows us to use this function, by linking our program against the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;so&lt;/code&gt; (shared 
object). So in essence, when you need to use the C Standard Library, you just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include&lt;/code&gt;
headers that belong to it, and the linker will resolve the references to the code included.&lt;/p&gt;

&lt;p&gt;Apart from the functions that are defined in the Standards however, a C Library might also
implement further functionality. For example, the Standards don’t say anything about networking.
As a matter of fact, most libraries today may implement not only what’s in the C Standards,
but may also choose to comply with the requirements of the POSIX C library, which is a superset
of the C Standard library.&lt;/p&gt;

&lt;h2&gt;Ok, and how does the C Library manage to provide these services?&lt;/h2&gt;

&lt;p&gt;The answer to this question is simple: Some of the services that the library provides, it does so
without needing any sort of special privileges, being normal, userspace C code, while others
need to ask the Operating’s system Kernel to provide these facilities for the library.&lt;/p&gt;

&lt;p&gt;How does it do so? By calling some functions exported by the kernel to provide certain functionality
 named &lt;strong&gt;system calls&lt;/strong&gt;. System calls are the fundamental interface between a userspace
application and the Operating System Kernel. For example consider this:&lt;/p&gt;

&lt;p&gt;You might have a program that has code like this at one point: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd = open(&quot;log.txt&quot;, &quot;w+&quot;);&lt;/code&gt;. That
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt; function is provided by the C Library, but the C Library itself can not execute all of the
functionality that’s required to open a file, so it may call a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys_open()&lt;/code&gt; system call that will
ask the kernel to do what’s required to load the file. In this case we say that the library’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt;
call acts as a wrapper function of the system call.&lt;/p&gt;

&lt;h1&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;In this final part of our series, we saw how our applications interface with the C Standard Library
available in our system, and how the Library itself interfaces with the Operating system kernel
to provide the required services needed by the userspace applications.&lt;/p&gt;

&lt;h2&gt;Further Reading:&lt;/h2&gt;

&lt;p&gt;If you want to take a look at the System Call interface in the Linux Operating System, you could
always see the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;man page for the Linux system calls&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="compiler" />
      
        <category term="kernel" />
      
        <category term="libc" />
      

      
        <summary type="html">In the last part of this series, we talked about the compiler’s composition, including the assembler and the linker. We showed what happens when the compiler runs, and what’s the output of translation software such as cc1 or as etc. In this final part of the series, we are going to talk about the C library, how our programs interface with it, and how it interfaces with the kernel. The C Standard Library The C Standard Library is pretty much a part of every UNIX like operating system. It’s basically a collection of code, including functions, macros, type definitions etc, in order to provide facilities such as string handling (string.h), mathematical computations (math.h), input and output (stdio.h), etc. GNU/Linux operating systems are generally using the GNU C Library implementation(GLIBC), but it’s common to find other C libraries being used (especially in embedded systems) such as uClibC, newlib, or in the case of Android/Linux systems Bionic. BSD style operating systems usually have their own implementation of a C library. So, how does one “use” the C Standard Library? So, now that we are acquainted with the C Library, how do you make use of it, you ask? The answer is: automagically :). Hold on right there; that’s not exactly a hyperbole. You see, when you write a basic C program, you usually #include &amp;lt;some_header.h&amp;gt; and then continue with using the code declared in that header. We have explained in the previous part of this series that when we use a function, say printf(), in reality it’s the linker that does the hard work and allows us to use this function, by linking our program against the libc’s so (shared object). So in essence, when you need to use the C Standard Library, you just #include headers that belong to it, and the linker will resolve the references to the code included. Apart from the functions that are defined in the Standards however, a C Library might also implement further functionality. For example, the Standards don’t say anything about networking. As a matter of fact, most libraries today may implement not only what’s in the C Standards, but may also choose to comply with the requirements of the POSIX C library, which is a superset of the C Standard library. Ok, and how does the C Library manage to provide these services? The answer to this question is simple: Some of the services that the library provides, it does so without needing any sort of special privileges, being normal, userspace C code, while others need to ask the Operating’s system Kernel to provide these facilities for the library. How does it do so? By calling some functions exported by the kernel to provide certain functionality named system calls. System calls are the fundamental interface between a userspace application and the Operating System Kernel. For example consider this: You might have a program that has code like this at one point: fd = open(&quot;log.txt&quot;, &quot;w+&quot;);. That open function is provided by the C Library, but the C Library itself can not execute all of the functionality that’s required to open a file, so it may call a sys_open() system call that will ask the kernel to do what’s required to load the file. In this case we say that the library’s open call acts as a wrapper function of the system call. Epilogue In this final part of our series, we saw how our applications interface with the C Standard Library available in our system, and how the Library itself interfaces with the Operating system kernel to provide the required services needed by the userspace applications. Further Reading: If you want to take a look at the System Call interface in the Linux Operating System, you could always see the man page for the Linux system calls</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Introduction to xv6: Adding a new system call.</title>
      
      
      <link href="https://nlightnfotis.github.io/2014/04/28/introduction-to-xv6-adding-a-new-system-call/" rel="alternate" type="text/html" title="Introduction to xv6: Adding a new system call." />
      
      <published>2014-04-28T18:24:00+00:00</published>
      <updated>2014-04-28T18:24:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2014/04/28/introduction-to-xv6-adding-a-new-system-call</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2014/04/28/introduction-to-xv6-adding-a-new-system-call/">&lt;h1&gt;xv6: An introduction&lt;/h1&gt;

&lt;p&gt;If you are like me, a low level pc programmer, it’s hard not to have heard
of &lt;strong&gt;xv6&lt;/strong&gt;. &lt;a href=&quot;http://pdos.csail.mit.edu/6.828/2012/xv6.html&quot;&gt;xv6&lt;/a&gt;, for those
who haven’t really heard of it, is a &lt;em&gt;UNIX version 6&lt;/em&gt; clone, designed
at MIT to help teach operating systems.&lt;/p&gt;

&lt;p&gt;The reasoning behind doing this was fairly simple: &lt;a href=&quot;http://www.lemis.com/grog/Documentation/Lions/&quot;&gt;Up until that point, MIT
had used John Lions’ famous commentary on the Sixth Edition of UNIX&lt;/a&gt;. But V6 was challenging due to a 
number of reasons. To begin with, it was written in a near ancient version
of C (pre K&amp;amp;R), and apart from that, it contained PDP-11 assembly
(a legendary machine for us UNIX lovers, but ancient nonetheless), which
didn’t really help the students that had to study both PDP-11 and the
(more common) x86 architecture to develop another (exokernel) operating
system on.&lt;/p&gt;

&lt;p&gt;So, to make things much more simpler, professors there decided to 
roll with a clone of UNIX version 6, that was x86 specific, 
written in ANSI C and supported multiprocessor machines.&lt;/p&gt;

&lt;p&gt;For a student (or a programmer interested in operating systems), xv6 is 
a unique opportunity to introduce himself to kernel hacking and to the
architecture of UNIX like systems. At about 15k lines of code (iirc), 
including the (primitive) libraries, the userland and the kernel,
it’s very easy (or well, at least easier than production scale UNIX like
systems) to grok, and it’s also very easy to expand on. It also helps
tremendously that xv6 as a whole has magnificent documentation, not only
from MIT, but from other universities that have adopted xv6 for use in their
operating systems syllabus.&lt;/p&gt;

&lt;h2&gt;An introduction to Ensidia: my very personal xv6 fork&lt;/h2&gt;

&lt;p&gt;When I first discovered xv6 I was ecstatic. For the reasons mentioned above
I couldn’t lose on the opportunity to fork xv6 and use it as a personal
testbed for anything I could feel like exploring or testing out.&lt;/p&gt;

&lt;p&gt;As a matter of fact, when I first discovered xv6, &lt;a href=&quot;https://github.com/NlightNFotis/Fotix&quot;&gt;I had just finished 
implementing (the base of) my own UNIX like operating system, named fotix&lt;/a&gt;, 
and the timing of my discovery was great. xv6 had done what I had done,
and also implemented most of what I was planning to work on fotix
(for example, elf file loading), and it was a solid base for further 
development. It also had a userland, which fotix at the time didn’t have.&lt;/p&gt;

&lt;p&gt;After I forked xv6, I spent some time familiriazing myself with the code.
I also cleaned up the source code quite a bit, structuring the code in a 
BSD like folder structure, instead of having all of the code in the same 
folder and made various small scale changes.&lt;/p&gt;

&lt;p&gt;After that for quite some time, I had left ensidia alone and didn’t touch
it much. However, I always felt like I wanted to develop it a bit more
and get to play with its code in interesting ways. I was trying to think of
a great way to get started with kernel hacking on it, in a simple way, to 
get more acquainted with the kernel, and found an interesting pdf with 
interesting project ideas for it. One of them was to add a system call.
I figured out that would be an interesting and quick hack, so hey, why not?&lt;/p&gt;

&lt;h1&gt;Getting started with kernel hacking on xv6: Adding the system call.&lt;/h1&gt;

&lt;p&gt;The system call I decided to introduce was the suggested one. It was
fairly simple sounding too. You have to &lt;strong&gt;introduce a new system call
that returns the number of total system calls that have taken place
so far&lt;/strong&gt;. So let’s see how I went about implementing it:&lt;/p&gt;

&lt;h2&gt;An introduction to system calls in xv6&lt;/h2&gt;

&lt;p&gt;First of all, we should provide some context about what system calls are,
how they are used, and how they are implemented in xv6.&lt;/p&gt;

&lt;p&gt;A system call is a function that a userspace application will use, so as
to ask for a specific service to be provided by the operating system. For
instance with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbrk(n)&lt;/code&gt; system call, a process can ask the kernel to
grow its heap space by n bytes. Another example is the well known &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork()&lt;/code&gt;
system call in the UNIX world, that’s used to create a new process by 
cloning the caller process.&lt;/p&gt;

&lt;p&gt;The way applications signal the kernel that they need that service is
by issueing a software &lt;em&gt;interrupt&lt;/em&gt;. An &lt;em&gt;interrupt&lt;/em&gt; is a signal generated
that notifies the processor that it needs to stop what its currently doing,
and handle the interrupt. This mechanism is also used to notify the processor
that information it was seeking from the disks is in some buffer, ready to
be extracted and processed, or, that a key was pressed in the keyboard. This
is called a hardware interrupt.&lt;/p&gt;

&lt;p&gt;Before the processor stops to handle the interrupt generated, it needs to 
save the current state, so that it can resume the execution in this context
after the interrupt has been handled.&lt;/p&gt;

&lt;p&gt;The code that calls a system call in xv6 looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gas&quot; data-lang=&quot;gas&quot;&gt;# exec(init, argv)
 .globl start
 start:
   pushl $argv
   pushl $init
   pushl $0  // where caller pc would be
   movl $SYS_exec, %eax
   int $T_SYSCALL&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In essence, it pushes the argument of the call to the stack, and puts
the system call number (in the above code, that’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$SYS_exec&lt;/code&gt;) into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%eax&lt;/code&gt;.
The number is used to match the entry in an array that holds pointers to
all the system calls. After that, it generates a software interrupt, with
a code (in this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$T_SYSCALL&lt;/code&gt;) that’s used to index the interrupt
descriptor tables and find the appropriate interrupt handler.&lt;/p&gt;

&lt;p&gt;The code that is specific to find the appropriate interrupt handler is
called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trap()&lt;/code&gt; and is available in the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trap.c&lt;/code&gt;. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trap()&lt;/code&gt; check’s
out the trapnumber in the generated trapframe (a structure that represents
the processor’s state at the time that the trap happened) to be equal to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T_SYSCALL&lt;/code&gt;, it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall()&lt;/code&gt; (the software interrupt handler)
 that’s available in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall.c&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// This is the part of trap that&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// calls syscall()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trapframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trapno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_SYSCALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;killed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;killed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall()&lt;/code&gt; is finally the function that checks out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%eax&lt;/code&gt; to get the 
number of the system call (to index the array with the system 
call pointers), and execute the code corresponding to that system call.&lt;/p&gt;

&lt;p&gt;The implementation of system calls in xv6 is under two files. The first one
is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysproc.c&lt;/code&gt;, and is the one containing the implementation of system calls
correspondent to processes, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysfile.c&lt;/code&gt; that contains the implementation
of system calls regarding the file system.&lt;/p&gt;

&lt;h2&gt;The specific implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numcalls()&lt;/code&gt; system call&lt;/h2&gt;

&lt;p&gt;To implement the system call itself is simple. I did so with a global variable
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall.c&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscallnum&lt;/code&gt;, that’s incremented everytime 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall()&lt;/code&gt;, calls a system call function, that is, the system call
is valid.&lt;/p&gt;

&lt;p&gt;Next we just need a function, the system call implementation that returns
that number to the userspace program that asks for it. Below is the 
function itself, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall()&lt;/code&gt; after our change.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// return the number of system calls that have taken place in&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the system&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sys_numcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscallnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// The syscall() implementation after&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// our change&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NELEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;syscallnum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// increment the syscall counter&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %s: unknown sys call %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that was done, the next few things that were needed to be done
were fairly straight forward. We had to add an index number for the new
system call in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall.h&lt;/code&gt;, expose it to user proccesses via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.h&lt;/code&gt;,
and add a new macro to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usys.S&lt;/code&gt; that defines an asm routine that calls
that specific system call, and change the makefile to facilitate our change
. After doing so we had to write a userspace testing program to test our changes.&lt;/p&gt;

&lt;p&gt;The result after doing all this is below :)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;cpu1: starting
cpu0: starting
init: starting sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;              1 1 512
..             1 1 512
README         2 2 2209
&lt;span class=&quot;nb&quot;&gt;cat            &lt;/span&gt;2 3 9725
&lt;span class=&quot;nb&quot;&gt;echo           &lt;/span&gt;2 4 9254
forktest       2 5 5986
&lt;span class=&quot;nb&quot;&gt;grep           &lt;/span&gt;2 6 10873
init           2 7 9579
&lt;span class=&quot;nb&quot;&gt;kill           &lt;/span&gt;2 8 9246
&lt;span class=&quot;nb&quot;&gt;ln             &lt;/span&gt;2 9 9240
&lt;span class=&quot;nb&quot;&gt;ls             &lt;/span&gt;2 10 10832
&lt;span class=&quot;nb&quot;&gt;mkdir          &lt;/span&gt;2 11 9315
&lt;span class=&quot;nb&quot;&gt;rm             &lt;/span&gt;2 12 9308
sh             2 13 16600
stressfs       2 14 9790
usertests      2 15 37633
&lt;span class=&quot;nb&quot;&gt;wc             &lt;/span&gt;2 16 10207
zombie         2 17 9028
syscallnum     2 18 9144
console        3 19 0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;syscallnum
The total number of syscalls so far is 643
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;syscallnum
The total number of syscalls so far is 705
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;syscallnum
The total number of syscalls so far is 767
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;syscallnum
The total number of syscalls so far is 829&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;I usually end my blog posts with an epilogue. Although this is a post
that doesn’t necesarilly need one, &lt;strong&gt;I wanted to write one just to say to you
that you should try kernel hacking&lt;/strong&gt;, &lt;em&gt;that is programming jargon for
programming an operating system kernel&lt;/em&gt;, because it’s an experience that
undoubtedly will teach you a great deal of things about how your computer
actually works.&lt;/p&gt;

&lt;p&gt;Last but not least, take a look at the ongoing work on &lt;a href=&quot;https://github.com/NlightNFotis/Ensidia&quot;&gt;Ensidia, my fork
of xv6&lt;/a&gt;. To see this particular
work, take a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall&lt;/code&gt; branch.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://zoo.cs.yale.edu/classes/cs422/2010/reference&quot;&gt;CS422/522: Operating systems, Yale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zoo.cs.yale.edu/classes/cs422/2010/xv6-book/fscall.pdf&quot;&gt;Chapter 8, File System calls, xv6 reference, Yale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zoo.cs.yale.edu/classes/cs422/2010/xv6-book/trap.pdf&quot;&gt;Chapter 3, System calls, exceptions and interrupts, Yale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pdos.csail.mit.edu/6.828/2012/xv6/book-rev7.pdf&quot;&gt;xv6 Documentation, MIT csail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="kernel" />
      
        <category term="ensidia" />
      
        <category term="xv6" />
      

      
        <summary type="html">xv6: An introduction If you are like me, a low level pc programmer, it’s hard not to have heard of xv6. xv6, for those who haven’t really heard of it, is a UNIX version 6 clone, designed at MIT to help teach operating systems. The reasoning behind doing this was fairly simple: Up until that point, MIT had used John Lions’ famous commentary on the Sixth Edition of UNIX. But V6 was challenging due to a number of reasons. To begin with, it was written in a near ancient version of C (pre K&amp;amp;R), and apart from that, it contained PDP-11 assembly (a legendary machine for us UNIX lovers, but ancient nonetheless), which didn’t really help the students that had to study both PDP-11 and the (more common) x86 architecture to develop another (exokernel) operating system on. So, to make things much more simpler, professors there decided to roll with a clone of UNIX version 6, that was x86 specific, written in ANSI C and supported multiprocessor machines. For a student (or a programmer interested in operating systems), xv6 is a unique opportunity to introduce himself to kernel hacking and to the architecture of UNIX like systems. At about 15k lines of code (iirc), including the (primitive) libraries, the userland and the kernel, it’s very easy (or well, at least easier than production scale UNIX like systems) to grok, and it’s also very easy to expand on. It also helps tremendously that xv6 as a whole has magnificent documentation, not only from MIT, but from other universities that have adopted xv6 for use in their operating systems syllabus. An introduction to Ensidia: my very personal xv6 fork When I first discovered xv6 I was ecstatic. For the reasons mentioned above I couldn’t lose on the opportunity to fork xv6 and use it as a personal testbed for anything I could feel like exploring or testing out. As a matter of fact, when I first discovered xv6, I had just finished implementing (the base of) my own UNIX like operating system, named fotix, and the timing of my discovery was great. xv6 had done what I had done, and also implemented most of what I was planning to work on fotix (for example, elf file loading), and it was a solid base for further development. It also had a userland, which fotix at the time didn’t have. After I forked xv6, I spent some time familiriazing myself with the code. I also cleaned up the source code quite a bit, structuring the code in a BSD like folder structure, instead of having all of the code in the same folder and made various small scale changes. After that for quite some time, I had left ensidia alone and didn’t touch it much. However, I always felt like I wanted to develop it a bit more and get to play with its code in interesting ways. I was trying to think of a great way to get started with kernel hacking on it, in a simple way, to get more acquainted with the kernel, and found an interesting pdf with interesting project ideas for it. One of them was to add a system call. I figured out that would be an interesting and quick hack, so hey, why not? Getting started with kernel hacking on xv6: Adding the system call. The system call I decided to introduce was the suggested one. It was fairly simple sounding too. You have to introduce a new system call that returns the number of total system calls that have taken place so far. So let’s see how I went about implementing it: An introduction to system calls in xv6 First of all, we should provide some context about what system calls are, how they are used, and how they are implemented in xv6. A system call is a function that a userspace application will use, so as to ask for a specific service to be provided by the operating system. For instance with an sbrk(n) system call, a process can ask the kernel to grow its heap space by n bytes. Another example is the well known fork() system call in the UNIX world, that’s used to create a new process by cloning the caller process. The way applications signal the kernel that they need that service is by issueing a software interrupt. An interrupt is a signal generated that notifies the processor that it needs to stop what its currently doing, and handle the interrupt. This mechanism is also used to notify the processor that information it was seeking from the disks is in some buffer, ready to be extracted and processed, or, that a key was pressed in the keyboard. This is called a hardware interrupt. Before the processor stops to handle the interrupt generated, it needs to save the current state, so that it can resume the execution in this context after the interrupt has been handled. The code that calls a system call in xv6 looks like this: # exec(init, argv) .globl start start: pushl $argv pushl $init pushl $0 // where caller pc would be movl $SYS_exec, %eax int $T_SYSCALL In essence, it pushes the argument of the call to the stack, and puts the system call number (in the above code, that’s $SYS_exec) into %eax. The number is used to match the entry in an array that holds pointers to all the system calls. After that, it generates a software interrupt, with a code (in this case $T_SYSCALL) that’s used to index the interrupt descriptor tables and find the appropriate interrupt handler. The code that is specific to find the appropriate interrupt handler is called trap() and is available in the file trap.c. If trap() check’s out the trapnumber in the generated trapframe (a structure that represents the processor’s state at the time that the trap happened) to be equal to T_SYSCALL, it calls syscall() (the software interrupt handler) that’s available in syscall.c // This is the part of trap that // calls syscall() void trap(struct trapframe *tf) { if(tf-&amp;gt;trapno == T_SYSCALL){ if(proc-&amp;gt;killed) exit(); proc-&amp;gt;tf = tf; syscall(); if(proc-&amp;gt;killed) exit(); return; } syscall() is finally the function that checks out %eax to get the number of the system call (to index the array with the system call pointers), and execute the code corresponding to that system call. The implementation of system calls in xv6 is under two files. The first one is sysproc.c, and is the one containing the implementation of system calls correspondent to processes, and sysfile.c that contains the implementation of system calls regarding the file system. The specific implementation of the numcalls() system call To implement the system call itself is simple. I did so with a global variable in syscall.c called syscallnum, that’s incremented everytime syscall(), calls a system call function, that is, the system call is valid. Next we just need a function, the system call implementation that returns that number to the userspace program that asks for it. Below is the function itself, and syscall() after our change. // return the number of system calls that have taken place in // the system int sys_numcalls(void) { return syscallnum; } // The syscall() implementation after // our change void syscall(void) { int num; num = proc-&amp;gt;tf-&amp;gt;eax; if(num &amp;gt; 0 &amp;amp;&amp;amp; num &amp;lt; NELEM(syscalls) &amp;amp;&amp;amp; syscalls[num]) { syscallnum++; // increment the syscall counter proc-&amp;gt;tf-&amp;gt;eax = syscalls[num](); } else { cprintf(&quot;%d %s: unknown sys call %d\n&quot;, proc-&amp;gt;pid, proc-&amp;gt;name, num); proc-&amp;gt;tf-&amp;gt;eax = -1; } } After that was done, the next few things that were needed to be done were fairly straight forward. We had to add an index number for the new system call in syscall.h, expose it to user proccesses via user.h, and add a new macro to usys.S that defines an asm routine that calls that specific system call, and change the makefile to facilitate our change . After doing so we had to write a userspace testing program to test our changes. The result after doing all this is below :) cpu1: starting cpu0: starting init: starting sh $ ls . 1 1 512 .. 1 1 512 README 2 2 2209 cat 2 3 9725 echo 2 4 9254 forktest 2 5 5986 grep 2 6 10873 init 2 7 9579 kill 2 8 9246 ln 2 9 9240 ls 2 10 10832 mkdir 2 11 9315 rm 2 12 9308 sh 2 13 16600 stressfs 2 14 9790 usertests 2 15 37633 wc 2 16 10207 zombie 2 17 9028 syscallnum 2 18 9144 console 3 19 0 $ syscallnum The total number of syscalls so far is 643 $ syscallnum The total number of syscalls so far is 705 $ syscallnum The total number of syscalls so far is 767 $ syscallnum The total number of syscalls so far is 829 Epilogue I usually end my blog posts with an epilogue. Although this is a post that doesn’t necesarilly need one, I wanted to write one just to say to you that you should try kernel hacking, that is programming jargon for programming an operating system kernel, because it’s an experience that undoubtedly will teach you a great deal of things about how your computer actually works. Last but not least, take a look at the ongoing work on Ensidia, my fork of xv6. To see this particular work, take a look at the syscall branch. References CS422/522: Operating systems, Yale Chapter 8, File System calls, xv6 reference, Yale Chapter 3, System calls, exceptions and interrupts, Yale xv6 Documentation, MIT csail</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">How the compiler, the Library and the Kernel work - Part 2</title>
      
      
      <link href="https://nlightnfotis.github.io/2014/04/25/how-the-compiler/" rel="alternate" type="text/html" title="How the compiler, the Library and the Kernel work - Part 2 " />
      
      <published>2014-04-25T18:27:00+00:00</published>
      <updated>2014-04-25T18:27:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2014/04/25/how-the-compiler</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2014/04/25/how-the-compiler/">&lt;p&gt;In the previous part of this little series, we talked about the compiler, and what it does 
with the header files, in our attempt to demistify their usage. In this part, I want to show you
what’s the compiler’s output, and how we create our file.&lt;/p&gt;

&lt;h1&gt;The compiler’s composition&lt;/h1&gt;

&lt;p&gt;Generally speaking, a &lt;em&gt;compiler&lt;/em&gt; belongs to a family of software called &lt;strong&gt;translators&lt;/strong&gt;. 
A translator’s job is to read some source code in a source language, and generate (translate it to) 
some source code in a target language.&lt;/p&gt;

&lt;p&gt;Now, you might think that most compilers you know don’t do that. You input a (source code) file, 
and you get a binary file, ready to run when you want it to. Yes that’s what it does, but it’s not
the compiler that does all this. If you remember from the last installment of this series,
when you call the compiler like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc some_file.c&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang some_file.c&lt;/code&gt;, in essence you are
calling the compilation driver, with the file as a parameter. The compilation driver then calls
1) the preprocessor, 2) the (actual) compiler, 3) the assembler and last but not least the linker.
At least when it comes to gcc, these pieces of software are called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc1&lt;/code&gt;, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gas&lt;/code&gt; (executable name is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;as&lt;/code&gt;)  and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collect2&lt;/code&gt; (executable name is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ld&lt;/code&gt;) respectively.&lt;/p&gt;

&lt;p&gt;From that little software collection up top, that we call the compiler, we can easily take notice
of at least 3 (yeah, that’s right) translators, that act as we mentioned earlier, 
that is take some input in a source language, and produce some output to a target language.&lt;/p&gt;

&lt;p&gt;The first is the preprocessor. The preprocessor accepts source code in C as a source language,
and produces source code again in C (as a target language), but with the output having various
elements of the source code resolved, such as header file inclusion, macro expansion, etc.&lt;/p&gt;

&lt;p&gt;The second is the compiler. The compiler accepts (in our case) C source code, as a source language,
and translates it to some architecture’s assembly language. In my case, when I talk about the 
compiler, I’m gonna assume that it produces x86 assembly.&lt;/p&gt;

&lt;p&gt;The last one, is the assembler, which accepts as input some machine’s architecture assembly
language, and produces what’s called binary, or object representation of it, that is it translates
the assembly mnemonics directly to the bytes they correspond to, in the target architecture.&lt;/p&gt;

&lt;p&gt;At this point, one could also argue that the linker is also a translator, accepting binary, and 
translating it to an executable file, that is, resolving references, and fitting the binary code
on the segments of the file that is to be produced. For example, on a typical GNU/Linux system,
this phase produces the executable ELF file.&lt;/p&gt;

&lt;h1&gt;The (actual) compiler’s output: x86 assembly.&lt;/h1&gt;

&lt;p&gt;Before we go any further, I would like to show you what the compiler really creates:&lt;/p&gt;

&lt;p&gt;For the typical hello world program we demonstrated in our first installment, the compiler
will output the following assembly code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gas&quot; data-lang=&quot;gas&quot;&gt;	.file	&quot;hello.c&quot;
	.section	.rodata
.LC0:
	.string	&quot;Hello world!&quot;
	.text
	.globl	main
	.type	main, @function
main:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$.LC0, %edi
	call	puts
	movl	$0, %eax
	leave
	ret
	.size	main, .-main
	.ident	&quot;GCC: (GNU) 4.8.2 20131212 (Red Hat 4.8.2-7)&quot;
	.section	.note.GNU-stack,&quot;&quot;,@progbits&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To produce the above file, we had to use the following gcc invocation command:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc -S -fno-asynchronous-unwind-tables -o hello.S hello.c&lt;/code&gt;. 
We used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-fno-asynchronous-unwind-tables&lt;/code&gt; to remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cfi&lt;/code&gt; directives, which tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gas&lt;/code&gt; 
(the gnu assembler) to emit Dwarf Call Frame Information tags, which are used to reconstruct
a stack backtrace when a frame pointer is missing.&lt;/p&gt;

&lt;p&gt;For more usefull compilation flags, to control the intermediary compilation flow, try these:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-E&lt;/code&gt;: stop after preprocessing, and produce a *.i file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-S&lt;/code&gt;: we used this, stop after the compiler, and produce a *.s file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-c&lt;/code&gt;: stop after the assembler, and produce a *.o file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default behaviour is to use none, and stop after the linker has run. If you want to run a 
full compilation and keep all the intermediate files, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-save-temps&lt;/code&gt; flag.&lt;/p&gt;

&lt;h1&gt;From source to binary: the assembler.&lt;/h1&gt;

&lt;p&gt;The next part of the compilation process, is the assembler. We have already discussed what
the assembler does, so here we are going to see it in practice. If you have followed so far,
you should have two files, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.c&lt;/code&gt;, which is the hello world’s C source code file,
and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.S&lt;/code&gt; which is what we created earlier, the compiler’s (x86) assembly output.&lt;/p&gt;

&lt;p&gt;The assembler operates on that last file as you can imagine, and to see it running, and emit
binary, we need to invoke it like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;as -o hello.bin hello.S&lt;/code&gt;, and produces this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ELF\00\00\00\00\00\00\00\00\00\00&amp;gt;\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F0\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00@\00\00\00UH\89\E5H\83\EC\89}\FCH\89u\F0\BF\00\00\00\00\E8\00\00\00\00\B8\00\00\00\00\C9\C3Hello world!\00\00GCC: (GNU) 4.8.2 20131212 (Red Hat 4.8.2-7)\00\00.symtab\00.strtab\00.shstrtab\00.rela.text\00.data\00.bss\00.rodata\00.comment\00.note.GNU-stack\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\B8\00\00\00\00\00\000\00\00\00\00\00\00\00	\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00&amp;amp;\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\001\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\00\00\00\00\00\00\00
\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\009\00\00\00\00\00\000\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00m\00\00\00\00\00\00\00-\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00B\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\9A\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\9A\00\00\00\00\00\00\00R\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\B0\00\00\00\00\00\00\F0\00\00\00\00\00\00\00
\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00	\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\A0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F1\FF\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00	\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00hello.c\00main\00puts\00\00\00\00\00\00\00\00\00\00\00\00\00
\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00	\00\00\00\FC\FF\FF\FF\FF\FF\FF\FF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;Last but not least: the linker&lt;/h1&gt;

&lt;p&gt;We saw what the assembler emits, which is to say, binary code. However, that binary code
still needs further processing. To explain that, we need to go back a little.&lt;/p&gt;

&lt;p&gt;In our first installment of the series, we said that when you call a function like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf()&lt;/code&gt;,
the compiler only needs its prototype to do type checking and ensure that you use it legally.
For that you include the header file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdio.h&lt;/code&gt;. But since that contains the function prototype only,
where is the source code for that function? Surely, it must be somewhere, since it executes 
successfully to begin with, but we haven’t met the source code for printf so far, so where is it?&lt;/p&gt;

&lt;p&gt;The function’s source code is located in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.so&lt;/code&gt; (shared object) of the standard C library,
which in my system (Fedora 19, x64) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc-2.17.so&lt;/code&gt;. I don’t want to expand on that further,
as I plan to do so on the next series installment, however, what we have said so far is enough
for you to understand the linker’s usage:&lt;/p&gt;

&lt;p&gt;The linker resolves the undefined (thus far) reference to printf, by finding the reference to
the printf symbol and (in layman’s talk) 
making a pointer to point to it so that execution can jump to printf’s code
when we have to do that during our program’s execution.&lt;/p&gt;

&lt;p&gt;To invoke the linker on our file, &lt;a href=&quot;https://sourceware.org/binutils/docs-2.20/ld/Options.html#Options&quot;&gt;at least according to it’s documentation&lt;/a&gt;, 
we should do the following: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ld -o hello.out /lib/crt0.o hello.bin -lc&lt;/code&gt;. Then we should
be able to run the file like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./hello.out&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;That’s this end of this part 2 of my series that explains how your code turns into binary, and how
your computer (at least when it comes to the software side) runs it. In part 3, I am going to discuss
in greater length, the C library, and the kernel.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3564752/what-is-cfi-and-lfe-in-assembly-code-produced-by-gcc-from-c-program&quot;&gt;StackOverflow: What is .cfi and .LFE in assembly code produced by GCC from c++ program?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.lxgcc.net/?p=181&quot;&gt;GCC front-end (1): driver vs. compiler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.osdev.org/GAS&quot;&gt;GAS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourceware.org/binutils/docs-2.20/ld/&quot;&gt; ld: Binutils documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="compiler" />
      
        <category term="kernel" />
      
        <category term="libc" />
      

      
        <summary type="html">In the previous part of this little series, we talked about the compiler, and what it does with the header files, in our attempt to demistify their usage. In this part, I want to show you what’s the compiler’s output, and how we create our file. The compiler’s composition Generally speaking, a compiler belongs to a family of software called translators. A translator’s job is to read some source code in a source language, and generate (translate it to) some source code in a target language. Now, you might think that most compilers you know don’t do that. You input a (source code) file, and you get a binary file, ready to run when you want it to. Yes that’s what it does, but it’s not the compiler that does all this. If you remember from the last installment of this series, when you call the compiler like gcc some_file.c or clang some_file.c, in essence you are calling the compilation driver, with the file as a parameter. The compilation driver then calls 1) the preprocessor, 2) the (actual) compiler, 3) the assembler and last but not least the linker. At least when it comes to gcc, these pieces of software are called cpp, cc1, gas (executable name is as) and collect2 (executable name is ld) respectively. From that little software collection up top, that we call the compiler, we can easily take notice of at least 3 (yeah, that’s right) translators, that act as we mentioned earlier, that is take some input in a source language, and produce some output to a target language. The first is the preprocessor. The preprocessor accepts source code in C as a source language, and produces source code again in C (as a target language), but with the output having various elements of the source code resolved, such as header file inclusion, macro expansion, etc. The second is the compiler. The compiler accepts (in our case) C source code, as a source language, and translates it to some architecture’s assembly language. In my case, when I talk about the compiler, I’m gonna assume that it produces x86 assembly. The last one, is the assembler, which accepts as input some machine’s architecture assembly language, and produces what’s called binary, or object representation of it, that is it translates the assembly mnemonics directly to the bytes they correspond to, in the target architecture. At this point, one could also argue that the linker is also a translator, accepting binary, and translating it to an executable file, that is, resolving references, and fitting the binary code on the segments of the file that is to be produced. For example, on a typical GNU/Linux system, this phase produces the executable ELF file. The (actual) compiler’s output: x86 assembly. Before we go any further, I would like to show you what the compiler really creates: For the typical hello world program we demonstrated in our first installment, the compiler will output the following assembly code: .file &quot;hello.c&quot; .section .rodata .LC0: .string &quot;Hello world!&quot; .text .globl main .type main, @function main: pushq %rbp movq %rsp, %rbp subq $16, %rsp movl %edi, -4(%rbp) movq %rsi, -16(%rbp) movl $.LC0, %edi call puts movl $0, %eax leave ret .size main, .-main .ident &quot;GCC: (GNU) 4.8.2 20131212 (Red Hat 4.8.2-7)&quot; .section .note.GNU-stack,&quot;&quot;,@progbits To produce the above file, we had to use the following gcc invocation command: gcc -S -fno-asynchronous-unwind-tables -o hello.S hello.c. We used -fno-asynchronous-unwind-tables to remove .cfi directives, which tell gas (the gnu assembler) to emit Dwarf Call Frame Information tags, which are used to reconstruct a stack backtrace when a frame pointer is missing. For more usefull compilation flags, to control the intermediary compilation flow, try these: -E: stop after preprocessing, and produce a *.i file -S: we used this, stop after the compiler, and produce a *.s file -c: stop after the assembler, and produce a *.o file. The default behaviour is to use none, and stop after the linker has run. If you want to run a full compilation and keep all the intermediate files, use the -save-temps flag. From source to binary: the assembler. The next part of the compilation process, is the assembler. We have already discussed what the assembler does, so here we are going to see it in practice. If you have followed so far, you should have two files, a hello.c, which is the hello world’s C source code file, and a hello.S which is what we created earlier, the compiler’s (x86) assembly output. The assembler operates on that last file as you can imagine, and to see it running, and emit binary, we need to invoke it like this: as -o hello.bin hello.S, and produces this: ELF\00\00\00\00\00\00\00\00\00\00&amp;gt;\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F0\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00@\00 \00\00UH\89\E5H\83\EC\89}\FCH\89u\F0\BF\00\00\00\00\E8\00\00\00\00\B8\00\00\00\00\C9\C3Hello world!\00\00GCC: (GNU) 4.8.2 20131212 (Red Hat 4.8.2-7)\00\00.symtab\00.strtab\00.shstrtab\00.rela.text\00.data\00.bss\00.rodata\00.comment\00.note.GNU-stack\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\B8\00\00\00\00\00\000\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00&amp;amp;\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\001\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\009\00\00\00\00\00\000\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00m\00\00\00\00\00\00\00-\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00B\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\9A\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\9A\00\00\00\00\00\00\00R\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\B0\00\00\00\00\00\00\F0\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\A0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F1\FF\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00hello.c\00main\00puts\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\FC\FF\FF\FF\FF\FF\FF\FF Last but not least: the linker We saw what the assembler emits, which is to say, binary code. However, that binary code still needs further processing. To explain that, we need to go back a little. In our first installment of the series, we said that when you call a function like printf(), the compiler only needs its prototype to do type checking and ensure that you use it legally. For that you include the header file stdio.h. But since that contains the function prototype only, where is the source code for that function? Surely, it must be somewhere, since it executes successfully to begin with, but we haven’t met the source code for printf so far, so where is it? The function’s source code is located in the .so (shared object) of the standard C library, which in my system (Fedora 19, x64) is libc-2.17.so. I don’t want to expand on that further, as I plan to do so on the next series installment, however, what we have said so far is enough for you to understand the linker’s usage: The linker resolves the undefined (thus far) reference to printf, by finding the reference to the printf symbol and (in layman’s talk) making a pointer to point to it so that execution can jump to printf’s code when we have to do that during our program’s execution. To invoke the linker on our file, at least according to it’s documentation, we should do the following: ld -o hello.out /lib/crt0.o hello.bin -lc. Then we should be able to run the file like this: ./hello.out. Epilogue That’s this end of this part 2 of my series that explains how your code turns into binary, and how your computer (at least when it comes to the software side) runs it. In part 3, I am going to discuss in greater length, the C library, and the kernel. References StackOverflow: What is .cfi and .LFE in assembly code produced by GCC from c++ program? GCC front-end (1): driver vs. compiler GAS ld: Binutils documentation</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">My Linux from Scratch Experience</title>
      
      
      <link href="https://nlightnfotis.github.io/2014/02/23/my-linux-from-scratch-experience/" rel="alternate" type="text/html" title="My Linux from Scratch Experience" />
      
      <published>2014-02-23T20:59:00+00:00</published>
      <updated>2014-02-23T20:59:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2014/02/23/my-linux-from-scratch-experience</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2014/02/23/my-linux-from-scratch-experience/">&lt;p&gt;The past two to three days, I have been busy with creating my very own Linux distribution
using the well known &lt;a href=&quot;http://www.linuxfromscratch.org&quot;&gt;Linux from Scratch&lt;/a&gt;. This post is 
an accounting of my experience with the process, what I liked, what I did learn from that,
what was surprising to me and more.&lt;/p&gt;

&lt;h1&gt;Linux from Scratch: An introduction&lt;/h1&gt;

&lt;p&gt;If you are here, then you most likely already know what &lt;a href=&quot;http://www.linuxfromscratch.com/&quot;&gt;linux from scratch&lt;/a&gt;
is, but for the sake of completeness (or in the case that you don’t know what it is, but are
so keen on learning)  I will provide an introduction about it here.&lt;/p&gt;

&lt;p&gt;Linux from scratch is a book (from now on, &lt;em&gt;lfs&lt;/em&gt;), providing a series of steps that guide you to the creation of
a fully function GNU/Linux distribution. Although the original book creates a “barebones”
distribution, with only fundamental tools in it, the distribution created provides a fine
enviroment for further experimentation or customization.&lt;/p&gt;

&lt;p&gt;Apart from the basic book, the lfs project also has 3-4 books to read if you want to extend
the basic system (such as blfs, Beyond Linux from Scratch) or if you want to automate the process,
create a distribution that is more secure, or how to cross-compile an lfs system for different machines.&lt;/p&gt;

&lt;h1&gt;My experience with building LFS&lt;/h1&gt;

&lt;h2&gt;A small introduction about my background&lt;/h2&gt;

&lt;p&gt;I have been a UNIX (-like) systems (full-time) user for about 2.5 years now. During that time
I had seen myself from being what you would call a Linux newbie, not knowing how to use
a system without a GUI installed (have I mentioned that Ubuntu was my favourite distribution) to being an arguably experienced UNIX programmer, trying to learn more about the
various aspects of UNIX systems, and delving deeper and deeper into them every day
(while also feeling pain if using something other than a UNIX like system).&lt;/p&gt;

&lt;p&gt;During that time, I have learned about the Unix way of working with the system, using the shell and the system’s toolchain to write software and other wise manipulate the system. I
ditched my old knowledge about IDEs and GUIs, and set out to master the command line and the associated tools (Anecdote: I remember, when I first came from to Unix from Windows, to searching the net for a C/C++ IDE to do development.) I remember reading about
how people worked another way in Unix land, using an editor, and the shell to work, and I 
decided to force myself to learn to work that way. I still remember trying to use vim and gcc, 
and ending up liking this way better because it seemed a more natural way to interact with
the software development process, than using a ide and pressing the equivalent of a “play”
button, so that magic ensues for the next few seconds until I have a result.&lt;/p&gt;

&lt;p&gt;Time has passed since then, and going through hours and hours of reading and working with
the system, I did learn quite a lot about it. My Google Summer of Code experience in 2013
expanded my system knowledge even further (that’s what you get when you have to work
with the system kernel, the C library and a compiler).&lt;/p&gt;

&lt;p&gt;But in all that time, of using Unix like systems, I never had the chance to create one myself.
And although my background did allow me to know quite a few things of the inner workings
of a system like that, I never actually saw all these software systems combining in front
of my very eyes to create that beauty we know as a GNU/Linux distribution. And that left
me a bad taste, because I knew what was happening, but I wanted to see it happen right 
in front of my eyes.&lt;/p&gt;

&lt;p&gt;Knowing about the existence of lfs, and not actually going through it also made matters worse
for me, as I knew that I could actually “patch” that knowledge gap of mine, but I never really
tried to do that. I felt that I was missing on a lot, and that lfs would be instrumental to my
understanding of a Linux system. Having gone through that some years ago, and getting
stuck at the very beginning had also created an innate fear in me, that it was something
that would be above my own powers.&lt;/p&gt;

&lt;p&gt;Until two days ago, when I said to myself: “You know what? I have seen and done a lot 
of things in a UNIX system. I am now much more experienced than I was when I last did it.
And I know I want to at least try it, even if it will only give me nothing but infinite confusion 
Because if I do manage to get it, I will learn so many more things, or at least get assured
that my preexisting knowledge was correct” And that thought was the greatest motive I had
to do that in a fairly long time.&lt;/p&gt;

&lt;p&gt;So, I sat at my desk, grabbed a cup of coffee and off I went!&lt;/p&gt;

&lt;h2&gt;The process&lt;/h2&gt;

&lt;h3&gt;Preparation and the temporary toolchain&lt;/h3&gt;

&lt;p&gt;The book is itself several chapters long, each of which perform another “big step” in the
creation of the distribution.&lt;/p&gt;

&lt;p&gt;The first few chapters are preparatory chapters, where you ensure the integrity of the 
building environment, and download any building dependencies you may be lacking,
create a new partition that will host the lfs system, and create the user account that
will do the building of the temporary toolchain.&lt;/p&gt;

&lt;p&gt;The temporary toolchain building is a more exciting process. In essence
you compile and collect several pieces of software that will later be used
to compile the distribution’s toolchain and other software.&lt;/p&gt;

&lt;p&gt;You start of with building binutils, and that is to get a working assembler and linker. 
After having a working assembler and linker, you proceed with compiling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt;.
Next on is unpacking the linux headers, so that you can compile (and link against them)
the glibc.&lt;/p&gt;

&lt;p&gt;Having the basic parts of the toolchain compiled, you then proceed with installing other
software that is needed in the temporary toolchain, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gawk&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patch&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perl&lt;/code&gt;
etc.&lt;/p&gt;

&lt;h3&gt;Building the main system&lt;/h3&gt;

&lt;p&gt;After getting done with the temporary toolchain, you then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt; into the lfs partition.
You start of with creating the needed directories (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/boot&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home&lt;/code&gt; etc)
and then continue with building the distribution software, utilising the temporary toolchain.
For instance, you construct a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt;, you compile &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bzip&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shadow&lt;/code&gt;
utility that manages the handling of passwords etc, all while making sure that things don’t
break, and running countless tests (that sometimes take longer than what the package
took to compile) to ensure that what you build is functional and reliable.&lt;/p&gt;

&lt;h3&gt;Final configuration&lt;/h3&gt;

&lt;p&gt;Next one on the list, is the various configuration files that reside in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc&lt;/code&gt;, and the setup
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysvinit&lt;/code&gt;, the distribution’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; system.&lt;/p&gt;

&lt;p&gt;Last, but not least, you are compiling the linux kernel and setting up grub so that the
system is bootable.&lt;/p&gt;

&lt;p&gt;At this point, if all has gone well, and you reset, you should boot into your new lfs system.&lt;/p&gt;

&lt;h1&gt;What did I gain from that?&lt;/h1&gt;

&lt;p&gt;Building lfs was a very time consuming process for me. It must have taken about 7-8
hours at the very least. Not so much because of the compilation and testing (I was compiling
with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAKEFLAGS=&apos;-j 4&apos;&lt;/code&gt; on a Core i5), but because I didn’t complete some steps
correctly, and later needed to go back and redo them, along with everything that followed and the time it took to research some issues, programs or various other things
before I did issue a command at the shell.&lt;/p&gt;

&lt;p&gt;Now if I were to answer the question “What did I gain from that”, my answer would be
along the lines of “Infinite confusion, and some great insight at some points”.&lt;/p&gt;

&lt;p&gt;To elaborate on that,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lfs mostly served as a reassurance that indeed, what I did know
about the system was mostly correct.&lt;/li&gt;
  &lt;li&gt;I did have the chance to see the distribution
get built right before my eyes, which was something I longed for a great amount of time.&lt;/li&gt;
  &lt;li&gt;It did make me somewhat more familiar with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/code&gt;
cycle&lt;/li&gt;
  &lt;li&gt;It made me realise that the directories in the system are the simple result of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; command, and that configuration files in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/folder&lt;/code&gt; are handwritten plain files. (&lt;em&gt;yeah, I feel stupid about that one - I don’t know what I was expecting.&lt;/em&gt; This was probably the result of the “magic involved” that the distro making process entailed for me)&lt;/li&gt;
  &lt;li&gt;I got to see the specific software that is needed to create a distribution, and demonstrate to me how I can build it, customize that build, or even change that software to my liking&lt;/li&gt;
  &lt;li&gt;And last but not least, something that nearly every lfs user says after a successful try:
I knew that package managers did a great many things in order to maintain the system, and that much
of the work I would normally have to do was done nearly automatically 
but boy, was I underestimating them. After lfs, I developed a new appreciation for a
good package manager.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Lfs was, for the most part, a great experience.&lt;/em&gt; &lt;strong&gt;As a knowledge expander, it works great.&lt;/strong&gt;
&lt;strong&gt;As a system that you keep and continue to maintain? I don’t know.&lt;/strong&gt; I know that people have
done that in the past, but I decided against maintaining my build, as I figured it would be
very time consuming, and that if I ever wanted to gain the experience of maintaining a distro,
I would probably fork something like &lt;a href=&quot;http://www.crux.nu&quot;&gt;Crux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end if you ask me if I can recommend that to you, I will say that I’m not so sure.
&lt;strong&gt;It will provide you with some insight into the internals of a GNU/Linux distribution, but it 
won’t make you a better programmer as some people claim&lt;/strong&gt; (most of the process revolves
around the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/code&gt; cycle, and some conf files handwriting).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the end, it is yourself who you should ask. Do you want that knowledge? Is it worth the hassle for you?
Do you want the bragging rights? Are you crazy enough to want to maintain it?&lt;/strong&gt; 
&lt;em&gt;These are all questions that you get as many answers to them as the people you ask.&lt;/em&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="linux" />
      
        <category term="lfs" />
      
        <category term="distribution" />
      

      
        <summary type="html">The past two to three days, I have been busy with creating my very own Linux distribution using the well known Linux from Scratch. This post is an accounting of my experience with the process, what I liked, what I did learn from that, what was surprising to me and more. Linux from Scratch: An introduction If you are here, then you most likely already know what linux from scratch is, but for the sake of completeness (or in the case that you don’t know what it is, but are so keen on learning) I will provide an introduction about it here. Linux from scratch is a book (from now on, lfs), providing a series of steps that guide you to the creation of a fully function GNU/Linux distribution. Although the original book creates a “barebones” distribution, with only fundamental tools in it, the distribution created provides a fine enviroment for further experimentation or customization. Apart from the basic book, the lfs project also has 3-4 books to read if you want to extend the basic system (such as blfs, Beyond Linux from Scratch) or if you want to automate the process, create a distribution that is more secure, or how to cross-compile an lfs system for different machines. My experience with building LFS A small introduction about my background I have been a UNIX (-like) systems (full-time) user for about 2.5 years now. During that time I had seen myself from being what you would call a Linux newbie, not knowing how to use a system without a GUI installed (have I mentioned that Ubuntu was my favourite distribution) to being an arguably experienced UNIX programmer, trying to learn more about the various aspects of UNIX systems, and delving deeper and deeper into them every day (while also feeling pain if using something other than a UNIX like system). During that time, I have learned about the Unix way of working with the system, using the shell and the system’s toolchain to write software and other wise manipulate the system. I ditched my old knowledge about IDEs and GUIs, and set out to master the command line and the associated tools (Anecdote: I remember, when I first came from to Unix from Windows, to searching the net for a C/C++ IDE to do development.) I remember reading about how people worked another way in Unix land, using an editor, and the shell to work, and I decided to force myself to learn to work that way. I still remember trying to use vim and gcc, and ending up liking this way better because it seemed a more natural way to interact with the software development process, than using a ide and pressing the equivalent of a “play” button, so that magic ensues for the next few seconds until I have a result. Time has passed since then, and going through hours and hours of reading and working with the system, I did learn quite a lot about it. My Google Summer of Code experience in 2013 expanded my system knowledge even further (that’s what you get when you have to work with the system kernel, the C library and a compiler). But in all that time, of using Unix like systems, I never had the chance to create one myself. And although my background did allow me to know quite a few things of the inner workings of a system like that, I never actually saw all these software systems combining in front of my very eyes to create that beauty we know as a GNU/Linux distribution. And that left me a bad taste, because I knew what was happening, but I wanted to see it happen right in front of my eyes. Knowing about the existence of lfs, and not actually going through it also made matters worse for me, as I knew that I could actually “patch” that knowledge gap of mine, but I never really tried to do that. I felt that I was missing on a lot, and that lfs would be instrumental to my understanding of a Linux system. Having gone through that some years ago, and getting stuck at the very beginning had also created an innate fear in me, that it was something that would be above my own powers. Until two days ago, when I said to myself: “You know what? I have seen and done a lot of things in a UNIX system. I am now much more experienced than I was when I last did it. And I know I want to at least try it, even if it will only give me nothing but infinite confusion Because if I do manage to get it, I will learn so many more things, or at least get assured that my preexisting knowledge was correct” And that thought was the greatest motive I had to do that in a fairly long time. So, I sat at my desk, grabbed a cup of coffee and off I went! The process Preparation and the temporary toolchain The book is itself several chapters long, each of which perform another “big step” in the creation of the distribution. The first few chapters are preparatory chapters, where you ensure the integrity of the building environment, and download any building dependencies you may be lacking, create a new partition that will host the lfs system, and create the user account that will do the building of the temporary toolchain. The temporary toolchain building is a more exciting process. In essence you compile and collect several pieces of software that will later be used to compile the distribution’s toolchain and other software. You start of with building binutils, and that is to get a working assembler and linker. After having a working assembler and linker, you proceed with compiling gcc. Next on is unpacking the linux headers, so that you can compile (and link against them) the glibc. Having the basic parts of the toolchain compiled, you then proceed with installing other software that is needed in the temporary toolchain, like gawk, file, patch, perl etc. Building the main system After getting done with the temporary toolchain, you then chroot into the lfs partition. You start of with creating the needed directories (like /bin, /boot, /etc, /home etc) and then continue with building the distribution software, utilising the temporary toolchain. For instance, you construct a new gcc, you compile sed, grep, bzip, the shadow utility that manages the handling of passwords etc, all while making sure that things don’t break, and running countless tests (that sometimes take longer than what the package took to compile) to ensure that what you build is functional and reliable. Final configuration Next one on the list, is the various configuration files that reside in /etc, and the setup of sysvinit, the distribution’s init system. Last, but not least, you are compiling the linux kernel and setting up grub so that the system is bootable. At this point, if all has gone well, and you reset, you should boot into your new lfs system. What did I gain from that? Building lfs was a very time consuming process for me. It must have taken about 7-8 hours at the very least. Not so much because of the compilation and testing (I was compiling with MAKEFLAGS=&apos;-j 4&apos; on a Core i5), but because I didn’t complete some steps correctly, and later needed to go back and redo them, along with everything that followed and the time it took to research some issues, programs or various other things before I did issue a command at the shell. Now if I were to answer the question “What did I gain from that”, my answer would be along the lines of “Infinite confusion, and some great insight at some points”. To elaborate on that, lfs mostly served as a reassurance that indeed, what I did know about the system was mostly correct. I did have the chance to see the distribution get built right before my eyes, which was something I longed for a great amount of time. It did make me somewhat more familiar with the configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install cycle It made me realise that the directories in the system are the simple result of a mkdir command, and that configuration files in the /etc/folder are handwritten plain files. (yeah, I feel stupid about that one - I don’t know what I was expecting. This was probably the result of the “magic involved” that the distro making process entailed for me) I got to see the specific software that is needed to create a distribution, and demonstrate to me how I can build it, customize that build, or even change that software to my liking And last but not least, something that nearly every lfs user says after a successful try: I knew that package managers did a great many things in order to maintain the system, and that much of the work I would normally have to do was done nearly automatically but boy, was I underestimating them. After lfs, I developed a new appreciation for a good package manager. Epilogue Lfs was, for the most part, a great experience. As a knowledge expander, it works great. As a system that you keep and continue to maintain? I don’t know. I know that people have done that in the past, but I decided against maintaining my build, as I figured it would be very time consuming, and that if I ever wanted to gain the experience of maintaining a distro, I would probably fork something like Crux. In the end if you ask me if I can recommend that to you, I will say that I’m not so sure. It will provide you with some insight into the internals of a GNU/Linux distribution, but it won’t make you a better programmer as some people claim (most of the process revolves around the configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install cycle, and some conf files handwriting). In the end, it is yourself who you should ask. Do you want that knowledge? Is it worth the hassle for you? Do you want the bragging rights? Are you crazy enough to want to maintain it? These are all questions that you get as many answers to them as the people you ask.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">How the compiler, the Library and the kernel work - Part 1</title>
      
      
      <link href="https://nlightnfotis.github.io/2013/12/12/how-the-compiler/" rel="alternate" type="text/html" title="How the compiler, the Library and the kernel work - Part 1" />
      
      <published>2013-12-12T16:13:00+00:00</published>
      <updated>2013-12-12T16:13:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2013/12/12/how-the-compiler</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2013/12/12/how-the-compiler/">&lt;p&gt;Before we get any further, it might be good if we provided some context.&lt;/p&gt;

&lt;h1&gt;Hello world. Again.&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every user space (read: application) programmer, has written a hello world program. 
Only god knows how many times this program has been written. Yet, 
most programmers’ knowledge of the program is limited to something along the lines of:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;It sends the string passed as a parameter to the system to print.&lt;/li&gt;
    &lt;li&gt;It takes the printf function from stdio.h and prints the string&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;and various other things, which are anywhere between plain wrong, or partially correct.&lt;/p&gt;

&lt;p&gt;** So why not demistify the process? **&lt;/p&gt;

&lt;h1&gt;Enter the C preprocessor.&lt;/h1&gt;

&lt;p&gt;You may have heard of the C Preprocessor. It’s the first stage of a c or c++ file compilation,
and it’s actually responsible for things such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;inclusion of header files&lt;/strong&gt; (it does so by replacing
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include &amp;lt;header.h&amp;gt;&lt;/code&gt; with the content of this file, and the file it includes recursively),&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;macro expansion&lt;/strong&gt;, such as the famous comparison of two numbers (a greater than b). In essence, if you define
 the following macro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#define gt(a, b) ((a &amp;gt; b) ? 1 : 0)&lt;/code&gt;, then in a statement such as this:&lt;/li&gt;
&lt;/ul&gt;

&lt;div lang=&quot;c&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; if (gt (5, 3)) printf (&quot;The first parameter is greater than the second.\n&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gt (5, 3)&lt;/code&gt; gets expanded to the macro definition, so after the preprocessor has run you end up with something like this:&lt;/p&gt;

&lt;div lang=&quot;c&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; if (((5 &amp;gt; 3) ? 1 : 0)) printf (&quot;The first parameter is greater than the second.\n&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;conditional compilation&lt;/strong&gt; (things such as:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifdef WIN32 
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;We are on windows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;amongst others. You can see it for yourself. Write the hello world program, and pass it to cpp: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpp hello_world.c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So now that we know what it does it’s time to demistify a common myth regarding it: &lt;em&gt;Some people believe
that the header files include the function to be called.&lt;/em&gt;. &lt;strong&gt;That’s wrong.&lt;/strong&gt; What it does include is 
&lt;strong&gt;function prototypes&lt;/strong&gt; (and some type definitions, etc) &lt;strong&gt;only&lt;/strong&gt;. It doesn’t include the body of the function
to be called.&lt;/p&gt;

&lt;p&gt;Some people find that fact quite surprising, though, it isn’t, if you get to understand what the compiler
does with it.&lt;/p&gt;

&lt;h1&gt;Say hello to the compiler.&lt;/h1&gt;

&lt;p&gt;Here we are gonna unmask another pile of misconceptions. First of all, some people think that when they call 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt; on the command line they are actually calling the compiler. &lt;strong&gt;They are not.&lt;/strong&gt; &lt;em&gt;In fact they are calling
the software commonly called &lt;strong&gt;the compilation driver&lt;/strong&gt;, whose job is to run all the software needed to fully
turn source to binary, including preprocessors, the actual compiler, an assembler and finally the linker&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Having said that, the actual compiler that’s getting called when you call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt; is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc1&lt;/code&gt;. You may have seen it some times when the driver reports errors. Wanna take a look at it, to make sure I’m not lying to you? 
(Hint: I’m not!) Fair enough. Why don’t you type this in the command line: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc -print-prog-name=cc1&lt;/code&gt;. It should tell you where the actual compiler is located in your system.&lt;/p&gt;

&lt;p&gt;So now that we have this (misconception) out of our minds, we can continue with our analysis. Last time we talked
about it, we said that the header files include &lt;strong&gt;prototypes&lt;/strong&gt; and not the whole function.&lt;/p&gt;

&lt;p&gt;You may know that in C, you usually declare a function, before you use it. The primary reason for doing this
is to provide the compiler with the ability to perform &lt;strong&gt;type checking&lt;/strong&gt;, that is to check that the arguments
passed are correct, both in number, and in type, and to verify that the returned value (assuming there is one)
is being used correctly. Below is a program that demonstrates the function prototype:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_nums&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5 + 5 results in %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_nums&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add_nums&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this particular example, the prototype gives the compiler a wide variety of information. It tells it
that function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_nums&lt;/code&gt; takes two int arguments and returns an integer to the calling function. Now the
compiler can verify that I am passing correct arguments to it when I call it inside printf. If I don’t include
the function prototype, and do something slightly evil such as calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_nums&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; arguments then 
this might happen:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 + 4 results in 2054324224
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that you know that the compiler (the real one) only needs the prototype and not the actual function code,
you may be wondering how the compiler actually compiles it if it doesn’t know it’s code.&lt;/p&gt;

&lt;p&gt;Now is the time to bring down another missconception. The word &lt;em&gt;compiler&lt;/em&gt; is just a fancy name for software
otherwise known as &lt;em&gt;translators&lt;/em&gt;. A &lt;em&gt;translator’s&lt;/em&gt; job is to get input and turn it from one language (source language) to a second language (target language), whatever that may be. Most of the times, when you compile software,
you compile it to run in your computer, which runs on a processor from the x86 architecture family of processors.
A processor is typically associated with an assembly language for that architecture (which is just human friendly
mnemonics for common processor tasks), so your &lt;em&gt;x86 computer runs x86 assembly&lt;/em&gt; (ok that’s not 100% true, but for
simplicity’s sake at the moment, it should serve. We will see why it’s not true later.) So the compiler 
(in a typical translation) translates (compiles) your C source code to x86 assembly. 
You can see this by compiling your hello world example and passing the compiler the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-S&lt;/code&gt; (which asks it to stop,
after x86 assembly is produced) parameter, likewise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc -S hello.c&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;At this part, we saw how the compiler and the preprocessor work with our code, in an attempt to demistify the 
so called library calls. In the next part, we are going to study the assembler and the linker, and for the final
part the loader and the kernel.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="compiler" />
      
        <category term="kernel" />
      
        <category term="libc" />
      

      
        <summary type="html">Before we get any further, it might be good if we provided some context. Hello world. Again. #include &amp;lt;stdio.h&amp;gt; int main (int argc, char **argv) { printf (&quot;Hello world!\n&quot;); return 0; } Every user space (read: application) programmer, has written a hello world program. Only god knows how many times this program has been written. Yet, most programmers’ knowledge of the program is limited to something along the lines of: It sends the string passed as a parameter to the system to print. It takes the printf function from stdio.h and prints the string and various other things, which are anywhere between plain wrong, or partially correct. ** So why not demistify the process? ** Enter the C preprocessor. You may have heard of the C Preprocessor. It’s the first stage of a c or c++ file compilation, and it’s actually responsible for things such as: inclusion of header files (it does so by replacing #include &amp;lt;header.h&amp;gt; with the content of this file, and the file it includes recursively), macro expansion, such as the famous comparison of two numbers (a greater than b). In essence, if you define the following macro #define gt(a, b) ((a &amp;gt; b) ? 1 : 0), then in a statement such as this: if (gt (5, 3)) printf (&quot;The first parameter is greater than the second.\n&quot;); gt (5, 3) gets expanded to the macro definition, so after the preprocessor has run you end up with something like this: if (((5 &amp;gt; 3) ? 1 : 0)) printf (&quot;The first parameter is greater than the second.\n&quot;); conditional compilation (things such as: #ifdef WIN32 printf (&quot;We are on windows\n&quot;); #endif amongst others. You can see it for yourself. Write the hello world program, and pass it to cpp: cpp hello_world.c So now that we know what it does it’s time to demistify a common myth regarding it: Some people believe that the header files include the function to be called.. That’s wrong. What it does include is function prototypes (and some type definitions, etc) only. It doesn’t include the body of the function to be called. Some people find that fact quite surprising, though, it isn’t, if you get to understand what the compiler does with it. Say hello to the compiler. Here we are gonna unmask another pile of misconceptions. First of all, some people think that when they call gcc on the command line they are actually calling the compiler. They are not. In fact they are calling the software commonly called the compilation driver, whose job is to run all the software needed to fully turn source to binary, including preprocessors, the actual compiler, an assembler and finally the linker Having said that, the actual compiler that’s getting called when you call gcc is called cc1. You may have seen it some times when the driver reports errors. Wanna take a look at it, to make sure I’m not lying to you? (Hint: I’m not!) Fair enough. Why don’t you type this in the command line: gcc -print-prog-name=cc1. It should tell you where the actual compiler is located in your system. So now that we have this (misconception) out of our minds, we can continue with our analysis. Last time we talked about it, we said that the header files include prototypes and not the whole function. You may know that in C, you usually declare a function, before you use it. The primary reason for doing this is to provide the compiler with the ability to perform type checking, that is to check that the arguments passed are correct, both in number, and in type, and to verify that the returned value (assuming there is one) is being used correctly. Below is a program that demonstrates the function prototype: #include &amp;lt;stdio.h&amp;gt; int add_nums (int first, int second); int main (void) { printf (&quot;5 + 5 results in %d\n&quot;, add_nums (5, 5)); return 0; } int add_nums (int first, int second) { return first + second; } In this particular example, the prototype gives the compiler a wide variety of information. It tells it that function add_nums takes two int arguments and returns an integer to the calling function. Now the compiler can verify that I am passing correct arguments to it when I call it inside printf. If I don’t include the function prototype, and do something slightly evil such as calling add_nums with float arguments then this might happen: 5 + 4 results in 2054324224 Now that you know that the compiler (the real one) only needs the prototype and not the actual function code, you may be wondering how the compiler actually compiles it if it doesn’t know it’s code. Now is the time to bring down another missconception. The word compiler is just a fancy name for software otherwise known as translators. A translator’s job is to get input and turn it from one language (source language) to a second language (target language), whatever that may be. Most of the times, when you compile software, you compile it to run in your computer, which runs on a processor from the x86 architecture family of processors. A processor is typically associated with an assembly language for that architecture (which is just human friendly mnemonics for common processor tasks), so your x86 computer runs x86 assembly (ok that’s not 100% true, but for simplicity’s sake at the moment, it should serve. We will see why it’s not true later.) So the compiler (in a typical translation) translates (compiles) your C source code to x86 assembly. You can see this by compiling your hello world example and passing the compiler the -S (which asks it to stop, after x86 assembly is produced) parameter, likewise gcc -S hello.c. Conclusion At this part, we saw how the compiler and the preprocessor work with our code, in an attempt to demistify the so called library calls. In the next part, we are going to study the assembler and the linker, and for the final part the loader and the kernel.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">GSOC Week 11 report</title>
      
      
      <link href="https://nlightnfotis.github.io/2013/09/02/gsoc-week-11-report/" rel="alternate" type="text/html" title="GSOC Week 11 report" />
      
      <published>2013-09-02T09:25:00+00:00</published>
      <updated>2013-09-02T09:25:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2013/09/02/gsoc-week-11-report</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2013/09/02/gsoc-week-11-report/">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This week was spent investigating the runtime and debugging executables with gdb.
It was interesting in the sense that it provided me with some interesting
pieces of information. Without any further ado, let’s present our findings:&lt;/p&gt;

&lt;h2&gt;My findings&lt;/h2&gt;

&lt;p&gt;Before starting out playing with libpthread, and glibc, I wanted to make sure
that the goruntime behaved the way I believed it behaved, and make some further
assurances about the goruntime. These assurances had to do with the total number
of goroutines and the total number of machine threads at various checkpoints
in the language runtime.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first thread in the program is initialised during &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_schedinit&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The number of m’s (kernel threads) is dependent on the number of goroutines.
The runtime basically attempts to create an equal amount of m’s to run the goroutines.
We can observe everytime a new goroutine is created, there is a number of calls
to initiate a new kernel thread.&lt;/li&gt;
  &lt;li&gt;There are at least two kernel threads. One that supports the runtime (mainly the 
garbage collector) and one that executes the code of the go program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is only one small piece of code in the goruntime that creates some sort of
confusion for me, and that is the code for a new m initialisation. Let me first
present the code that confuses me:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runtime_newm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_mal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mcommoninit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_malg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pthread_attr_init&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_setdetachstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTHREAD_CREATE_DETACHED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pthread_attr_setdetachstate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I purposely compacted the function for brevity, as it only serves as a demonstration for a point.
Now, my confusion lies in the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mp-&amp;gt;g0 = runtime_malg(-1, nil, nil)&lt;/code&gt;. It is a piece of code
that allocates memory for a new goroutine. Now I am ok with that, &lt;strong&gt;but&lt;/strong&gt; what I do not understand
is that new kernel threads (m’s) are supposed to be pick and run a goroutine from the global 
goroutine pool - that is run an existing one, and not create a new one. Now, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_malg&lt;/code&gt;
is given parameters that don’t initialise a new goroutine properly, but still, new memory
is allocated for a new goroutine, and is returned to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mp-&amp;gt;g0&lt;/code&gt; from runtime_malg.&lt;/p&gt;

&lt;p&gt;Assuming I have not misunderstood something, and I am not mistaken (which is kind of likely), 
this is behavior that could lead to a number of questions and/or problems. For instance,
what happens to the goroutine created by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_malg&lt;/code&gt;? Is it killed after the m is assigned
a new goroutine to execute? Is it parked on the goroutine global list? Is it just ignored?
Does it affect the runtime scheduler’s goroutine count? This is the last thing I feel I wanna
clear out regarding gccgo’s runtime.&lt;/p&gt;

&lt;h2&gt;gdb&lt;/h2&gt;

&lt;p&gt;For this week, I also run the executables created by gccgo through gdb. It was a fertile attempt
that, most of the time, confirmed my findings in the goruntime. It also provided us with some
other nice pieces of information regarding the crashing of goroutines, but also left me with a 
question.&lt;/p&gt;

&lt;p&gt;The code in question that I run through gdb is this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[!!] right before a go statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Your very typical hello world like goroutine program. Now, setting a break point in main 
(not the program’s main, that’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.main&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; as far as the runtime is concerned is
 the runtime entry point, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go-main.c&lt;/code&gt;) and running it through gdb yields the following
results:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;Breakpoint 1, main &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; at ../../../gcc_source/libgo/runtime/go-main.c:52
52 runtime_check &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
2:  __pthread_total &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; next
53 runtime_args &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argc, &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;byte &lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; argv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
2: __pthread_total &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
54 runtime_osinit &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
2: __pthread_total &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
63: runtime_schedinit &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
2: __pthread_total &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Up until now, nothing unexpected. The kernel thread is registered with the runtime scheduler
during its initialisation process in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_schedinit&lt;/code&gt; and that’ why the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_sched.mcount&lt;/code&gt;
is reported to be zero many times before schedinit is run.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;68 __go_go &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mainstart, NULL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
2: __pthread_total &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; display runtime_sched.gcount
3: runtime_sched.gcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That too is ok, because a new goroutine is registered with the scheduler during the call to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__go_go&lt;/code&gt;. Now I am gonna fast forward a bit, to a more interesting point.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;runtime_gogo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; new goroutine&lt;span class=&quot;s1&quot;&gt;&apos;s status is 2
[DEBUG] (in runtime_gogo) number of goroutines now is 2
[New Thread 629.30]

Program received SIGTRAP, Trace/breakpoint trap.
0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3
3: runtime_sched.gcount = 2
2: __pthread_total = 2
1: runtime_sched.mcount = 2
(gdb) info threads
 Id   Target  Id       Frame
 6    Thread  629.30   0x08048eb7 in main.main () at goroutine.go:12
 5    Thread  629.29   0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3
*4    Thread  629.28   0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3
```
This is getting weird. I mean, libpthread is reporting that 2 threads are active,
but gdb reports that 3 are active. Anyway, let&apos;&lt;/span&gt;s &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;:

&lt;span class=&quot;sb&quot;&gt;```&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;runtime_stoptheworld&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; stopped the garbage collector
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;runtime_starttheworld&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; starting the garbage collector
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;runtime_starttheworld&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; number of m&lt;span class=&quot;s1&quot;&gt;&apos;s now is: 2
[DEBUG] (in runtime_starttheworld) [note] there is already one gc thread
[!!] right before a go statement

Program received signal SIGTRAP, Trace/breakpoint trap.
0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3
3: runtime_sched.gcount = 2
2: __pthread_total = 2
1: runtime_sched.mcount = 2
(gdb) continue
... (output omitted by me for brevity)

[DEBUG] (in runtime_newm) Right before the call to pthread_create.
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos;&lt;/span&gt; failed.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;New Thread 629.31]

Program received signal SIGABRT, Aborted.
0x01da48ec &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
3: runtime_sched.gcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
2: __pthread_total &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oh my goodness. From a first glance, this seems to be a very serious inconsistency between libpthread and the goruntime.
At this point, the go scheduler reports 3 threads (3 registered threads, that means 
that flow of execution has passed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mcommoninit&lt;/code&gt;, the kernel thread initialisation function
which also registers the kernel thread with the runtime_scheduler) whereas libpthread reports 2 threads.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But WAIT! Where are you going? Things are about to get even more interesting!&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; info threads
 Id   Target  Id       Frame
 7    Thread  629.31   0x01f4da00 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;entry_point &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libpthread.so.0.3
 6    Thread  629.30   0x01da48ec &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
 5    Thread  629.29   0x01da48ec &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;4    Thread  629.28   0x01da48ec &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;GDB reports 4 threads. Yes, 4 threads ladies and gentlemen. Now take a look closely.
3 threads are in the same frame, with the one with id 4 being the one currently executed.
And there is also a pattern. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x01da48ec&lt;/code&gt; is the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eip&lt;/code&gt; register for all 3 of them.&lt;/p&gt;

&lt;p&gt;That’s one thing that is for certain. Now I already have an idea. Why not change
the current thread to the one with id 7? I’m sold to the idea, let’s do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; thread 7
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Switching to thread 7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Thread 629.31&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#0  0x01f4da00 in entry_point () from /lib/i386-gnu/libpthread.so.0.3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue
&lt;/span&gt;Continuing.

Program received signal SIGABRT, Aborted.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Switching to Thread 629.28]
0x01da48ec &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
3: runtime_sched.gcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
2: __pthread_total &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
1: runtime_sched.mcount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; info threads
 Id   Target  Id       Frame
 7    Thread  629.31   0x01dc08b0 &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
 6    Thread  629.30   0x01da48ec &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
 5    Thread  629.29   0x01da48ec &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;4    Thread  629.28   0x01da48ec &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/i386-gnu/libc.so.0.3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Damn. But I am curious. What’s the next value to be executed?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; x/i &lt;span class=&quot;nv&quot;&gt;$eip&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 0x1da48ec: ret&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And what is the next value to be executed for the thread with id 7?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; x/i &lt;span class=&quot;nv&quot;&gt;$eip&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 0x1dc08b0: call &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;%edx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Apparently, there is still much debugging left to checkout what is really happening.
But we have got some leads in the right direction, that hopefully will lead us to 
finally finding out where the problem lies, and correct it.&lt;/p&gt;

&lt;p&gt;Most importantly, in my immediate plans, before iI start playing around with libpthread
is to attempt the same debugging run on the same code, under linux (x86). Seeing as
go is clean on linux, it would provide some clues as to what the expected results 
should be, and where the execution differentiates substantially, a clue
that might be vital to finding the problem.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="gcc" />
      
        <category term="golang" />
      
        <category term="gsoc" />
      

      
        <summary type="html">Introduction This week was spent investigating the runtime and debugging executables with gdb. It was interesting in the sense that it provided me with some interesting pieces of information. Without any further ado, let’s present our findings: My findings Before starting out playing with libpthread, and glibc, I wanted to make sure that the goruntime behaved the way I believed it behaved, and make some further assurances about the goruntime. These assurances had to do with the total number of goroutines and the total number of machine threads at various checkpoints in the language runtime. The first thread in the program is initialised during runtime_schedinit. The number of m’s (kernel threads) is dependent on the number of goroutines. The runtime basically attempts to create an equal amount of m’s to run the goroutines. We can observe everytime a new goroutine is created, there is a number of calls to initiate a new kernel thread. There are at least two kernel threads. One that supports the runtime (mainly the garbage collector) and one that executes the code of the go program. There is only one small piece of code in the goruntime that creates some sort of confusion for me, and that is the code for a new m initialisation. Let me first present the code that confuses me: M* runtime_newm(void) { ... mp = runtime_mal(sizeof *mp); ... mcommoninit(mp); mp-&amp;gt;g0 = runtime_malg(-1, nil, nil); ... if(pthread_attr_init(&amp;amp;attr) != 0) runtime_throw(&quot;pthread_attr_init&quot;); if(pthread_attr_setdetachstate(&amp;amp;attr, PTHREAD_CREATE_DETACHED) != 0) runtime_throw(&quot;pthread_attr_setdetachstate&quot;); ... } I purposely compacted the function for brevity, as it only serves as a demonstration for a point. Now, my confusion lies in the line mp-&amp;gt;g0 = runtime_malg(-1, nil, nil). It is a piece of code that allocates memory for a new goroutine. Now I am ok with that, but what I do not understand is that new kernel threads (m’s) are supposed to be pick and run a goroutine from the global goroutine pool - that is run an existing one, and not create a new one. Now, the runtime_malg is given parameters that don’t initialise a new goroutine properly, but still, new memory is allocated for a new goroutine, and is returned to mp-&amp;gt;g0 from runtime_malg. Assuming I have not misunderstood something, and I am not mistaken (which is kind of likely), this is behavior that could lead to a number of questions and/or problems. For instance, what happens to the goroutine created by runtime_malg? Is it killed after the m is assigned a new goroutine to execute? Is it parked on the goroutine global list? Is it just ignored? Does it affect the runtime scheduler’s goroutine count? This is the last thing I feel I wanna clear out regarding gccgo’s runtime. gdb For this week, I also run the executables created by gccgo through gdb. It was a fertile attempt that, most of the time, confirmed my findings in the goruntime. It also provided us with some other nice pieces of information regarding the crashing of goroutines, but also left me with a question. The code in question that I run through gdb is this: package main import &quot;fmt&quot; func say(s string) { for i := 0; i &amp;lt; 5; i++ { fmt.Println(s) } } func main() { fmt.Println(&quot;[!!] right before a go statement&quot;) go say(&quot;world&quot;) say (&quot;hello&quot;) } Your very typical hello world like goroutine program. Now, setting a break point in main (not the program’s main, that’s main.main. main as far as the runtime is concerned is the runtime entry point, in go-main.c) and running it through gdb yields the following results: Breakpoint 1, main () at ../../../gcc_source/libgo/runtime/go-main.c:52 52 runtime_check (); 2: __pthread_total = 1 1: runtime_sched.mcount = 0 (gdb) next 53 runtime_args (argc, (byte **) argv); 2: __pthread_total = 1 1: runtime_sched.mcount = 0 54 runtime_osinit (); 2: __pthread_total = 1 1: runtime_sched.mcount = 0 63: runtime_schedinit (); 2: __pthread_total = 1 1: runtime_sched.mcount = 1 Up until now, nothing unexpected. The kernel thread is registered with the runtime scheduler during its initialisation process in runtime_schedinit and that’ why the runtime_sched.mcount is reported to be zero many times before schedinit is run. 68 __go_go (mainstart, NULL); 2: __pthread_total = 1 1: runtime_sched.mcount = 1 (gdb) display runtime_sched.gcount 3: runtime_sched.gcount = 0 That too is ok, because a new goroutine is registered with the scheduler during the call to __go_go. Now I am gonna fast forward a bit, to a more interesting point. ... [DEBUG] (in runtime_gogo) new goroutine&apos;s status is 2 [DEBUG] (in runtime_gogo) number of goroutines now is 2 [New Thread 629.30] Program received SIGTRAP, Trace/breakpoint trap. 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 3: runtime_sched.gcount = 2 2: __pthread_total = 2 1: runtime_sched.mcount = 2 (gdb) info threads Id Target Id Frame 6 Thread 629.30 0x08048eb7 in main.main () at goroutine.go:12 5 Thread 629.29 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 *4 Thread 629.28 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 ``` This is getting weird. I mean, libpthread is reporting that 2 threads are active, but gdb reports that 3 are active. Anyway, let&apos;s continue: ``` [DEBUG] (in runtime_stoptheworld) stopped the garbage collector [DEBUG] (in runtime_starttheworld) starting the garbage collector [DEBUG] (in runtime_starttheworld) number of m&apos;s now is: 2 [DEBUG] (in runtime_starttheworld) [note] there is already one gc thread [!!] right before a go statement Program received signal SIGTRAP, Trace/breakpoint trap. 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 3: runtime_sched.gcount = 2 2: __pthread_total = 2 1: runtime_sched.mcount = 2 (gdb) continue ... (output omitted by me for brevity) [DEBUG] (in runtime_newm) Right before the call to pthread_create. a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed. [New Thread 629.31] Program received signal SIGABRT, Aborted. 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 3: runtime_sched.gcount = 3 2: __pthread_total = 2 1: runtime_sched.mcount = 3 Oh my goodness. From a first glance, this seems to be a very serious inconsistency between libpthread and the goruntime. At this point, the go scheduler reports 3 threads (3 registered threads, that means that flow of execution has passed mcommoninit, the kernel thread initialisation function which also registers the kernel thread with the runtime_scheduler) whereas libpthread reports 2 threads. But WAIT! Where are you going? Things are about to get even more interesting! (gdb) info threads Id Target Id Frame 7 Thread 629.31 0x01f4da00 in entry_point () from /lib/i386-gnu/libpthread.so.0.3 6 Thread 629.30 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 5 Thread 629.29 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 *4 Thread 629.28 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 GDB reports 4 threads. Yes, 4 threads ladies and gentlemen. Now take a look closely. 3 threads are in the same frame, with the one with id 4 being the one currently executed. And there is also a pattern. 0x01da48ec is the value of the eip register for all 3 of them. That’s one thing that is for certain. Now I already have an idea. Why not change the current thread to the one with id 7? I’m sold to the idea, let’s do this: (gdb) thread 7 [Switching to thread 7 (Thread 629.31)] #0 0x01f4da00 in entry_point () from /lib/i386-gnu/libpthread.so.0.3 (gdb) continue Continuing. Program received signal SIGABRT, Aborted. [Switching to Thread 629.28] 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 3: runtime_sched.gcount = 3 2: __pthread_total = 2 1: runtime_sched.mcount = 3 (gdb) info threads Id Target Id Frame 7 Thread 629.31 0x01dc08b0 in ?? () from /lib/i386-gnu/libc.so.0.3 6 Thread 629.30 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 5 Thread 629.29 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 *4 Thread 629.28 0x01da48ec in ?? () from /lib/i386-gnu/libc.so.0.3 Damn. But I am curious. What’s the next value to be executed? (gdb) x/i $eip =&amp;gt; 0x1da48ec: ret And what is the next value to be executed for the thread with id 7? (gdb) x/i $eip =&amp;gt; 0x1dc08b0: call *%edx Conclusion Apparently, there is still much debugging left to checkout what is really happening. But we have got some leads in the right direction, that hopefully will lead us to finally finding out where the problem lies, and correct it. Most importantly, in my immediate plans, before iI start playing around with libpthread is to attempt the same debugging run on the same code, under linux (x86). Seeing as go is clean on linux, it would provide some clues as to what the expected results should be, and where the execution differentiates substantially, a clue that might be vital to finding the problem.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">GSOC week 10 report</title>
      
      
      <link href="https://nlightnfotis.github.io/2013/08/26/gsoc-week-10-report/" rel="alternate" type="text/html" title="GSOC week 10 report" />
      
      <published>2013-08-26T09:00:00+00:00</published>
      <updated>2013-08-26T09:00:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2013/08/26/gsoc-week-10-report</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2013/08/26/gsoc-week-10-report/">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This week was spent attempting to debug the gccgo runtime via print statements. There were many things
that I gained from this endeavour. The most significant of which, is the fact that I have got a great
deal of information regarding the bootstrapping of a go process. Let’s proceed into presenting this 
week’s findings, shall we?&lt;/p&gt;

&lt;h1&gt;Findings&lt;/h1&gt;

&lt;h2&gt;The process bootstrapping sequence&lt;/h2&gt;

&lt;p&gt;The code that begins a new go-process is conveniently located in a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go-main.c&lt;/code&gt;, the most significant
part of which is the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_check&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_osinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_schedinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;__go_go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainstart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_mstart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtime_m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mainstart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime_main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The process is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_check&lt;/code&gt; runs and registers the os_Args and syscall_Envs as runtime_roots with the garbage collector. I am still investigating what this function exactly is doing, but it seems like some early initialisation of the garbage collector&lt;/li&gt;
  &lt;li&gt;Secondly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_args&lt;/code&gt; is run. It’s job is to call a specific argument handler for the arguments passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Thirdly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_osinit&lt;/code&gt; is run, whose job is to call the lowlevel _CPU_COUNT function, to get the number of CPUs (in a specific data structure that represents a set of CPUs)&lt;/li&gt;
  &lt;li&gt;After that, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_schedinit&lt;/code&gt; is run, whose job is to create the very first goroutine (g) and system thread (m), and continues with parsing the command line arguments, and the environment variables. After that it sets the maximum number of cpus that are to be used (via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOMAXPROCS&lt;/code&gt;), runs the first goroutine, and does some last pieces of the scheduler’s initialisation.&lt;/li&gt;
  &lt;li&gt;Following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_schedinit&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__go_go&lt;/code&gt; is run, a function whose purpose is to create a new queue, tell it to execute the function that is passed to it as the first parameter, and then queue the goroutine in the
global ready-to-run goroutine pool.&lt;/li&gt;
  &lt;li&gt;Last but not least, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_mstart&lt;/code&gt; runs, which seems to be starting te execution of the kernel thread created during &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_schedinit&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The very last piece of code that is run (and most probably the most important) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_main&lt;/code&gt;. Remember that this is passed as a parameter to a goroutine created during the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__go_go&lt;/code&gt; call, and its job is to mark the goroutine that called it as &lt;em&gt;the main os thread&lt;/em&gt;, to initialise the sceduler, and create a goroutine whose job is to release unused memory (from the heap) back to the OS.
It then starts executing the process user defined instructions (the code the programmer run) via a call to a
macro that directs it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__go_init_main&lt;/code&gt; in the assembly generated by the compiler.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime_main&lt;/code&gt; is also the function that terminates the execution of a go process, with a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_exit&lt;/code&gt;
which seems to be a macro to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit&lt;/code&gt; function.&lt;/p&gt;

&lt;h2&gt;Other findings&lt;/h2&gt;

&lt;p&gt;During our debugging sessions we found out that the total count of kernel threads that are running in a simple program is at least two.
The first one is the bootstrap M, (the one initialised during the program’s initialisation, inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_schedinit&lt;/code&gt;) and at least another one, (I am still invistigating the validity of the following claim) 
created to be used by the garbage collector.&lt;/p&gt;

&lt;p&gt;A simple go program such as one doing arithmetic or printing a helloworld like message evidently has no issue
running.
The issues arrise when we use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go statement&lt;/code&gt;. With all our debugging messages activated, this is how a simple
go program flows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;root@debian:~/Software/Experiments/go# ./a.out
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_mcheck is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_args is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_osinit is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_schedinit is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_mstart is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;runtime_mstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; right before the call to runtime_minit
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;mainstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; right before the call to runtime_main
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;runtime_main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Beginning of runtime_main
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;start of runtime_newm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Total number of m&lt;span class=&quot;s1&quot;&gt;&apos;s is 1
[DEBUG] (in runtime_newm) Preparing to create a new thread
[DEBUG] (in runtime_newm) Right before the call to pthread_create
[DEBUG] (in runtime_newm) pthread_create returned 0
[DEBUG] (in runtime_mstart) right before the call to runtime_minit
[DEBUG] (end of runtime_newm) Total number of m&apos;&lt;/span&gt;s is 2
Hello, fotis
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;runtime_main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Right before runtime_exit&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this is how a goroutine powered program fails:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;root@debian:~/Software/Experiments/go# ./a.out
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_mcheck is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_args is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_osinit is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_schedinit is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; before runtime_mstart is run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;runtime_mstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; right before the call to runtime_minit
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;mainstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; right before the call to runtime_main
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;runtime_main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Beginning of runtime_main
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;start of runtime_newm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Total number of m&lt;span class=&quot;s1&quot;&gt;&apos;s is 1
[DEBUG] (in runtime_newm) Preparing to create a new thread
[DEBUG] (in runtime_newm) Right before the call to pthread_create
[DEBUG] (in runtime_newm) pthread_create returned 0
[DEBUG] (in runtime_mstart) right before the call to runtime_minit
[DEBUG] (end of runtime_newm) Total number of m&apos;&lt;/span&gt;s is 2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;start of runtime_new&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Total number of m&lt;span class=&quot;s1&quot;&gt;&apos;s is 2
[DEBUG] (in runtime_newm) Preparing to create a new thread.
[DEBUG] (in runtime_newm) Right before the call to pthread_create
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos;&lt;/span&gt; failed.
Aborted&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1&gt;Work for the next week&lt;/h1&gt;

&lt;p&gt;I will of course continue to print debug until I have knowledge of the exact flow of execution in the go
runtime. Right now I have very good knowledge of the flow, but there are some things that I need to sort out.
For instance it is not exactly clear to me why we call certain functions, or what they are supposed to be doing at certain parts. After I sort this out,  I also plan to start debugging the libpthread to see what’s libpthreads status
during a hello world like program, and during a goroutine powered program, to get to see if we get
to find something interesting in libpthread (like how many threads does libpthread report against how
many the goruntime reports)&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="gsoc" />
      
        <category term="gcc" />
      
        <category term="golang" />
      

      
        <summary type="html">Introduction This week was spent attempting to debug the gccgo runtime via print statements. There were many things that I gained from this endeavour. The most significant of which, is the fact that I have got a great deal of information regarding the bootstrapping of a go process. Let’s proceed into presenting this week’s findings, shall we? Findings The process bootstrapping sequence The code that begins a new go-process is conveniently located in a file called go-main.c, the most significant part of which is the following: int main (int argc, char **argv) { runtime_check (); runtime_args (argc, (byte **) argv); runtime_osinit (); runtime_schedinit (); __go_go (mainstart, NULL); runtime_mstart (runtime_m ()); abort (); } static void mainstart (void *arg __attribute__ ((unused))) { runtime_main (); } The process is as follows: First runtime_check runs and registers the os_Args and syscall_Envs as runtime_roots with the garbage collector. I am still investigating what this function exactly is doing, but it seems like some early initialisation of the garbage collector Secondly, runtime_args is run. It’s job is to call a specific argument handler for the arguments passed to main. Thirdly, runtime_osinit is run, whose job is to call the lowlevel _CPU_COUNT function, to get the number of CPUs (in a specific data structure that represents a set of CPUs) After that, runtime_schedinit is run, whose job is to create the very first goroutine (g) and system thread (m), and continues with parsing the command line arguments, and the environment variables. After that it sets the maximum number of cpus that are to be used (via GOMAXPROCS), runs the first goroutine, and does some last pieces of the scheduler’s initialisation. Following runtime_schedinit, __go_go is run, a function whose purpose is to create a new queue, tell it to execute the function that is passed to it as the first parameter, and then queue the goroutine in the global ready-to-run goroutine pool. Last but not least, runtime_mstart runs, which seems to be starting te execution of the kernel thread created during runtime_schedinit. The very last piece of code that is run (and most probably the most important) is runtime_main. Remember that this is passed as a parameter to a goroutine created during the __go_go call, and its job is to mark the goroutine that called it as the main os thread, to initialise the sceduler, and create a goroutine whose job is to release unused memory (from the heap) back to the OS. It then starts executing the process user defined instructions (the code the programmer run) via a call to a macro that directs it to __go_init_main in the assembly generated by the compiler. Runtime_main is also the function that terminates the execution of a go process, with a call to runtime_exit which seems to be a macro to the exit function. Other findings During our debugging sessions we found out that the total count of kernel threads that are running in a simple program is at least two. The first one is the bootstrap M, (the one initialised during the program’s initialisation, inside runtime_schedinit) and at least another one, (I am still invistigating the validity of the following claim) created to be used by the garbage collector. A simple go program such as one doing arithmetic or printing a helloworld like message evidently has no issue running. The issues arrise when we use a go statement. With all our debugging messages activated, this is how a simple go program flows: root@debian:~/Software/Experiments/go# ./a.out [DEBUG] (in main) before runtime_mcheck is run [DEBUG] (in main) before runtime_args is run [DEBUG] (in main) before runtime_osinit is run [DEBUG] (in main) before runtime_schedinit is run [DEBUG] (in main) before runtime_mstart is run [DEBUG] (in runtime_mstart) right before the call to runtime_minit [DEBUG] (in mainstart) right before the call to runtime_main [DEBUG] (in runtime_main) Beginning of runtime_main [DEBUG] (start of runtime_newm) Total number of m&apos;s is 1 [DEBUG] (in runtime_newm) Preparing to create a new thread [DEBUG] (in runtime_newm) Right before the call to pthread_create [DEBUG] (in runtime_newm) pthread_create returned 0 [DEBUG] (in runtime_mstart) right before the call to runtime_minit [DEBUG] (end of runtime_newm) Total number of m&apos;s is 2 Hello, fotis [DEBUG] (in runtime_main) Right before runtime_exit And this is how a goroutine powered program fails: root@debian:~/Software/Experiments/go# ./a.out [DEBUG] (in main) before runtime_mcheck is run [DEBUG] (in main) before runtime_args is run [DEBUG] (in main) before runtime_osinit is run [DEBUG] (in main) before runtime_schedinit is run [DEBUG] (in main) before runtime_mstart is run [DEBUG] (in runtime_mstart) right before the call to runtime_minit [DEBUG] (in mainstart) right before the call to runtime_main [DEBUG] (in runtime_main) Beginning of runtime_main [DEBUG] (start of runtime_newm) Total number of m&apos;s is 1 [DEBUG] (in runtime_newm) Preparing to create a new thread [DEBUG] (in runtime_newm) Right before the call to pthread_create [DEBUG] (in runtime_newm) pthread_create returned 0 [DEBUG] (in runtime_mstart) right before the call to runtime_minit [DEBUG] (end of runtime_newm) Total number of m&apos;s is 2 [DEBUG] (start of runtime_new) Total number of m&apos;s is 2 [DEBUG] (in runtime_newm) Preparing to create a new thread. [DEBUG] (in runtime_newm) Right before the call to pthread_create a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed. Aborted Work for the next week I will of course continue to print debug until I have knowledge of the exact flow of execution in the go runtime. Right now I have very good knowledge of the flow, but there are some things that I need to sort out. For instance it is not exactly clear to me why we call certain functions, or what they are supposed to be doing at certain parts. After I sort this out, I also plan to start debugging the libpthread to see what’s libpthreads status during a hello world like program, and during a goroutine powered program, to get to see if we get to find something interesting in libpthread (like how many threads does libpthread report against how many the goruntime reports)</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">GSOC Week 9 (Partial) report</title>
      
      
      <link href="https://nlightnfotis.github.io/2013/08/19/gsoc-week-9-partial-report/" rel="alternate" type="text/html" title="GSOC Week 9 (Partial) report" />
      
      <published>2013-08-19T11:35:00+00:00</published>
      <updated>2013-08-19T11:35:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2013/08/19/gsoc-week-9-partial-report</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2013/08/19/gsoc-week-9-partial-report/">&lt;p&gt;This week was revolving around the print debugging in the gccgo runtime in search
for clues regarding the creation of new threads under the goruntime, so as to see
if there is something wrong with the runtime itself, or the way the runtime 
interacts with the libpthread.&lt;/p&gt;

&lt;h2&gt;(partial presentation of) findings&lt;/h2&gt;

&lt;p&gt;During print debugging the gccgo runtime, I didn’t notice anything abnormal or 
unusual so far. For example, the code that does trigger the assertion failure
seems to work at least once, since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pthread_create()&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; at least once.&lt;/p&gt;

&lt;p&gt;This is expected behavior, since we already have stated that there is at least
one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M&lt;/code&gt; (kernel thread) created at the initialisation of the program’s runtime.&lt;/p&gt;

&lt;p&gt;If however, we try to use a &lt;em&gt;go statement&lt;/em&gt; in our program, to make usage of a 
goroutine, the runtime still fails at the usual assertion fail, however the 
output of the program is this:&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
[DEBUG] pthread_create returned 0
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed.
Aborted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above output can give us some pieces of information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pthread_create()&lt;/code&gt; is called at least once.&lt;/li&gt;
  &lt;li&gt;it executes successfuly and without errors - libpthread code suggests that 0 is returned upon successful execution and creation of a thread&lt;/li&gt;
  &lt;li&gt;However the assertion is still triggered, which we know it’s getting triggered during thread creation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second bullet point is also being supported by the fact that even if you exe
cute something as simple as hello world in go, a new M is created, so you get
something along the lines of this as an output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;root@debian:~/Software/Experiments/go# ./a.out
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] pthread_create returned 0
Hello World!
root@debian:~/Software/Experiments/go#&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is however something that the above piece of code doesn’t tell us, 
but it would be useful to know: &lt;em&gt;How many times did we create a new thread?&lt;/em&gt;
So we modify our gcc’s source code to see how many times the runtimes 
attempts to create a new kernel thread (M). This is what we get out of it:&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
[DEBUG] Preparing to create a new thread.
[DEBUG] pthread_create returned 0
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed.
[DEBUG] Preparing to create a new thread.
aborted.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code at this point in the runtime is this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Create a new m.  It will start off with a call to runtime_mstart.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runtime_newm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pthread_attr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#if 0
	static const Type *mtype;  // The Go type M
	if(mtype == nil) {
		Eface e;
		runtime_gc_m_ptr(&amp;amp;e);
		mtype = ((const PtrType*)e.__type_descriptor)-&amp;gt;__element_type;
	}
#endif
&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// XXX: Added by fotis for print debugging.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[DEBUG] Preparing to create a new thread.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_mal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mcommoninit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_malg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pthread_attr_init&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_setdetachstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTHREAD_CREATE_DETACHED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pthread_attr_setdetachstate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// &amp;lt;http://www.gnu.org/software/hurd/open_issues/libpthread_set_stack_size.html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef __GNU__
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTHREAD_STACK_MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// With glibc before version 2.16 the static TLS size is taken&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// out of the stack size, and we get an error or a crash if&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// there is not enough stack space left.  Add it back in if we&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// can, in case the program uses a lot of TLS space.  FIXME:&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// This can be disabled in glibc 2.16 and later, if the bug is&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// indeed fixed then.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tlssize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_setstacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pthread_attr_setstacksize&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Block signals during pthread_create so that the new thread&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// starts with signals disabled.  It will enable them in minit.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigfillset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef SIGTRAP
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Blocking SIGTRAP reportedly breaks gdb on Alpha GNU/Linux.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigdelset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGTRAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigemptyset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigprocmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG_BLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_mstart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* XXX: added for debug printing */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[DEBUG] pthread_create() returned %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;sigprocmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG_SETMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pthread_create&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can deduce two things about our situation right now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is &lt;strong&gt;at least one&lt;/strong&gt; thread successfully created, and there is an attempt
to create another one.&lt;/li&gt;
  &lt;li&gt;The second time, there is a failure before pthread_create is called.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Continuation of work.&lt;/h2&gt;

&lt;p&gt;I have been following this course of path the last week. I presented
some of my findings, and hope to soon be able to write an exhaustive
report on what exactly it is that causes the bug.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="gcc" />
      
        <category term="golang" />
      
        <category term="gsoc" />
      

      
        <summary type="html">This week was revolving around the print debugging in the gccgo runtime in search for clues regarding the creation of new threads under the goruntime, so as to see if there is something wrong with the runtime itself, or the way the runtime interacts with the libpthread. (partial presentation of) findings During print debugging the gccgo runtime, I didn’t notice anything abnormal or unusual so far. For example, the code that does trigger the assertion failure seems to work at least once, since pthread_create() returns 0 at least once. This is expected behavior, since we already have stated that there is at least one M (kernel thread) created at the initialisation of the program’s runtime. If however, we try to use a go statement in our program, to make usage of a goroutine, the runtime still fails at the usual assertion fail, however the output of the program is this: root@debian:~/Software/Experiments/go# ./a.out [DEBUG] pthread_create returned 0 a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed. Aborted The above output can give us some pieces of information: pthread_create() is called at least once. it executes successfuly and without errors - libpthread code suggests that 0 is returned upon successful execution and creation of a thread However the assertion is still triggered, which we know it’s getting triggered during thread creation. The second bullet point is also being supported by the fact that even if you exe cute something as simple as hello world in go, a new M is created, so you get something along the lines of this as an output: root@debian:~/Software/Experiments/go# ./a.out [DEBUG] pthread_create returned 0 Hello World! root@debian:~/Software/Experiments/go# There is however something that the above piece of code doesn’t tell us, but it would be useful to know: How many times did we create a new thread? So we modify our gcc’s source code to see how many times the runtimes attempts to create a new kernel thread (M). This is what we get out of it: root@debian:~/Software/Experiments/go# ./a.out [DEBUG] Preparing to create a new thread. [DEBUG] pthread_create returned 0 a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed. [DEBUG] Preparing to create a new thread. aborted. The code at this point in the runtime is this: // Create a new m. It will start off with a call to runtime_mstart. M* runtime_newm(void) { M *mp; pthread_attr_t attr; pthread_t tid; size_t stacksize; sigset_t clear; sigset_t old; int ret; #if 0 static const Type *mtype; // The Go type M if(mtype == nil) { Eface e; runtime_gc_m_ptr(&amp;amp;e); mtype = ((const PtrType*)e.__type_descriptor)-&amp;gt;__element_type; } #endif // XXX: Added by fotis for print debugging. printf(&quot;[DEBUG] Preparing to create a new thread.\n&quot;) mp = runtime_mal(sizeof *mp); mcommoninit(mp); mp-&amp;gt;g0 = runtime_malg(-1, nil, nil); if(pthread_attr_init(&amp;amp;attr) != 0) runtime_throw(&quot;pthread_attr_init&quot;); if(pthread_attr_setdetachstate(&amp;amp;attr, PTHREAD_CREATE_DETACHED) != 0) runtime_throw(&quot;pthread_attr_setdetachstate&quot;); // &amp;lt;http://www.gnu.org/software/hurd/open_issues/libpthread_set_stack_size.html&amp;gt; #ifdef __GNU__ stacksize = StackMin; #else stacksize = PTHREAD_STACK_MIN; // With glibc before version 2.16 the static TLS size is taken // out of the stack size, and we get an error or a crash if // there is not enough stack space left. Add it back in if we // can, in case the program uses a lot of TLS space. FIXME: // This can be disabled in glibc 2.16 and later, if the bug is // indeed fixed then. stacksize += tlssize; #endif if(pthread_attr_setstacksize(&amp;amp;attr, stacksize) != 0) runtime_throw(&quot;pthread_attr_setstacksize&quot;); // Block signals during pthread_create so that the new thread // starts with signals disabled. It will enable them in minit. sigfillset(&amp;amp;clear); #ifdef SIGTRAP // Blocking SIGTRAP reportedly breaks gdb on Alpha GNU/Linux. sigdelset(&amp;amp;clear, SIGTRAP); #endif sigemptyset(&amp;amp;old); sigprocmask(SIG_BLOCK, &amp;amp;clear, &amp;amp;old); ret = pthread_create(&amp;amp;tid, &amp;amp;attr, runtime_mstart, mp); /* XXX: added for debug printing */ printf(&quot;[DEBUG] pthread_create() returned %d\n&quot;, ret); sigprocmask(SIG_SETMASK, &amp;amp;old, nil); if (ret != 0) runtime_throw(&quot;pthread_create&quot;); return mp; } We can deduce two things about our situation right now: There is at least one thread successfully created, and there is an attempt to create another one. The second time, there is a failure before pthread_create is called. Continuation of work. I have been following this course of path the last week. I presented some of my findings, and hope to soon be able to write an exhaustive report on what exactly it is that causes the bug.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">GSOC Week 8 (Partial) report</title>
      
      
      <link href="https://nlightnfotis.github.io/2013/08/12/gsoc-week-8-partial-report/" rel="alternate" type="text/html" title="GSOC Week 8 (Partial) report" />
      
      <published>2013-08-12T10:27:00+00:00</published>
      <updated>2013-08-12T10:27:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2013/08/12/gsoc-week-8-partial-report</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2013/08/12/gsoc-week-8-partial-report/">&lt;p&gt;This week was spent studying the go language’s runtime and studying the behaviour of various go programs when executed under the Hurd. I learnt a variety of new things, and got some 
new clues about the problem.&lt;/p&gt;

&lt;h2&gt;The new libgo clues&lt;/h2&gt;

&lt;p&gt;I already know that &lt;em&gt;M’s are the “real” kernel schedulable threads&lt;/em&gt; and &lt;em&gt;G’s are the go runtime managed ones (goroutines)&lt;/em&gt;. Last time I had gone through the go runtime’s code I had noticed that neither of them get created, so there must be an issue with thread creation. &lt;strong&gt;But since there is at least one of each created during the program’s initialization, how come
most programs are able to run, and issues present themselves when we manually attempt to run a goroutine?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will admit that the situation looks strange. So I decided to look more into it. Before we go any further, I have to embed the issues I had when I run goroutine powered programs under the Hurd.&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed.
Aborted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__pthread_create_internal&lt;/code&gt; is a libpthread function that gets called when a new posix thread is instanciated. So we know that when we call a goroutine, apart from the goroutine,
there is at least one kernel thread created, otherwise, if a new goroutine was created, and not a new kernel thread (M) why wasn’t it matched with an existing kernel thread
(remember there is at least one).&lt;/p&gt;

&lt;p&gt;That made me look into the go runtime some more. I found a lot of things, that I can not enumerate here, but amongst the most interesting ones, was the following piece of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Create a new m.  It will start off with a call to runtime_mstart.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runtime_newm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pthread_attr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#if 0
	static const Type *mtype;  // The Go type M
	if(mtype == nil) {
		Eface e;
		runtime_gc_m_ptr(&amp;amp;e);
		mtype = ((const PtrType*)e.__type_descriptor)-&amp;gt;__element_type;
	}
#endif
&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_mal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mcommoninit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_malg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pthread_attr_init&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_setdetachstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTHREAD_CREATE_DETACHED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pthread_attr_setdetachstate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTHREAD_STACK_MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// With glibc before version 2.16 the static TLS size is taken&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// out of the stack size, and we get an error or a crash if&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// there is not enough stack space left.  Add it back in if we&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// can, in case the program uses a lot of TLS space.  FIXME:&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// This can be disabled in glibc 2.16 and later, if the bug is&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// indeed fixed then.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tlssize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_attr_setstacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stacksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pthread_attr_setstacksize&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Block signals during pthread_create so that the new thread&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// starts with signals disabled.  It will enable them in minit.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigfillset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef SIGTRAP
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Blocking SIGTRAP reportedly breaks gdb on Alpha GNU/Linux.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigdelset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGTRAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigemptyset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigprocmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG_BLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_mstart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sigprocmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG_SETMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtime_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pthread_create&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the code that creates a new kernel thread. Notice the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret = pthread_create(&amp;amp;tid, &amp;amp;attr, runtime_mstart, mp);&lt;/code&gt;. It’s obvious that it creates a new kernel thread,
so that explains why we get the specific error. But what is not explained is that since we do have at least one in program startup, why is this specific error only triggered when
we manually create a go routine?&lt;/p&gt;

&lt;h2&gt;Go programs under the Hurd&lt;/h2&gt;

&lt;p&gt;Apart from studying Go’s runtime source code, I also run some experiments under the Hurd. I got some very weird results that I am investigating, but I would like to share nonetheless.
Consider the following piece of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A very basic example that can demonstrate goroutines. Now, if we change &lt;strong&gt;one&lt;/strong&gt; of the say functions inside main to a goroutine, this happens:&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed.
Aborted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt; if we change &lt;strong&gt;BOTH&lt;/strong&gt; of these functions to goroutines (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go say(&quot;world&quot;)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go say(&quot;hello&quot;)&lt;/code&gt;), this happens:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;root@debian:~/Software/Experiments/go# ./a.out
root@debian:~/Software/Experiments/go# &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wait a minute. It can’t be! Did it execute correctly? Where is the output?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;root@debian:~/Software/Experiments/go# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
0
root@debian:~/Software/Experiments/go#&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It reports that it has executed correctly. But there is no output.&lt;/p&gt;

&lt;h2&gt;What I am doing next&lt;/h2&gt;

&lt;p&gt;I will continue reading through the go runtime for some clues. On the more active size, I am writing a custom test case for goroutine testing under the Hurd, while also doing some analysis
on the programs that run there (currently studying the assembly generated for these programs) to see how they differ and why we get this particular behavior.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="gsoc" />
      
        <category term="golang" />
      
        <category term="gcc" />
      

      
        <summary type="html">This week was spent studying the go language’s runtime and studying the behaviour of various go programs when executed under the Hurd. I learnt a variety of new things, and got some new clues about the problem. The new libgo clues I already know that M’s are the “real” kernel schedulable threads and G’s are the go runtime managed ones (goroutines). Last time I had gone through the go runtime’s code I had noticed that neither of them get created, so there must be an issue with thread creation. But since there is at least one of each created during the program’s initialization, how come most programs are able to run, and issues present themselves when we manually attempt to run a goroutine? I will admit that the situation looks strange. So I decided to look more into it. Before we go any further, I have to embed the issues I had when I run goroutine powered programs under the Hurd. root@debian:~/Software/Experiments/go# ./a.out a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed. Aborted __pthread_create_internal is a libpthread function that gets called when a new posix thread is instanciated. So we know that when we call a goroutine, apart from the goroutine, there is at least one kernel thread created, otherwise, if a new goroutine was created, and not a new kernel thread (M) why wasn’t it matched with an existing kernel thread (remember there is at least one). That made me look into the go runtime some more. I found a lot of things, that I can not enumerate here, but amongst the most interesting ones, was the following piece of code: // Create a new m. It will start off with a call to runtime_mstart. M* runtime_newm(void) { M *mp; pthread_attr_t attr; pthread_t tid; size_t stacksize; sigset_t clear; sigset_t old; int ret; #if 0 static const Type *mtype; // The Go type M if(mtype == nil) { Eface e; runtime_gc_m_ptr(&amp;amp;e); mtype = ((const PtrType*)e.__type_descriptor)-&amp;gt;__element_type; } #endif mp = runtime_mal(sizeof *mp); mcommoninit(mp); mp-&amp;gt;g0 = runtime_malg(-1, nil, nil); if(pthread_attr_init(&amp;amp;attr) != 0) runtime_throw(&quot;pthread_attr_init&quot;); if(pthread_attr_setdetachstate(&amp;amp;attr, PTHREAD_CREATE_DETACHED) != 0) runtime_throw(&quot;pthread_attr_setdetachstate&quot;); stacksize = PTHREAD_STACK_MIN; // With glibc before version 2.16 the static TLS size is taken // out of the stack size, and we get an error or a crash if // there is not enough stack space left. Add it back in if we // can, in case the program uses a lot of TLS space. FIXME: // This can be disabled in glibc 2.16 and later, if the bug is // indeed fixed then. stacksize += tlssize; if(pthread_attr_setstacksize(&amp;amp;attr, stacksize) != 0) runtime_throw(&quot;pthread_attr_setstacksize&quot;); // Block signals during pthread_create so that the new thread // starts with signals disabled. It will enable them in minit. sigfillset(&amp;amp;clear); #ifdef SIGTRAP // Blocking SIGTRAP reportedly breaks gdb on Alpha GNU/Linux. sigdelset(&amp;amp;clear, SIGTRAP); #endif sigemptyset(&amp;amp;old); sigprocmask(SIG_BLOCK, &amp;amp;clear, &amp;amp;old); ret = pthread_create(&amp;amp;tid, &amp;amp;attr, runtime_mstart, mp); sigprocmask(SIG_SETMASK, &amp;amp;old, nil); if (ret != 0) runtime_throw(&quot;pthread_create&quot;); return mp; } This is the code that creates a new kernel thread. Notice the line ret = pthread_create(&amp;amp;tid, &amp;amp;attr, runtime_mstart, mp);. It’s obvious that it creates a new kernel thread, so that explains why we get the specific error. But what is not explained is that since we do have at least one in program startup, why is this specific error only triggered when we manually create a go routine? Go programs under the Hurd Apart from studying Go’s runtime source code, I also run some experiments under the Hurd. I got some very weird results that I am investigating, but I would like to share nonetheless. Consider the following piece of code: package main import &quot;fmt&quot; func say(s string) { for i := 0; i &amp;lt; 5; i++ { fmt.Println(s) } } func main() { say(&quot;world&quot;) say(&quot;hello&quot;) } A very basic example that can demonstrate goroutines. Now, if we change one of the say functions inside main to a goroutine, this happens: root@debian:~/Software/Experiments/go# ./a.out a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed. Aborted BUT if we change BOTH of these functions to goroutines (go say(&quot;world&quot;), go say(&quot;hello&quot;)), this happens: root@debian:~/Software/Experiments/go# ./a.out root@debian:~/Software/Experiments/go# Wait a minute. It can’t be! Did it execute correctly? Where is the output? root@debian:~/Software/Experiments/go# echo $? 0 root@debian:~/Software/Experiments/go# It reports that it has executed correctly. But there is no output. What I am doing next I will continue reading through the go runtime for some clues. On the more active size, I am writing a custom test case for goroutine testing under the Hurd, while also doing some analysis on the programs that run there (currently studying the assembly generated for these programs) to see how they differ and why we get this particular behavior.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">GSOC (Partial) Week 7 report</title>
      
      
      <link href="https://nlightnfotis.github.io/2013/08/05/gsoc-partial-week-7-report/" rel="alternate" type="text/html" title="GSOC (Partial) Week 7 report" />
      
      <published>2013-08-05T01:36:00+00:00</published>
      <updated>2013-08-05T01:36:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2013/08/05/gsoc-partial-week-7-report</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2013/08/05/gsoc-partial-week-7-report/">&lt;h1&gt;An exciting week.&lt;/h1&gt;

&lt;p&gt;This week was exciting. Spending it on learning about the go runtime was the reason for this. As insightfull as it was however,
it also confused me a little bit. Before this goes any further, I should state that this is a partial report on my research
and my findings. My aims for this week were the following: &lt;strong&gt;To investigate the behavior of go programs under the Hurd, to
study the go runtime, and possibly modify it to see if the goroutine issues are libpthread’s issue or the go’s runtime issue&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;Presenting my findings.&lt;/h1&gt;

&lt;p&gt;Most of my time was spent studying the gcc go frontend, libgo and the go runtime. Fortunatelly, I can say (gladly) that it was
time well spent. What I got from it were some nice pieces of insight, but also some slight confusion and doubts.&lt;/p&gt;

&lt;p&gt;The first interesting thing in my findings was this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Defer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Panic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// current exception being thrown&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;is_foreign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// whether current exception from other language&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcstack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// if status==Gsyscall, gcstack = stackbase to use during gc&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcstack_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcnext_segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcnext_sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcinitial_sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ucontext_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcregs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// initial function&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;alllink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// on allg&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// passed parameter on wakeup&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fromgogo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// reached from gogo&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int16&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;goid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;selgen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// valid sudog pointer&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;waitreason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// if status==Gwaiting&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;schedlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;readyonstop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ispanic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;issystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int8&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;raceignore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ignore race detection events&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// for debuggers, but offset not hard-coded&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;lockedm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;idlem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;writenbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;writebuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// DeferChunk	*dchunk;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// DeferChunk	*dchunknext;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sigcode0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sigcode1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// uintptr	sigpc;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gopc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// pc of go statement that created this goroutine&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ncgo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CgoMal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cgomal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ucontext_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;stack_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yep. This is the code that resembles a (yeah, you guessed it, a &lt;strong&gt;goroutine&lt;/strong&gt;). I was pretty surprised at first to see that a thread is resembled as a struct. But then again,
taking a closer look at it, it makes perfect sense. The next one though was a &lt;em&gt;lot trickier&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;g0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// goroutine with scheduling stack&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gsignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// signal-handling G&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;curg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// current running goroutine&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mallocing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;throwing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;locks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nomemprof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;waitnextg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;profilehz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;helpgc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fastrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uint64&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ncgocall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of cgo calls in total&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;havenextg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nextg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;alllink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// on allm&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;schedlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MCache&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;lockedg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;idleg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createstack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Stack that created this thread.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nextwaitm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// next M waiting for lock&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;waitsema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// semaphore for parking on locks&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;waitsemacount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;waitsemalock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GCStats&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gcstats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;racecall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;racepc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;settype_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;settype_bufsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;uintptr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This was a source of endless confusion at the beginning. It does have some hints reassuring the fact that G’s are indeed goroutines, but nothing that really helps to describe what an M is.
It’s structure is identical to that of the G however, which means that it might have something to do with a thread. And indeed it is. Further study of the source code
made me speculate that &lt;strong&gt;M’s must be the real operating system scheduled (kernel) threads, while G’s (goroutines) must be the lightweight threads managed by the go runtime.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was more than happy to find comments that reassured that position of mine.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// The go scheduler&apos;s job is to match ready-to-run goroutines (`g&apos;s)
// with waiting-for-work schedulers (`m&apos;s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another cool finding was the go (runtime) scheduler - from which the above comment originates:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sched&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gfree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// available g&apos;s (status == Gdead)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goidgen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ghead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// g&apos;s waiting to run&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gtail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of g&apos;s waiting to run&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of g&apos;s that are alive&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grunning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of g&apos;s running on cpu or in syscall&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mhead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// m&apos;s waiting for work&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of m&apos;s waiting for work&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// number of m&apos;s that have been created&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// atomic scheduling word (see below)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profilehz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// cpu profiling rate&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// running initialization&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockmain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// init called runtime.LockOSThread&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;stopped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// one g can set waitstop and wait here for m&apos;s to stop&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From that particular piece of code, without a doubt the most interesting line is: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G *gfree&lt;/code&gt;. That is a pool of the go routines that are available to be used.
There are also helper schedulling functions, from which, the most interesting (for my purposes), was the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static void gfput(G*);&lt;/code&gt; which realeases a go routine (puts it to the gfree list)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Put on gfree list.  Sched must be locked.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;gfput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;gp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedlink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gfree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;runtime_sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gfree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are loads of other extremely interesting functions there, but for the sake of space I will not expand here more. However I will expand on what it is that is confusing me:&lt;/p&gt;

&lt;h2&gt;The source of confusion&lt;/h2&gt;

&lt;p&gt;My tests in this point are to include testing if removing thread destruction from the go runtime would result in difference in behavior.
There are however (as far as go is concerned), two kinds of threads in the go runtime. &lt;strong&gt;Goroutines&lt;/strong&gt; (G’s) and the &lt;strong&gt;kernel schedulable threads&lt;/strong&gt; (M’s).&lt;/p&gt;

&lt;p&gt;Neither of which, seem to really be destroyed. From my understanding so far, G’s are never totally destroyed (I may be wrong here, I am still researching this bit). Whenever
they are about to “destroyed”, they are added to the scheduler’s list of freeG’s to allow for reuse, as evidenced by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gfput&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gfget&lt;/code&gt; functions. 
M’s on the other hand (the kernel threads), also seem to not be destroyed. A comment in go’s scheduler seems to support this (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;// For now, m&apos;s never go away.&lt;/code&gt;) and as a 
matter of fact I could not find any code that destroyed M’s (I am still researching this bit).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Since none of the two actually get destroyed, and seeing as thread creation alone should not be buggy, how come we are facing the specific bugs we are facing?&lt;/strong&gt;
I will try to provide with an interpretation: Either I am fairly wrong and M’s (or G’s or both) actually do get destroyed somewhere (possible and very much probable)
or I looking for clues regarding the issue in the wrong place (might be possible but I don’t see it being very probable).&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      
        <category term="gsoc" />
      
        <category term="golang" />
      
        <category term="gcc" />
      

      

      
        <summary type="html">An exciting week. This week was exciting. Spending it on learning about the go runtime was the reason for this. As insightfull as it was however, it also confused me a little bit. Before this goes any further, I should state that this is a partial report on my research and my findings. My aims for this week were the following: To investigate the behavior of go programs under the Hurd, to study the go runtime, and possibly modify it to see if the goroutine issues are libpthread’s issue or the go’s runtime issue. Presenting my findings. Most of my time was spent studying the gcc go frontend, libgo and the go runtime. Fortunatelly, I can say (gladly) that it was time well spent. What I got from it were some nice pieces of insight, but also some slight confusion and doubts. The first interesting thing in my findings was this: struct G { Defer* defer; Panic* panic; void* exception; // current exception being thrown bool is_foreign; // whether current exception from other language void *gcstack; // if status==Gsyscall, gcstack = stackbase to use during gc uintptr gcstack_size; void* gcnext_segment; void* gcnext_sp; void* gcinitial_sp; ucontext_t gcregs; byte* entry; // initial function G* alllink; // on allg void* param; // passed parameter on wakeup bool fromgogo; // reached from gogo int16 status; int64 goid; uint32 selgen; // valid sudog pointer const char* waitreason; // if status==Gwaiting G* schedlink; bool readyonstop; bool ispanic; bool issystem; int8 raceignore; // ignore race detection events M* m; // for debuggers, but offset not hard-coded M* lockedm; M* idlem; int32 sig; int32 writenbuf; byte* writebuf; // DeferChunk *dchunk; // DeferChunk *dchunknext; uintptr sigcode0; uintptr sigcode1; // uintptr sigpc; uintptr gopc; // pc of go statement that created this goroutine int32 ncgo; CgoMal* cgomal; Traceback* traceback; ucontext_t context; void* stack_context[10]; }; Yep. This is the code that resembles a (yeah, you guessed it, a goroutine). I was pretty surprised at first to see that a thread is resembled as a struct. But then again, taking a closer look at it, it makes perfect sense. The next one though was a lot trickier: struct M { G* g0; // goroutine with scheduling stack G* gsignal; // signal-handling G G* curg; // current running goroutine int32 id; int32 mallocing; int32 throwing; int32 gcing; int32 locks; int32 nomemprof; int32 waitnextg; int32 dying; int32 profilehz; int32 helpgc; uint32 fastrand; uint64 ncgocall; // number of cgo calls in total Note havenextg; G* nextg; M* alllink; // on allm M* schedlink; MCache *mcache; G* lockedg; G* idleg; Location createstack[32]; // Stack that created this thread. M* nextwaitm; // next M waiting for lock uintptr waitsema; // semaphore for parking on locks uint32 waitsemacount; uint32 waitsemalock; GCStats gcstats; bool racecall; void* racepc; uintptr settype_buf[1024]; uintptr settype_bufsize; uintptr end[]; }; This was a source of endless confusion at the beginning. It does have some hints reassuring the fact that G’s are indeed goroutines, but nothing that really helps to describe what an M is. It’s structure is identical to that of the G however, which means that it might have something to do with a thread. And indeed it is. Further study of the source code made me speculate that M’s must be the real operating system scheduled (kernel) threads, while G’s (goroutines) must be the lightweight threads managed by the go runtime. I was more than happy to find comments that reassured that position of mine. // The go scheduler&apos;s job is to match ready-to-run goroutines (`g&apos;s) // with waiting-for-work schedulers (`m&apos;s) Another cool finding was the go (runtime) scheduler - from which the above comment originates: struct Sched { Lock; G *gfree; // available g&apos;s (status == Gdead) int64 goidgen; G *ghead; // g&apos;s waiting to run G *gtail; int32 gwait; // number of g&apos;s waiting to run int32 gcount; // number of g&apos;s that are alive int32 grunning; // number of g&apos;s running on cpu or in syscall M *mhead; // m&apos;s waiting for work int32 mwait; // number of m&apos;s waiting for work int32 mcount; // number of m&apos;s that have been created volatile uint32 atomic; // atomic scheduling word (see below) int32 profilehz; // cpu profiling rate bool init; // running initialization bool lockmain; // init called runtime.LockOSThread Note stopped; // one g can set waitstop and wait here for m&apos;s to stop }; From that particular piece of code, without a doubt the most interesting line is: G *gfree. That is a pool of the go routines that are available to be used. There are also helper schedulling functions, from which, the most interesting (for my purposes), was the static void gfput(G*); which realeases a go routine (puts it to the gfree list) // Put on gfree list. Sched must be locked. static void gfput(G *gp) { gp-&amp;gt;schedlink = runtime_sched.gfree; runtime_sched.gfree = gp; } There are loads of other extremely interesting functions there, but for the sake of space I will not expand here more. However I will expand on what it is that is confusing me: The source of confusion My tests in this point are to include testing if removing thread destruction from the go runtime would result in difference in behavior. There are however (as far as go is concerned), two kinds of threads in the go runtime. Goroutines (G’s) and the kernel schedulable threads (M’s). Neither of which, seem to really be destroyed. From my understanding so far, G’s are never totally destroyed (I may be wrong here, I am still researching this bit). Whenever they are about to “destroyed”, they are added to the scheduler’s list of freeG’s to allow for reuse, as evidenced by the gfput and gfget functions. M’s on the other hand (the kernel threads), also seem to not be destroyed. A comment in go’s scheduler seems to support this (// For now, m&apos;s never go away.) and as a matter of fact I could not find any code that destroyed M’s (I am still researching this bit). Since none of the two actually get destroyed, and seeing as thread creation alone should not be buggy, how come we are facing the specific bugs we are facing? I will try to provide with an interpretation: Either I am fairly wrong and M’s (or G’s or both) actually do get destroyed somewhere (possible and very much probable) or I looking for clues regarding the issue in the wrong place (might be possible but I don’t see it being very probable).</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">GSOC: Week 6 report</title>
      
      
      <link href="https://nlightnfotis.github.io/2013/07/31/gsoc-week-6-report/" rel="alternate" type="text/html" title="GSOC: Week 6 report" />
      
      <published>2013-07-31T12:36:00+00:00</published>
      <updated>2013-07-31T12:36:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2013/07/31/gsoc-week-6-report</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2013/07/31/gsoc-week-6-report/">&lt;p&gt;First of all, I would like to apologize for this report being late. But unfortunately this happened:
&lt;img src=&quot;http://i1.kym-cdn.com/photos/images/original/000/000/376/Accidentally93mb20110724-22047-ix1t06.png&quot; alt=&quot;I Accidentally 93 MB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Only that, in my case, it was not exactly 93 MB, rather it was about 1.5GB. Yeah, &lt;em&gt;I accidentally obliterated my &lt;strong&gt;GCC&lt;/strong&gt; repository on the Hurd&lt;/em&gt;, so I had to reclone and rebuild everything, something that took considerable amounts of time. 
How this happened is a long story that involved me wanting to rebuild my gcc, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt;-ing 2 directories above the build folder, and ending up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -rf *&lt;/code&gt; from my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt; folder (that included the source, and the build folder) rather than my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc_build&lt;/code&gt; folder. 
Thank god, that was only a minor setback, and the (small scale) crisis was soon averted.&lt;/p&gt;

&lt;h1&gt;Further research&lt;/h1&gt;

&lt;p&gt;This week was mostly spent reading source code, primarily looking for clues for the previous situation, and secondarily to get a better undestanding of the systems I am working on. This proved to be fertile, as I got a firmer grip of libpthread, and the GNU Mach system. However, while this week was mostly spent reading documentation, that doesn’t mean that I didn’t do anything practical. I also used my time to do some further research into what was it specifically that triggered the assertion failure. That required us to play a little bit with our newly built compiler on the Hurd and see what we can do with go on the Hurd.&lt;/p&gt;

&lt;h2&gt;Testing gccgo under the Hurd&lt;/h2&gt;

&lt;p&gt;If you recall correctly, the last time I reported I had found out that an assertion on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpthread&lt;/code&gt;`s code was failing, and that was the root cause that failed both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gccgo&lt;/code&gt; tests
and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libgo&lt;/code&gt; tests. That assertion was failing at two different places in the code, the first being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__pthread_create_internal&lt;/code&gt; which is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpthread&lt;/code&gt; function 
located in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpthread/pthread/pt-create.c&lt;/code&gt; and is invoked when an application wants to create a new POSIX thread. That function of course is not getting called directly, rather
it is invoked by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pthread_create&lt;/code&gt; which is the function that user space application use to create the new thread. (For reference reasons you can find the code &lt;a href=&quot;https://github.com/NlightNFotis/libpthread/blob/master/pthread/pt-create.c#L67&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The second place where that assertion was failing was at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__sem_timedwait_internal&lt;/code&gt; at the file &lt;a href=&quot;https://github.com/NlightNFotis/libpthread/blob/master/sysdeps/generic/sem-timedwait.c&quot;&gt;libpthread/sysdeps/generic/sem-timedwait.c&lt;/a&gt;, where it gets inlined in the place of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self = _pthread_self ();&lt;/code&gt;. (For more information, checkout last week’s report).&lt;/p&gt;

&lt;p&gt;So I was curious to test out the execution of some sample programs under the compiler we built on the Hurd. &lt;strong&gt;Beginning with some very simple hello world like programs, we could see that
they were compiling successfully, and also ran successfully without any issues at all.&lt;/strong&gt; Seeing as the assertion failure is generated when we attempt to create a new thread, I figured I might want to start playing with go routines under the Hurd.&lt;/p&gt;

&lt;p&gt;So we started playing with a simple hello world like goroutine example (the one available under the &lt;a href=&quot;http://tour.golang.org/#62&quot;&gt;tour of go on the golang.org website.&lt;/a&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Millisecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This gets compiled without any issues at all, but when we try to run it…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sysdeps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timedwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sem_timedwait_internal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Assertion&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ktid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__mach_thread_self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ktid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__mach_port_deallocate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__mach_task_self_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ktid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Aborted&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;goroutine&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcc_source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libgo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;goroutine&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcc_source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libgo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bam! It exploded right infront of our face. Let’s see if this might become friendlier if we alter it a little bit. To do this we removed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;say&lt;/code&gt; to avoid running it as a goroutine, and we also removed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time.Sleep&lt;/code&gt; (along with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time&lt;/code&gt; import), &lt;a href=&quot;https://github.com/NlightNFotis/gcc/blob/master/libgo/go/time/sleep.go#L8&quot;&gt;whose job is to pause a go routine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you do this, the code seems to be a hello world like for loop sample, that prints:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
world
world
world
world
world
hello
hello
hello
hello
hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmm. Let’s play with it some more. Changing our code a little bit to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;say(&quot;world&quot;)&lt;/code&gt; run as a goroutine gives us the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Which, when executed results in this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@debian:~/Software/Experiments/go# ./a.out
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid;
__mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed.
Aborted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we can see that the simplest go programs that run with goroutines do not run. Let’s still try some programs that invoke goroutines to see if our assumptions are correct.
Below is the code of a very simple web server in go (&lt;a href=&quot;http://tour.golang.org/#56&quot;&gt;found in the golang website&lt;/a&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost:4000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The (non surprising) result is the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
Aborted

goroutine 1 [syscall]:
no stack trace available
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmm. This failure was last caused by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time.Sleep&lt;/code&gt;. So let’s take a closer look into the code of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ListenAndServe&lt;/code&gt; function. The code for this function in the go runtime is this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ListenAndServe listens on the TCP network address srv.Addr and then&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// calls Serve to handle requests on incoming connections.  If&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// srv.Addr is blank, &quot;:http&quot; is used.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Addr&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:http&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tcp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This calls the function &lt;a href=&quot;https://github.com/NlightNFotis/gcc/blob/master/libgo/go/net/http/server.go#L1255&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serve&lt;/code&gt;&lt;/a&gt;. The interesting part in this one is line 1271:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
 time.Sleep(tempDelay)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time.Sleep&lt;/code&gt; on accept failure. Which is known to pause go routines, and as a result be the ultimate cause for the result we are seeing.&lt;/p&gt;

&lt;h1&gt;Final thoughts - Work for next week&lt;/h1&gt;

&lt;p&gt;So pretty much everything that has anything to do with a goroutine is failing. Richard Braun on the #hurd suggested that since &lt;strong&gt;creation and destruction&lt;/strong&gt; of threads is buggy in libpthread, maybe we should try a work around until a proper fix is in place. 
Apart from that my mentor Thomas Schwinge suggested to make thread destruction in go’s runtime a no-op to see if that makes any difference. 
If it does that should mean that there is nothing wrong in the go runtime itself, rather, the offending code is in libpthread. This is also my very next course of action, which I shall report on very soon.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="gsoc" />
      
        <category term="gcc" />
      
        <category term="golang" />
      

      
        <summary type="html">First of all, I would like to apologize for this report being late. But unfortunately this happened: Only that, in my case, it was not exactly 93 MB, rather it was about 1.5GB. Yeah, I accidentally obliterated my GCC repository on the Hurd, so I had to reclone and rebuild everything, something that took considerable amounts of time. How this happened is a long story that involved me wanting to rebuild my gcc, and cd-ing 2 directories above the build folder, and ending up rm -rf * from my gcc folder (that included the source, and the build folder) rather than my gcc_build folder. Thank god, that was only a minor setback, and the (small scale) crisis was soon averted. Further research This week was mostly spent reading source code, primarily looking for clues for the previous situation, and secondarily to get a better undestanding of the systems I am working on. This proved to be fertile, as I got a firmer grip of libpthread, and the GNU Mach system. However, while this week was mostly spent reading documentation, that doesn’t mean that I didn’t do anything practical. I also used my time to do some further research into what was it specifically that triggered the assertion failure. That required us to play a little bit with our newly built compiler on the Hurd and see what we can do with go on the Hurd. Testing gccgo under the Hurd If you recall correctly, the last time I reported I had found out that an assertion on libpthread`s code was failing, and that was the root cause that failed both the gccgo tests and the libgo tests. That assertion was failing at two different places in the code, the first being __pthread_create_internal which is a libpthread function located in libpthread/pthread/pt-create.c and is invoked when an application wants to create a new POSIX thread. That function of course is not getting called directly, rather it is invoked by pthread_create which is the function that user space application use to create the new thread. (For reference reasons you can find the code here) The second place where that assertion was failing was at __sem_timedwait_internal at the file libpthread/sysdeps/generic/sem-timedwait.c, where it gets inlined in the place of self = _pthread_self ();. (For more information, checkout last week’s report). So I was curious to test out the execution of some sample programs under the compiler we built on the Hurd. Beginning with some very simple hello world like programs, we could see that they were compiling successfully, and also ran successfully without any issues at all. Seeing as the assertion failure is generated when we attempt to create a new thread, I figured I might want to start playing with go routines under the Hurd. So we started playing with a simple hello world like goroutine example (the one available under the tour of go on the golang.org website.) package main import ( &quot;fmt&quot; &quot;time&quot; ) func say(s string) { for i := 0; i &amp;lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(&quot;world&quot;) say(&quot;hello&quot;) } This gets compiled without any issues at all, but when we try to run it… a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. Aborted goroutine 1 [sleep]: time.Sleep ../../../gcc_source/libgo/runtime/time.goc:26 goroutine 3 [sleep]: time.Sleep ../../../gcc_source/libgo/runtime/time.goc:26 Bam! It exploded right infront of our face. Let’s see if this might become friendlier if we alter it a little bit. To do this we removed the go from say to avoid running it as a goroutine, and we also removed time.Sleep (along with the time import), whose job is to pause a go routine. When you do this, the code seems to be a hello world like for loop sample, that prints: root@debian:~/Software/Experiments/go# ./a.out world world world world world hello hello hello hello hello Hmm. Let’s play with it some more. Changing our code a little bit to make say(&quot;world&quot;) run as a goroutine gives us the following code: package main import &quot;fmt&quot; func say(s string) { for i := 0; i &amp;lt; 5; i++ { fmt.Println(s) } } func main() { go say(&quot;world&quot;) say(&quot;hello&quot;) } Which, when executed results in this: root@debian:~/Software/Experiments/go# ./a.out a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self + 0), ktid); ok; })&apos; failed. Aborted So we can see that the simplest go programs that run with goroutines do not run. Let’s still try some programs that invoke goroutines to see if our assumptions are correct. Below is the code of a very simple web server in go (found in the golang website). package main import ( &quot;fmt&quot; &quot;net/http&quot; ) type Hello struct{} func (h Hello) ServeHTTP( w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, &quot;Hello!&quot;) } func main() { var h Hello http.ListenAndServe(&quot;localhost:4000&quot;, h) } The (non surprising) result is the following: a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. Aborted goroutine 1 [syscall]: no stack trace available Hmm. This failure was last caused by time.Sleep. So let’s take a closer look into the code of the ListenAndServe function. The code for this function in the go runtime is this: // ListenAndServe listens on the TCP network address srv.Addr and then // calls Serve to handle requests on incoming connections. If // srv.Addr is blank, &quot;:http&quot; is used. func (srv *Server) ListenAndServe() error { addr := srv.Addr if addr == &quot;&quot; { addr = &quot;:http&quot; } l, e := net.Listen(&quot;tcp&quot;, addr) if e != nil { return e } return srv.Serve(l) } This calls the function Serve. The interesting part in this one is line 1271: time.Sleep(tempDelay) It calls time.Sleep on accept failure. Which is known to pause go routines, and as a result be the ultimate cause for the result we are seeing. Final thoughts - Work for next week So pretty much everything that has anything to do with a goroutine is failing. Richard Braun on the #hurd suggested that since creation and destruction of threads is buggy in libpthread, maybe we should try a work around until a proper fix is in place. Apart from that my mentor Thomas Schwinge suggested to make thread destruction in go’s runtime a no-op to see if that makes any difference. If it does that should mean that there is nothing wrong in the go runtime itself, rather, the offending code is in libpthread. This is also my very next course of action, which I shall report on very soon.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">GSOC: Week 5 report</title>
      
      
      <link href="https://nlightnfotis.github.io/2013/07/24/gsoc-week-5-report/" rel="alternate" type="text/html" title="GSOC: Week 5 report" />
      
      <published>2013-07-24T12:36:00+00:00</published>
      <updated>2013-07-24T12:36:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2013/07/24/gsoc-week-5-report</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2013/07/24/gsoc-week-5-report/">&lt;h1&gt;A clue!&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;So last week we were left with the compiler test logs and the build results logs that we had to go through to checkout what was the root cause of all these failures in the gccgo test results, and more importantly in the libgo tests.&lt;/strong&gt; So I went through the gccgo logs in search for a clue about why this may have happened. Here is the list of all the failures I compiled from the logs:&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
spawn [open ...]^M
doubleselect.x: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_s      elf_ + 0), ktid); ok; })&apos; failed.
FAIL: go.test/test/chan/doubleselect.go execution,  -O2 -g

==========================================================

spawn [open ...]^M
nonblock.x: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_       + 0), ktid); ok; })&apos; failed.
FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g

==========================================================

Executing on host: /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../  -fno-diagnostics-show-caret -fdiagnostics-color=never  -I/root/gcc_new/gccbuild/i68      6-unknown-gnu0.3/./libgo  -fsplit-stack -c  -o split_stack376.o split_stack376.c    (timeout = 300)
spawn /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ -fno-diagnostics-show-caret -fdiagnostics-color=never -I/root/gcc_new/gccbuild/i686-unknown-gnu0.      3/./libgo -fsplit-stack -c -o split_stack376.o split_stack376.c^M
cc1: error: &apos;-fsplit-stack&apos; currently only supported on GNU/Linux^M
cc1: error: &apos;-fsplit-stack&apos; is not supported by this compiler configuration^M
compiler exited with status 1
output is:
 cc1: error: &apos;-fsplit-stack&apos; currently only supported on GNU/Linux^M
 cc1: error: &apos;-fsplit-stack&apos; is not supported by this compiler configuration^M 

UNTESTED: go.test/test/chan/select2.go

==========================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
select3.x: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate       ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
Aborted
 
FAIL: go.test/test/chan/select3.go execution,  -O2 -g

==========================================================

Executing on host: /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ /root/gcc_new/gcc/gcc/testsuite/go.test/test/chan/select5.go  -fno-diagnostics-show-      caret -fdiagnostics-color=never  -I/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo  -O  -w  -pedantic-errors  -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -L/root/gcc_new/gccbuild/i686-unknown-      gnu0.3/./libgo/.libs  -lm   -o select5.exe    (timeout = 300)
spawn /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ /root/gcc_new/gcc/gcc/testsuite/go.test/test/chan/select5.go -fno-diagnostics-show-caret -fdiagno      stics-color=never -I/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -O -w -pedantic-errors -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.lib      s -lm -o select5.exe^M
PASS: go.test/test/chan/select5.go -O (test for excess errors)
FAIL: go.test/test/chan/select5.go execution

==========================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
bug147.x: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate       ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
Aborted
 
FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g

=========================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
BUG: bug347: cannot find caller
Aborted
 
 
FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g

========================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
BUG: bug348: cannot find caller
panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x2 addr=0x0]
 
goroutine 1 [running]:
FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g

========================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
mallocfin.x: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self      _ + 0), ktid); ok; })&apos; failed.
FAIL: go.test/test/mallocfin.go execution,  -O2 -g

=======================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
Aborted
 
 
FAIL: go.test/test/nil.go execution,  -O2 -g

======================================================

Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root      /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild      /./prev-mpc/.libs
spawn [open ...]^M
Aborted
 
 
FAIL: go.test/test/recover3.go execution,  -O2 -g

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;See a pattern there?&lt;/em&gt; Well certainly I do. In several occasions, the root cause for the fail is this:&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate       ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmm… That’s interesting. Let us go through the libgo results too.&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Test Run By root on Fri Jul 12 17:56:44 UTC 2013
Native configuration is i686-unknown-gnu0.3

		=== libgo tests ===

a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 10005 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: bufio
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10005) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 10637 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: bytes
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10637) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 10757 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: errors
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10757) - No such process
a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
Aborted


goroutine 1 [syscall]:
no stack trace available
FAIL: expvar
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (10886) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11058 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: flag
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11058) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11475 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: fmt
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11475) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11584 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: html
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11584) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11747 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: image
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11747) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 11999 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: io
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (11999) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 12116 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: log
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (12116) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 13107 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: math
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (13107) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 13271 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: mime
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (13271) - No such process
a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
Aborted


goroutine 1 [chan receive]:
a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
panic during panic
testing.RunTestsFAIL: net
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (14234) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 14699 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: os
timed out in gotest
../../../gcc/libgo/testsuite/gotest: line 484: kill: (14699) - No such process
a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed.
../../../gcc/libgo/testsuite/gotest: line 486: 14860 Aborted                 ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot;
FAIL: path
timed out in gotest

...


runtest completed at Fri Jul 12 18:09:07 UTC 2013
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s certainly even more interesting. In case you haven’t noticed, it’s the same assertion that caused the failures in gccgo test suite. Let us find the offending code, shall we?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Set the new thread&apos;s signal mask and set the pending signals to
     empty.  POSIX says: &quot;The signal mask shall be inherited from the
     creating thread.  The set of signals pending for the new thread
     shall be empty.&quot;  If the currnet thread is not a pthread then we
     just inherit the process&apos; sigmask.  */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__pthread_num_threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigprocmask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__pthread_sigstate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pthread_self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_perror&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This seems to be the code that the logs point to. But no sign of the assertion. After discussing this issue with my peers in #hurd, I was told that the code I was looking for (the failing assertion), is getting inlined via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pthread_self ()&lt;/code&gt; and is actually located in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpthread/sysdeps/mach/hurd/pt-sysdep.h&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__thread&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__pthread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___pthread_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define _pthread_self()                                            \
	({                                                         \
	  struct __pthread *thread;                                \
	                                                           \
	  assert (__pthread_threads);                              \
	  thread = ___pthread_self;                                \
	                                                           \
	  assert (thread);                                         \
	  assert (({ mach_port_t ktid = __mach_thread_self ();     \
                     int ok = thread-&amp;gt;kernel_thread == ktid;       \
                     __mach_port_deallocate (__mach_task_self (), ktid);\
                     ok; }));                                      \
          thread;                                                  \
         })&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So this is what I was looking for. Further discussing it in the weekly IRC meeting, braunr provided me with some more clues:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;08:38:15 braunr&amp;gt; nlightnfotis: did i answer that ?&lt;br /&gt;
08:38:24 nlightnfotis&amp;gt; braunr: which one?&lt;br /&gt;
08:38:30 nlightnfotis&amp;gt; hello btw :)&lt;br /&gt;
08:38:33 braunr&amp;gt; the problems you’re seeing are the pthread resources leaks i’ve been trying to fix lately&lt;br /&gt;
08:38:58 braunr&amp;gt; they’re not only leaks&lt;br /&gt;
08:39:08 braunr&amp;gt; creation and destruction are buggy &lt;br /&gt;
08:39:37 nlightnfotis&amp;gt; I have read so in http://www.gnu.org/software/hurd/libpthread.html. I believe it’s under Thread’s Death right?&lt;br /&gt;
08:40:15 braunr&amp;gt; nlightnfotis: yes but it’s buggy&lt;br /&gt;
08:40:22 braunr&amp;gt; and the description doesn’t describe the bugs&lt;br /&gt;
08:41:02 nlightnfotis&amp;gt; so we will either have to find a temporary workaround, or better yet work on a fix, right?&lt;br /&gt;
08:41:12 braunr&amp;gt; nlightnfotis: i also told you the work around&lt;br /&gt;
08:41:16 braunr&amp;gt; nlightnfotis: create a thread pool&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;Work for next week&lt;/h1&gt;

&lt;p&gt;This leaves us with next week’s work, which is to hack in libpthread’s code to attempt to create a thread pool, so that we avoid some of the issues that are present now with the current implementation of the Hurd libpthread code.&lt;/p&gt;

&lt;p&gt;It was also suggested by Samuel Thibault (youpi) that I should run the libgo tests by hand and see if I get some more clues, like stack traces. It sounds like a good idea to me, so that’s something that I will look into too.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="gsoc" />
      
        <category term="gcc" />
      
        <category term="golang" />
      

      
        <summary type="html">A clue! So last week we were left with the compiler test logs and the build results logs that we had to go through to checkout what was the root cause of all these failures in the gccgo test results, and more importantly in the libgo tests. So I went through the gccgo logs in search for a clue about why this may have happened. Here is the list of all the failures I compiled from the logs: spawn [open ...]^M doubleselect.x: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_s elf_ + 0), ktid); ok; })&apos; failed. FAIL: go.test/test/chan/doubleselect.go execution, -O2 -g ========================================================== spawn [open ...]^M nonblock.x: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. FAIL: go.test/test/chan/nonblock.go execution, -O2 -g ========================================================== Executing on host: /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ -fno-diagnostics-show-caret -fdiagnostics-color=never -I/root/gcc_new/gccbuild/i68 6-unknown-gnu0.3/./libgo -fsplit-stack -c -o split_stack376.o split_stack376.c (timeout = 300) spawn /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ -fno-diagnostics-show-caret -fdiagnostics-color=never -I/root/gcc_new/gccbuild/i686-unknown-gnu0. 3/./libgo -fsplit-stack -c -o split_stack376.o split_stack376.c^M cc1: error: &apos;-fsplit-stack&apos; currently only supported on GNU/Linux^M cc1: error: &apos;-fsplit-stack&apos; is not supported by this compiler configuration^M compiler exited with status 1 output is: cc1: error: &apos;-fsplit-stack&apos; currently only supported on GNU/Linux^M cc1: error: &apos;-fsplit-stack&apos; is not supported by this compiler configuration^M UNTESTED: go.test/test/chan/select2.go ========================================================== Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild /./prev-mpc/.libs spawn [open ...]^M select3.x: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. Aborted FAIL: go.test/test/chan/select3.go execution, -O2 -g ========================================================== Executing on host: /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ /root/gcc_new/gcc/gcc/testsuite/go.test/test/chan/select5.go -fno-diagnostics-show- caret -fdiagnostics-color=never -I/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -O -w -pedantic-errors -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -L/root/gcc_new/gccbuild/i686-unknown- gnu0.3/./libgo/.libs -lm -o select5.exe (timeout = 300) spawn /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo -B/root/gcc_new/gccbuild/gcc/testsuite/go/../../ /root/gcc_new/gcc/gcc/testsuite/go.test/test/chan/select5.go -fno-diagnostics-show-caret -fdiagno stics-color=never -I/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -O -w -pedantic-errors -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo -L/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.lib s -lm -o select5.exe^M PASS: go.test/test/chan/select5.go -O (test for excess errors) FAIL: go.test/test/chan/select5.go execution ========================================================== Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild /./prev-mpc/.libs spawn [open ...]^M bug147.x: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. Aborted FAIL: go.test/test/fixedbugs/bug147.go execution, -O2 -g ========================================================= Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild /./prev-mpc/.libs spawn [open ...]^M BUG: bug347: cannot find caller Aborted FAIL: go.test/test/fixedbugs/bug347.go execution, -O0 -g ======================================================== Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild /./prev-mpc/.libs spawn [open ...]^M BUG: bug348: cannot find caller panic: runtime error: invalid memory address or nil pointer dereference [signal 0xb code=0x2 addr=0x0] goroutine 1 [running]: FAIL: go.test/test/fixedbugs/bug348.go execution, -O0 -g ======================================================== Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild /./prev-mpc/.libs spawn [open ...]^M mallocfin.x: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self _ + 0), ktid); ok; })&apos; failed. FAIL: go.test/test/mallocfin.go execution, -O2 -g ======================================================= Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild /./prev-mpc/.libs spawn [open ...]^M Aborted FAIL: go.test/test/nil.go execution, -O2 -g ====================================================== Setting LD_LIBRARY_PATH to .:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:.:/root/gcc_new/gccbuild/i686-unknown-gnu0.3/./libgo/.libs:/root/gcc_new/gccbuild/gcc:/root /gcc_new/gccbuild/./gmp/.libs:/root/gcc_new/gccbuild/./prev-gmp/.libs:/root/gcc_new/gccbuild/./mpfr/.libs:/root/gcc_new/gccbuild/./prev-mpfr/.libs:/root/gcc_new/gccbuild/./mpc/.libs:/root/gcc_new/gccbuild /./prev-mpc/.libs spawn [open ...]^M Aborted FAIL: go.test/test/recover3.go execution, -O2 -g See a pattern there? Well certainly I do. In several occasions, the root cause for the fail is this: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. Hmm… That’s interesting. Let us go through the libgo results too. Test Run By root on Fri Jul 12 17:56:44 UTC 2013 Native configuration is i686-unknown-gnu0.3 === libgo tests === a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 10005 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: bufio timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (10005) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 10637 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: bytes timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (10637) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 10757 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: errors timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (10757) - No such process a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. Aborted goroutine 1 [syscall]: no stack trace available FAIL: expvar timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (10886) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 11058 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: flag timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (11058) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 11475 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: fmt timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (11475) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 11584 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: html timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (11584) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 11747 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: image timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (11747) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 11999 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: io timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (11999) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 12116 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: log timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (12116) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 13107 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: math timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (13107) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 13271 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: mime timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (13271) - No such process a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. Aborted goroutine 1 [chan receive]: a.out: ./pthread/../sysdeps/generic/sem-timedwait.c:50: __sem_timedwait_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. panic during panic testing.RunTestsFAIL: net timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (14234) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 14699 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: os timed out in gotest ../../../gcc/libgo/testsuite/gotest: line 484: kill: (14699) - No such process a.out: ./pthread/pt-create.c:167: __pthread_create_internal: Assertion `({ mach_port_t ktid = __mach_thread_self (); int ok = thread-&amp;gt;kernel_thread == ktid; __mach_port_deallocate ((__mach_task_self_ + 0), ktid); ok; })&apos; failed. ../../../gcc/libgo/testsuite/gotest: line 486: 14860 Aborted ./a.out -test.short -test.timeout=${timeout}s &quot;$@&quot; FAIL: path timed out in gotest ... runtest completed at Fri Jul 12 18:09:07 UTC 2013 That’s certainly even more interesting. In case you haven’t noticed, it’s the same assertion that caused the failures in gccgo test suite. Let us find the offending code, shall we? /* Set the new thread&apos;s signal mask and set the pending signals to empty. POSIX says: &quot;The signal mask shall be inherited from the creating thread. The set of signals pending for the new thread shall be empty.&quot; If the currnet thread is not a pthread then we just inherit the process&apos; sigmask. */ if (__pthread_num_threads == 1) err = sigprocmask (0, 0, &amp;amp;sigset); else err = __pthread_sigstate (_pthread_self (), 0, 0, &amp;amp;sigset, 0); assert_perror (err); This seems to be the code that the logs point to. But no sign of the assertion. After discussing this issue with my peers in #hurd, I was told that the code I was looking for (the failing assertion), is getting inlined via _pthread_self () and is actually located in libpthread/sysdeps/mach/hurd/pt-sysdep.h. extern __thread struct __pthread *___pthread_self; #define _pthread_self() \ ({ \ struct __pthread *thread; \ \ assert (__pthread_threads); \ thread = ___pthread_self; \ \ assert (thread); \ assert (({ mach_port_t ktid = __mach_thread_self (); \ int ok = thread-&amp;gt;kernel_thread == ktid; \ __mach_port_deallocate (__mach_task_self (), ktid);\ ok; })); \ thread; \ }) So this is what I was looking for. Further discussing it in the weekly IRC meeting, braunr provided me with some more clues: 08:38:15 braunr&amp;gt; nlightnfotis: did i answer that ? 08:38:24 nlightnfotis&amp;gt; braunr: which one? 08:38:30 nlightnfotis&amp;gt; hello btw :) 08:38:33 braunr&amp;gt; the problems you’re seeing are the pthread resources leaks i’ve been trying to fix lately 08:38:58 braunr&amp;gt; they’re not only leaks 08:39:08 braunr&amp;gt; creation and destruction are buggy 08:39:37 nlightnfotis&amp;gt; I have read so in http://www.gnu.org/software/hurd/libpthread.html. I believe it’s under Thread’s Death right? 08:40:15 braunr&amp;gt; nlightnfotis: yes but it’s buggy 08:40:22 braunr&amp;gt; and the description doesn’t describe the bugs 08:41:02 nlightnfotis&amp;gt; so we will either have to find a temporary workaround, or better yet work on a fix, right? 08:41:12 braunr&amp;gt; nlightnfotis: i also told you the work around 08:41:16 braunr&amp;gt; nlightnfotis: create a thread pool Work for next week This leaves us with next week’s work, which is to hack in libpthread’s code to attempt to create a thread pool, so that we avoid some of the issues that are present now with the current implementation of the Hurd libpthread code. It was also suggested by Samuel Thibault (youpi) that I should run the libgo tests by hand and see if I get some more clues, like stack traces. It sounds like a good idea to me, so that’s something that I will look into too.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">GSOC: Week 4 report</title>
      
      
      <link href="https://nlightnfotis.github.io/2013/07/15/gsoc-week-4-report/" rel="alternate" type="text/html" title="GSOC: Week 4 report" />
      
      <published>2013-07-15T11:43:00+00:00</published>
      <updated>2013-07-15T11:43:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2013/07/15/gsoc-week-4-report</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2013/07/15/gsoc-week-4-report/">&lt;h1&gt;Yeah baby! It builds!&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;The highlight of this week’s progress was managing to successfully build
gccgo under the Hurd.&lt;/strong&gt;
Not only did it compile successfully, it also run its tests, with the
results &lt;a href=&quot;http://lists.gnu.org/archive/html/bug-hurd/2013-06/msg00117.html&quot;&gt;matching the ones provided by my mentor Thomas Schwinge&lt;/a&gt;.
This was a checkpoint in my summer of code project. Successful building of
the compiler meant that I am (happily) in the position to carry on with the
next part (and the main one) of my project, that is, to make sure that
the &lt;strong&gt;go library (libgo) also passes all its tests 
and works without any major issues.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;So where are we now?&lt;/h1&gt;

&lt;h2&gt;gccgo&lt;/h2&gt;

&lt;p&gt;Compiling gccgo on the Hurd was big. But we also had to see how it 
compared to the build that was successful on Linux. The most effective
way to compare the two builds, is to check the test results of the two.&lt;/p&gt;

&lt;p&gt;Taking a look at the gccgo results on the Hurd, I was delighted to find 
that it passed most of its tests. There were few that were failing, but 
for the most part, it did well. Below are the test results of gccgo on the Hurd:&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     === go Summary ===

# of expected passes        5069
# of unexpected failures    11
# of expected failures      1
# of untested testcases     6
/root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo  version 4.9.0 20130606 (experimental) (GCC)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So it’s passing 99% of its tests. That’s cool. But it could help to take a look
at the tests that are failing, to get an idea of what the fails are, how critical they are, etc&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nlightnfotis@earth:~/HurdVM/HurdFiles$ grep -v ^PASS: &amp;lt; go.sum
Test Run By root on Thu Jul 11 10:33:34 2013
Native configuration is i686-unknown-gnu0.3

        === go tests ===

        Schedule of variations:
            unix

            Running target unix
            Running /root/gcc_new/gcc/gcc/testsuite/go.dg/dg.exp ...
            Running /root/gcc_new/gcc/gcc/testsuite/go.go-torture/execute/execute.exp ...
            Running /root/gcc_new/gcc/gcc/testsuite/go.test/go-test.exp ...
            FAIL: go.test/test/chan/doubleselect.go execution,  -O2 -g 
            FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g 
            UNTESTED: go.test/test/chan/select2.go
            FAIL: go.test/test/chan/select3.go execution,  -O2 -g 
            FAIL: go.test/test/chan/select5.go execution
            UNTESTED: go.test/test/closure.go
            FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g 
            FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g 
            FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g 
            XFAIL: bug429.go  -O2 -g  execution test
            FAIL: go.test/test/goprint.go execution
            UNTESTED: go.test/test/goprint.go compare
            UNTESTED: go.test/test/init1.go
            FAIL: go.test/test/mallocfin.go execution,  -O2 -g 
            FAIL: go.test/test/nil.go execution,  -O2 -g 
            FAIL: go.test/test/recover3.go execution,  -O2 -g 
            UNTESTED: go.test/test/rotate.go
            UNTESTED: go.test/test/stack.go

                    === go Summary ===

# of expected passes        5069
# of unexpected failures    11
# of expected failures      1
# of untested testcases     6
/root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo  version 4.9.0 20130606 (experimental) (GCC) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmm. So these are the failing tests. Before we go through them, it might be a good idea
to check the status of the gccgo tests on the Linux build too. Let’s see.&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nlightnfotis@earth:~$ grep -v ^PASS: &amp;lt; linux_go.sum 
Test Run By fotis on Mon Jul 15 10:28:38 2013
Native configuration is i686-pc-linux-gnu

        === go tests ===

        Schedule of variations:
            unix

            Running target unix
            Running /home/fotis/Software/gcc/gcc/testsuite/go.dg/dg.exp ...
            Running /home/fotis/Software/gcc/gcc/testsuite/go.go-torture/execute/execute.exp ...
            Running /home/fotis/Software/gcc/gcc/testsuite/go.test/go-test.exp ...
            UNTESTED: go.test/test/closure.go
            XFAIL: bug429.go  -O2 -g  execution test
            UNTESTED: go.test/test/init1.go
            UNTESTED: go.test/test/rotate.go

                    === go Summary ===

# of expected passes        5183
# of expected failures      1
# of untested testcases     3
/home/fotis/Software/gcc_build/gcc/testsuite/go/../../gccgo  version 4.9.0 20130702 (experimental) (GCC) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, it seems like there are less tests failing here. But wait a minute. Those tests that are failing.
They are the same as with the Hurd build. So I can assume that we are left with 4 less tests to check
regarding their failures (Go on Linux works without any issues,so I guess it would be safe to skip those tests at the moment).
That leaves us with these tests to check:&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FAIL: go.test/test/chan/doubleselect.go execution,  -O2 -g
FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g
UNTESTED: go.test/test/chan/select2.go
FAIL: go.test/test/chan/select3.go execution,  -O2 -g
FAIL: go.test/test/chan/select5.go execution
FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g
FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g
FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g
FAIL: go.test/test/goprint.go execution
UNTESTED: go.test/test/goprint.go compare
FAIL: go.test/test/mallocfin.go execution,  -O2 -g
FAIL: go.test/test/nil.go execution,  -O2 -g
FAIL: go.test/test/recover3.go execution,  -O2 -g
UNTESTED: go.test/test/stack.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Discussing this with my mentor &lt;a href=&quot;https://plus.google.com/101468009864620818344&quot;&gt;Thomas Schwinge&lt;/a&gt; in IRC (#hurd)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;tschwinge&gt; For now, please ignore any failing tests that have »select« in their name -- that is, do file them, but do not spend a lot of time figuring out what might be wrong there.
&lt;tschwinge&gt; The Hurd&apos;s select implementation is a bit of a beast, and I don&apos;t want you -- at this time -- spend a lot of time on that.  We already know there are some deficiencies, so we should postpone that to later.
&lt;/tschwinge&gt;&lt;/tschwinge&gt;
&lt;/blockquote&gt;

&lt;p&gt;So that leaves us with even less tests to check:&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FAIL: go.test/test/chan/nonblock.go execution,  -O2 -g
FAIL: go.test/test/fixedbugs/bug147.go execution,  -O2 -g
FAIL: go.test/test/fixedbugs/bug347.go execution,  -O0 -g
FAIL: go.test/test/fixedbugs/bug348.go execution,  -O0 -g
FAIL: go.test/test/goprint.go execution
UNTESTED: go.test/test/goprint.go compare
FAIL: go.test/test/mallocfin.go execution,  -O2 -g
FAIL: go.test/test/nil.go execution,  -O2 -g
FAIL: go.test/test/recover3.go execution,  -O2 -g
UNTESTED: go.test/test/stack.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice. &lt;strong&gt;This narrowed down the list of errors that I have to go through to make sure that gccgo
works as well on the Hurd as it does on Linux.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;libgo&lt;/h2&gt;

&lt;p&gt;So, we talked about gccgo, but what about the runtime libraries (libgo)? They are also getting 
tested when we run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make check-go&lt;/code&gt;and seeing as they are a vital part 
of enabling programs written on go to run on the Hurd, we ought
to take a look. (This was also the original goal of my project proposal).&lt;/p&gt;

&lt;p&gt;So let us see what we have at the libgo.sum:&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Test Run By root on Fri Jul 12 17:56:44 UTC 2013
Native configuration is i686-unknown-gnu0.3

        === libgo tests ===

        Schedule of variations:
            unix

            Running target unix
            Running ../../../gcc/libgo/libgo.exp ...
            FAIL: bufio
            FAIL: bytes
            FAIL: errors
            FAIL: expvar
            FAIL: flag
            FAIL: fmt
            FAIL: html
            FAIL: image
            FAIL: io
            FAIL: log
            FAIL: math
            FAIL: mime
            FAIL: net
            FAIL: os
            FAIL: path
            FAIL: reflect
            FAIL: regexp
            FAIL: runtime
            FAIL: sort
            FAIL: strconv
            FAIL: strings
            FAIL: sync
            FAIL: syscall
            FAIL: time
            FAIL: unicode
            FAIL: archive/tar
            FAIL: archive/zip
            FAIL: compress/bzip2
            FAIL: compress/flate
            FAIL: compress/gzip
            FAIL: compress/lzw
            FAIL: compress/zlib
            FAIL: container/heap
            FAIL: container/list
            FAIL: container/ring
            FAIL: crypto/aes
            FAIL: crypto/cipher
            FAIL: crypto/des
            FAIL: crypto/dsa
            FAIL: crypto/ecdsa
            FAIL: crypto/elliptic
            FAIL: crypto/hmac
            FAIL: crypto/md5
            FAIL: crypto/rand
            FAIL: crypto/rc4
            FAIL: crypto/rsa
            FAIL: crypto/sha1
            FAIL: crypto/sha256
            FAIL: crypto/sha512
            FAIL: crypto/subtle
            FAIL: crypto/tls
            FAIL: crypto/x509
            FAIL: database/sql
            FAIL: database/sql/driver
            FAIL: debug/dwarf
            FAIL: debug/elf
            FAIL: debug/macho
            FAIL: debug/pe
            FAIL: encoding/ascii85
            FAIL: encoding/asn1
            FAIL: encoding/base32
            FAIL: encoding/base64
            FAIL: encoding/binary
            FAIL: encoding/csv
            FAIL: encoding/gob
            FAIL: encoding/hex
            FAIL: encoding/json
            FAIL: encoding/pem
            PASS: encoding/xml
            FAIL: exp/cookiejar
            FAIL: exp/ebnf
            FAIL: exp/html
            FAIL: exp/html/atom
            FAIL: exp/locale/collate
            FAIL: exp/locale/collate/build
            FAIL: exp/norm
            FAIL: exp/proxy
            FAIL: exp/terminal
            FAIL: exp/utf8string
            FAIL: html/template
            FAIL: go/ast
            FAIL: go/doc
            FAIL: go/format
            FAIL: go/parser
            FAIL: go/printer
            FAIL: go/scanner
            FAIL: go/token
            FAIL: go/types
            FAIL: hash/adler32
            FAIL: hash/crc32
            FAIL: hash/crc64
            FAIL: hash/fnv
            FAIL: image/color
            FAIL: image/draw
            FAIL: image/jpeg
            FAIL: image/png
            FAIL: index/suffixarray
            FAIL: io/ioutil
            FAIL: log/syslog
            FAIL: math/big
            FAIL: math/cmplx
            FAIL: math/rand
            FAIL: mime/multipart
            FAIL: net/http
            FAIL: net/http/cgi
            FAIL: net/http/fcgi
            FAIL: net/http/httptest
            FAIL: net/http/httputil
            FAIL: net/mail
            FAIL: net/rpc
            FAIL: net/smtp
            FAIL: net/textproto
            FAIL: net/url
            FAIL: net/rpc/jsonrpc
            FAIL: old/netchan
            FAIL: old/regexp
            FAIL: old/template
            FAIL: os/exec
            FAIL: os/signal
            FAIL: os/user
            FAIL: path/filepath
            FAIL: regexp/syntax
            FAIL: runtime/pprof
            FAIL: sync/atomic
            FAIL: text/scanner
            FAIL: text/tabwriter
            FAIL: text/template
            FAIL: text/template/parse
            FAIL: testing/quick
            FAIL: unicode/utf16
            FAIL: unicode/utf8

                    === libgo Summary ===

# of expected passes        1
# of unexpected failures    130
/root/gcc_new/gccbuild/./gcc/gccgo version 4.9.0 20130606 (experimental) (GCC)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Oh boy!&lt;/strong&gt; Oh boy! Well, on second thoughts, this was not unexpected. 
&lt;strong&gt;This was the core of my GSOC work&lt;/strong&gt;. This is how it starts :)&lt;/p&gt;

&lt;p&gt;Before this goes any further, maybe we should visit the Linux test results too.&lt;/p&gt;

&lt;div lang=&quot;shell&quot; class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Test Run By fotis on Τρι 02 Ιούλ 2013 09:20:20 μμ EEST
Native configuration is i686-pc-linux-gnu

        === libgo tests ===

        Schedule of variations:
            unix

            Running target unix
            Running ../../../gcc/libgo/libgo.exp ...
            PASS: bufio
            PASS: bytes
            ...

                    === libgo Summary ===

# of expected passes        131
/home/fotis/Software/gcc_build/./gcc/gccgo version 4.9.0 20130702 (experimental) (GCC)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wow. Considering the results from the Hurd, they really are &lt;strong&gt;not&lt;/strong&gt; unexpected. &lt;a href=&quot;http://darnassus.sceen.net/~hurd-web/open_issues/gccgo/&quot;&gt;Remember
that &lt;strong&gt;getcontext, makecontext, setcontext and swapcontext&lt;/strong&gt; are not working as expected.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And recalling from an email from Ian Lance Taylor (the GCCgo maintainer, and a member of the Go team)
early in the summer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Go does require switching stacks.  A port of Go that doesn’t support
goroutines would be useless–nothing in the standard library would
work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;Conclusion / Work for next week.&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;So now it comes down to work on implementing correctly the context switching functions.&lt;/strong&gt; 
Apart from that, going through the test results that fail from gccgo is also something that
is to be done, however I am not sure that it should be a first priority. I also have to go
through go.log to see if there any clues as to why the gccgo tests fail.&lt;/p&gt;

&lt;p&gt;Having finally built gccgo on the Hurd, and &lt;strong&gt;more importantly still being on schedule,
(the original one, from my proposal) means that I can now concentrate on the core part of my 
project proposal (and the most exciting one too)&lt;/strong&gt;, that is proper implementation 
of what is &lt;em&gt;blocking effective context switching, which
in its part is blocking goroutines, without which, the go library will not work properly.&lt;/em&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      
        <category term="gsoc" />
      
        <category term="gcc" />
      
        <category term="golang" />
      

      
        <summary type="html">Yeah baby! It builds! The highlight of this week’s progress was managing to successfully build gccgo under the Hurd. Not only did it compile successfully, it also run its tests, with the results matching the ones provided by my mentor Thomas Schwinge. This was a checkpoint in my summer of code project. Successful building of the compiler meant that I am (happily) in the position to carry on with the next part (and the main one) of my project, that is, to make sure that the go library (libgo) also passes all its tests and works without any major issues. So where are we now? gccgo Compiling gccgo on the Hurd was big. But we also had to see how it compared to the build that was successful on Linux. The most effective way to compare the two builds, is to check the test results of the two. Taking a look at the gccgo results on the Hurd, I was delighted to find that it passed most of its tests. There were few that were failing, but for the most part, it did well. Below are the test results of gccgo on the Hurd: === go Summary === # of expected passes 5069 # of unexpected failures 11 # of expected failures 1 # of untested testcases 6 /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo version 4.9.0 20130606 (experimental) (GCC) So it’s passing 99% of its tests. That’s cool. But it could help to take a look at the tests that are failing, to get an idea of what the fails are, how critical they are, etc nlightnfotis@earth:~/HurdVM/HurdFiles$ grep -v ^PASS: &amp;lt; go.sum Test Run By root on Thu Jul 11 10:33:34 2013 Native configuration is i686-unknown-gnu0.3 === go tests === Schedule of variations: unix Running target unix Running /root/gcc_new/gcc/gcc/testsuite/go.dg/dg.exp ... Running /root/gcc_new/gcc/gcc/testsuite/go.go-torture/execute/execute.exp ... Running /root/gcc_new/gcc/gcc/testsuite/go.test/go-test.exp ... FAIL: go.test/test/chan/doubleselect.go execution, -O2 -g FAIL: go.test/test/chan/nonblock.go execution, -O2 -g UNTESTED: go.test/test/chan/select2.go FAIL: go.test/test/chan/select3.go execution, -O2 -g FAIL: go.test/test/chan/select5.go execution UNTESTED: go.test/test/closure.go FAIL: go.test/test/fixedbugs/bug147.go execution, -O2 -g FAIL: go.test/test/fixedbugs/bug347.go execution, -O0 -g FAIL: go.test/test/fixedbugs/bug348.go execution, -O0 -g XFAIL: bug429.go -O2 -g execution test FAIL: go.test/test/goprint.go execution UNTESTED: go.test/test/goprint.go compare UNTESTED: go.test/test/init1.go FAIL: go.test/test/mallocfin.go execution, -O2 -g FAIL: go.test/test/nil.go execution, -O2 -g FAIL: go.test/test/recover3.go execution, -O2 -g UNTESTED: go.test/test/rotate.go UNTESTED: go.test/test/stack.go === go Summary === # of expected passes 5069 # of unexpected failures 11 # of expected failures 1 # of untested testcases 6 /root/gcc_new/gccbuild/gcc/testsuite/go/../../gccgo version 4.9.0 20130606 (experimental) (GCC) Hmm. So these are the failing tests. Before we go through them, it might be a good idea to check the status of the gccgo tests on the Linux build too. Let’s see. nlightnfotis@earth:~$ grep -v ^PASS: &amp;lt; linux_go.sum Test Run By fotis on Mon Jul 15 10:28:38 2013 Native configuration is i686-pc-linux-gnu === go tests === Schedule of variations: unix Running target unix Running /home/fotis/Software/gcc/gcc/testsuite/go.dg/dg.exp ... Running /home/fotis/Software/gcc/gcc/testsuite/go.go-torture/execute/execute.exp ... Running /home/fotis/Software/gcc/gcc/testsuite/go.test/go-test.exp ... UNTESTED: go.test/test/closure.go XFAIL: bug429.go -O2 -g execution test UNTESTED: go.test/test/init1.go UNTESTED: go.test/test/rotate.go === go Summary === # of expected passes 5183 # of expected failures 1 # of untested testcases 3 /home/fotis/Software/gcc_build/gcc/testsuite/go/../../gccgo version 4.9.0 20130702 (experimental) (GCC) So, it seems like there are less tests failing here. But wait a minute. Those tests that are failing. They are the same as with the Hurd build. So I can assume that we are left with 4 less tests to check regarding their failures (Go on Linux works without any issues,so I guess it would be safe to skip those tests at the moment). That leaves us with these tests to check: FAIL: go.test/test/chan/doubleselect.go execution, -O2 -g FAIL: go.test/test/chan/nonblock.go execution, -O2 -g UNTESTED: go.test/test/chan/select2.go FAIL: go.test/test/chan/select3.go execution, -O2 -g FAIL: go.test/test/chan/select5.go execution FAIL: go.test/test/fixedbugs/bug147.go execution, -O2 -g FAIL: go.test/test/fixedbugs/bug347.go execution, -O0 -g FAIL: go.test/test/fixedbugs/bug348.go execution, -O0 -g FAIL: go.test/test/goprint.go execution UNTESTED: go.test/test/goprint.go compare FAIL: go.test/test/mallocfin.go execution, -O2 -g FAIL: go.test/test/nil.go execution, -O2 -g FAIL: go.test/test/recover3.go execution, -O2 -g UNTESTED: go.test/test/stack.go Discussing this with my mentor Thomas Schwinge in IRC (#hurd) For now, please ignore any failing tests that have »select« in their name -- that is, do file them, but do not spend a lot of time figuring out what might be wrong there. The Hurd&apos;s select implementation is a bit of a beast, and I don&apos;t want you -- at this time -- spend a lot of time on that. We already know there are some deficiencies, so we should postpone that to later. So that leaves us with even less tests to check: FAIL: go.test/test/chan/nonblock.go execution, -O2 -g FAIL: go.test/test/fixedbugs/bug147.go execution, -O2 -g FAIL: go.test/test/fixedbugs/bug347.go execution, -O0 -g FAIL: go.test/test/fixedbugs/bug348.go execution, -O0 -g FAIL: go.test/test/goprint.go execution UNTESTED: go.test/test/goprint.go compare FAIL: go.test/test/mallocfin.go execution, -O2 -g FAIL: go.test/test/nil.go execution, -O2 -g FAIL: go.test/test/recover3.go execution, -O2 -g UNTESTED: go.test/test/stack.go Nice. This narrowed down the list of errors that I have to go through to make sure that gccgo works as well on the Hurd as it does on Linux. libgo So, we talked about gccgo, but what about the runtime libraries (libgo)? They are also getting tested when we run make check-goand seeing as they are a vital part of enabling programs written on go to run on the Hurd, we ought to take a look. (This was also the original goal of my project proposal). So let us see what we have at the libgo.sum: Test Run By root on Fri Jul 12 17:56:44 UTC 2013 Native configuration is i686-unknown-gnu0.3 === libgo tests === Schedule of variations: unix Running target unix Running ../../../gcc/libgo/libgo.exp ... FAIL: bufio FAIL: bytes FAIL: errors FAIL: expvar FAIL: flag FAIL: fmt FAIL: html FAIL: image FAIL: io FAIL: log FAIL: math FAIL: mime FAIL: net FAIL: os FAIL: path FAIL: reflect FAIL: regexp FAIL: runtime FAIL: sort FAIL: strconv FAIL: strings FAIL: sync FAIL: syscall FAIL: time FAIL: unicode FAIL: archive/tar FAIL: archive/zip FAIL: compress/bzip2 FAIL: compress/flate FAIL: compress/gzip FAIL: compress/lzw FAIL: compress/zlib FAIL: container/heap FAIL: container/list FAIL: container/ring FAIL: crypto/aes FAIL: crypto/cipher FAIL: crypto/des FAIL: crypto/dsa FAIL: crypto/ecdsa FAIL: crypto/elliptic FAIL: crypto/hmac FAIL: crypto/md5 FAIL: crypto/rand FAIL: crypto/rc4 FAIL: crypto/rsa FAIL: crypto/sha1 FAIL: crypto/sha256 FAIL: crypto/sha512 FAIL: crypto/subtle FAIL: crypto/tls FAIL: crypto/x509 FAIL: database/sql FAIL: database/sql/driver FAIL: debug/dwarf FAIL: debug/elf FAIL: debug/macho FAIL: debug/pe FAIL: encoding/ascii85 FAIL: encoding/asn1 FAIL: encoding/base32 FAIL: encoding/base64 FAIL: encoding/binary FAIL: encoding/csv FAIL: encoding/gob FAIL: encoding/hex FAIL: encoding/json FAIL: encoding/pem PASS: encoding/xml FAIL: exp/cookiejar FAIL: exp/ebnf FAIL: exp/html FAIL: exp/html/atom FAIL: exp/locale/collate FAIL: exp/locale/collate/build FAIL: exp/norm FAIL: exp/proxy FAIL: exp/terminal FAIL: exp/utf8string FAIL: html/template FAIL: go/ast FAIL: go/doc FAIL: go/format FAIL: go/parser FAIL: go/printer FAIL: go/scanner FAIL: go/token FAIL: go/types FAIL: hash/adler32 FAIL: hash/crc32 FAIL: hash/crc64 FAIL: hash/fnv FAIL: image/color FAIL: image/draw FAIL: image/jpeg FAIL: image/png FAIL: index/suffixarray FAIL: io/ioutil FAIL: log/syslog FAIL: math/big FAIL: math/cmplx FAIL: math/rand FAIL: mime/multipart FAIL: net/http FAIL: net/http/cgi FAIL: net/http/fcgi FAIL: net/http/httptest FAIL: net/http/httputil FAIL: net/mail FAIL: net/rpc FAIL: net/smtp FAIL: net/textproto FAIL: net/url FAIL: net/rpc/jsonrpc FAIL: old/netchan FAIL: old/regexp FAIL: old/template FAIL: os/exec FAIL: os/signal FAIL: os/user FAIL: path/filepath FAIL: regexp/syntax FAIL: runtime/pprof FAIL: sync/atomic FAIL: text/scanner FAIL: text/tabwriter FAIL: text/template FAIL: text/template/parse FAIL: testing/quick FAIL: unicode/utf16 FAIL: unicode/utf8 === libgo Summary === # of expected passes 1 # of unexpected failures 130 /root/gcc_new/gccbuild/./gcc/gccgo version 4.9.0 20130606 (experimental) (GCC) Oh boy! Oh boy! Well, on second thoughts, this was not unexpected. This was the core of my GSOC work. This is how it starts :) Before this goes any further, maybe we should visit the Linux test results too. Test Run By fotis on Τρι 02 Ιούλ 2013 09:20:20 μμ EEST Native configuration is i686-pc-linux-gnu === libgo tests === Schedule of variations: unix Running target unix Running ../../../gcc/libgo/libgo.exp ... PASS: bufio PASS: bytes ... === libgo Summary === # of expected passes 131 /home/fotis/Software/gcc_build/./gcc/gccgo version 4.9.0 20130702 (experimental) (GCC) Wow. Considering the results from the Hurd, they really are not unexpected. Remember that getcontext, makecontext, setcontext and swapcontext are not working as expected. And recalling from an email from Ian Lance Taylor (the GCCgo maintainer, and a member of the Go team) early in the summer: Go does require switching stacks. A port of Go that doesn’t support goroutines would be useless–nothing in the standard library would work Conclusion / Work for next week. So now it comes down to work on implementing correctly the context switching functions. Apart from that, going through the test results that fail from gccgo is also something that is to be done, however I am not sure that it should be a first priority. I also have to go through go.log to see if there any clues as to why the gccgo tests fail. Having finally built gccgo on the Hurd, and more importantly still being on schedule, (the original one, from my proposal) means that I can now concentrate on the core part of my project proposal (and the most exciting one too), that is proper implementation of what is blocking effective context switching, which in its part is blocking goroutines, without which, the go library will not work properly.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Hello World</title>
      
      
      <link href="https://nlightnfotis.github.io/2013/07/14/hello-world/" rel="alternate" type="text/html" title="Hello World" />
      
      <published>2013-07-14T12:24:00+00:00</published>
      <updated>2013-07-14T12:24:00+00:00</updated>
      <id>https://nlightnfotis.github.io/2013/07/14/hello-world</id>
      <content type="html" xml:base="https://nlightnfotis.github.io/2013/07/14/hello-world/">&lt;h1&gt;A new beginning&lt;/h1&gt;

&lt;p&gt;Oh boy! A new start. Isn’t that exciting? You bet it is. It’s not however
my first introduction to blogging. I used to have a &lt;a href=&quot;http://lambdareflection.wordpress.com&quot;&gt;blog&lt;/a&gt;
on Wordpress.com, but after a while I was turned off by the fact that it felt too limited.
So I decided I wanted a new place for me to host my online presence, that wasn’t so much limited as Wordpress was.
Initially I was thinking about renting a VPS and self hosting wordpress there. But after doing a little research,
I came across &lt;a href=&quot;http://pages.github.com&quot;&gt;Github Pages&lt;/a&gt;. I started investigating 
Github pages some more, and found &lt;a href=&quot;http://jekyllrb.com&quot;&gt;jekyll&lt;/a&gt; to be very &lt;strong&gt;very&lt;/strong&gt; interesting.
After a while, I also came across &lt;a href=&quot;http://octopress.org&quot;&gt;Octopress&lt;/a&gt;. That was it. I was sold :)&lt;/p&gt;

&lt;p&gt;Free hosting of a blog, no need to maintain a server, and a platform written in &lt;a href=&quot;http://www.ruby-lang.org&quot;&gt;ruby&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Without hesitation, I immediately started working on it. I went through octopress documentation, (which needless to say, but it was fantastic)
found a wonderful theme online at &lt;a href=&quot;http://opthemes.com&quot;&gt;opthemes&lt;/a&gt;, (kudos to &lt;a href=&quot;http://alexgaribay.com&quot;&gt;Alex Garibay&lt;/a&gt; for that)
and got started.&lt;/p&gt;

&lt;p&gt;And here we are. On a platform that you can hack and customize to your liking - at least more so than the locked down version of wordpress.
On a platform that is written on a language that I don’t hate with passion (like cough, &lt;strong&gt;php&lt;/strong&gt;, cough), 
and may actually learn in the future, just for the sake of being able to customize every bit of it (gotta love the hacker’s way)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;even though I am not really interested in web development per se.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope it starts out nice. I guess that is left to be seen.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Fotis Koutoulakis</name>
          
          
        </author>
      

      

      

      
        <summary type="html">A new beginning Oh boy! A new start. Isn’t that exciting? You bet it is. It’s not however my first introduction to blogging. I used to have a blog on Wordpress.com, but after a while I was turned off by the fact that it felt too limited. So I decided I wanted a new place for me to host my online presence, that wasn’t so much limited as Wordpress was. Initially I was thinking about renting a VPS and self hosting wordpress there. But after doing a little research, I came across Github Pages. I started investigating Github pages some more, and found jekyll to be very very interesting. After a while, I also came across Octopress. That was it. I was sold :) Free hosting of a blog, no need to maintain a server, and a platform written in ruby? Without hesitation, I immediately started working on it. I went through octopress documentation, (which needless to say, but it was fantastic) found a wonderful theme online at opthemes, (kudos to Alex Garibay for that) and got started. And here we are. On a platform that you can hack and customize to your liking - at least more so than the locked down version of wordpress. On a platform that is written on a language that I don’t hate with passion (like cough, php, cough), and may actually learn in the future, just for the sake of being able to customize every bit of it (gotta love the hacker’s way) even though I am not really interested in web development per se. Hope it starts out nice. I guess that is left to be seen.</summary>
      

      
      
    </entry>
  
  
</feed>
